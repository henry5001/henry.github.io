<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript模块化</title>
      <link href="/2023/04/08/JavaScript%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>/2023/04/08/JavaScript%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="模块化历史的步伐"><a href="#模块化历史的步伐" class="headerlink" title="模块化历史的步伐"></a>模块化历史的步伐</h2><h3 id="项目只用单个js文件"><a href="#项目只用单个js文件" class="headerlink" title="项目只用单个js文件"></a>项目只用单个js文件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    ……</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> buildWorld = ……</span></span><br><span class="line"><span class="language-javascript">    ……</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> buildWorld = ……</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>被直接定义的变量太多时<br>存在Global被污染，出现命名冲突问题</p><h3 id="项目使用多个js文件"><a href="#项目使用多个js文件" class="headerlink" title="项目使用多个js文件"></a>项目使用多个js文件</h3><p>将单个js拆分，通过引用请求外部的多个 js文件，这些js通常会是按功能拆分或者按页面拆分，当然还有部分是第三方js依赖</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">outside1.js</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">outside2.js</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">outside3.js</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">……</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//outside1.js</span></span><br><span class="line">……</span><br><span class="line"><span class="keyword">var</span> buildWorld = ……</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//outside2.js</span></span><br><span class="line">……</span><br><span class="line"><span class="keyword">var</span> buildWorld = ……</span><br></pre></td></tr></table></figure><p>被直接定义的变量太多时<br>存在Global被污染，出现命名冲突问题<br>而且引用外部js过多时，存在请求过多的问题</p><h3 id="简单封装对象"><a href="#简单封装对象" class="headerlink" title="简单封装对象"></a>简单封装对象</h3><p>通过在对象里存放变量名来封装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ai.js</span></span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">AI</span> = &#123;</span><br><span class="line">    <span class="attr">enCode</span>: <span class="keyword">function</span>(<span class="params">str</span>)&#123;<span class="comment">//todo enCode str&#125;,</span></span><br><span class="line">    <span class="attr">deCode</span>: <span class="keyword">function</span>(<span class="params">str</span>)&#123;<span class="comment">//todo deCode str&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们还是通过引入外部js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">ai.js</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">index.js</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="variable constant_">AI</span>.<span class="title function_">enCode</span>(str);</span><br><span class="line"><span class="variable constant_">AI</span>.<span class="title function_">deCode</span>(str);</span><br></pre></td></tr></table></figure><p>对象的值可以被改变，是不安全的</p><h3 id="IIFE立即执行函数"><a href="#IIFE立即执行函数" class="headerlink" title="IIFE立即执行函数"></a>IIFE立即执行函数</h3><p>引用IIFE立即执行函数是安全的，在使用时立即执行，执行完毕就销毁IIFE内的变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//iife.js</span></span><br><span class="line"><span class="keyword">var</span> cbx = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//这里是安全的</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">a</span>:a</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cbx1 = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// …</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cbx2 = (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">// …</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后引用这个外部js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">iife.js</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">index.js</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cbx.<span class="title function_">a</span>();</span><br></pre></td></tr></table></figure><h3 id="基于IIFE安全操作形参"><a href="#基于IIFE安全操作形参" class="headerlink" title="基于IIFE安全操作形参"></a>基于IIFE安全操作形参</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//形参$</span></span><br><span class="line"><span class="keyword">var</span> cbx = (<span class="keyword">function</span> (<span class="params">$</span>) &#123;</span><br><span class="line">    <span class="comment">//we can use jq now</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//这里是安全的</span></span><br><span class="line">    <span class="comment">//use jq</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">a</span>:a</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="title class_">Jquery</span>);</span><br><span class="line"><span class="comment">//实参Jquery</span></span><br></pre></td></tr></table></figure><h2 id="模块化历史步伐存在的问题"><a href="#模块化历史步伐存在的问题" class="headerlink" title="模块化历史步伐存在的问题"></a>模块化历史步伐存在的问题</h2><p>请求过多<br>依赖模糊，存在引入js顺序问题<br>难以维护<br><code>后面的模块化规范就是用来解决这些问题的</code></p><h2 id="模块化规范"><a href="#模块化规范" class="headerlink" title="模块化规范"></a>模块化规范</h2><h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h3><p>每一个js文件都可以当作一个模块<br>在服务器端运行，模块的加载是运行时同步加载的，多模块存在阻塞问题<br>在浏览器端运行，模块需要提前编译打包处理，比如require语法浏览器不认识</p><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><p><code>module.exports = value</code><br><code>exports.xxx = value</code></p><p><code>require(xxx)</code><br><code>require(zzz/xxx)</code></p><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><h5 id="服务端-nodejs"><a href="#服务端-nodejs" class="headerlink" title="服务端 nodejs"></a>服务端 nodejs</h5><p>npm 是 nodejs的包管理器，现在安装nodejs后自带npm ，当然业内还存在有yarn等其他包管理器</p><p>我们假设你已经预先安装配置好了nodejs + npm环境<br>那么我们可以在命令行，使用<code>npm init</code>初始化一个npm项目<br>这将会生成一个package.json文件，如果你需要使用<code>npm install</code>安装使用其他第三方模块或者将来需要打包的话，这个<code>package.json</code>文件是必须的。<br><img src="/img/JavaScript%E6%A8%A1%E5%9D%97%E5%8C%96.md/2023-04-08-15-24-30.png"><br>编写代码md01.js 和 server.js 然后使用node运行<br>通过node运行成功<br><img src="/img/JavaScript%E6%A8%A1%E5%9D%97%E5%8C%96.md/2023-04-08-16-46-49.png"><br>md01.js </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line"><span class="title function_">f1</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;md01_f1 run~~&#x27;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">f2</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;md01_f2 run~~&#x27;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">o1</span>:&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;mysql&#x27;</span>,<span class="attr">port</span>:<span class="string">&#x27;3306&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">o2</span>:&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;mariadb&#x27;</span>,<span class="attr">port</span>:<span class="string">&#x27;3306&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">cfg</span>:<span class="string">&#x27;current used cfg001&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// exports.f1=function()&#123;</span></span><br><span class="line"><span class="comment">// console.log(&#x27;md01_f1 run~~&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// exports.f2=function()&#123;</span></span><br><span class="line"><span class="comment">// console.log(&#x27;md01_f2 run~~&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// exports.o1=&#123;</span></span><br><span class="line"><span class="comment">// name:&#x27;mysql&#x27;,</span></span><br><span class="line"><span class="comment">// port:&#x27;3306&#x27;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// exports.o2=&#123;</span></span><br><span class="line"><span class="comment">// name:&#x27;mariadb&#x27;,</span></span><br><span class="line"><span class="comment">// port:&#x27;3306&#x27;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// exports.cfg=&#x27;current used cfg002&#x27;</span></span><br></pre></td></tr></table></figure><p>server.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> md01 =  <span class="built_in">require</span>(<span class="string">&#x27;./md01&#x27;</span>)</span><br><span class="line"></span><br><span class="line">md01.<span class="title function_">f1</span>();</span><br><span class="line"></span><br><span class="line">md01.<span class="title function_">f2</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(md01.<span class="property">o1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(md01.<span class="property">o2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(md01.<span class="property">cfg</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// md01(); 如果exports对象是一个函数时</span></span><br></pre></td></tr></table></figure><h5 id="浏览器端-webpack-打包"><a href="#浏览器端-webpack-打包" class="headerlink" title="浏览器端 webpack 打包"></a>浏览器端 webpack 打包</h5><p><code>npm install webapck webpack-cli</code><br>按照webpack官方的教程，把webpack.config.js添加在根目录<br>按照配置，dist是打包后输出的位置，src是我们编写的源代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/app.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;app.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们通过在app.js使用require引用其他模块，再通过webpack打包<br><code>npx webpack</code><br><img src="/img/JavaScript%E6%A8%A1%E5%9D%97%E5%8C%96.md/2023-04-08-20-36-41.png"><br>因为是浏览器端运行，所以至少需要一个 html，并且我们最后在浏览器运行时引用的是打包后的js<br>为了方便src路径填写，我直接copy那个index.html到dist里</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打包通过浏览器运行成功<br><img src="/img/JavaScript%E6%A8%A1%E5%9D%97%E5%8C%96.md/2023-04-08-20-40-45.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微积分</title>
      <link href="/2023/04/05/%E5%BE%AE%E7%A7%AF%E5%88%86/"/>
      <url>/2023/04/05/%E5%BE%AE%E7%A7%AF%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>把你从最初的恐惧中解救出来，</p><h2 id="消除恐惧"><a href="#消除恐惧" class="headerlink" title="消除恐惧"></a>消除恐惧</h2><p>只要简单地用常识说明计算中使用的两个主要符号的含义，这种初步的恐惧就可以彻底消除。</p><ul><li>dx 微分<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Thus dx means a little bit of x; or du means a little bit of u. Ordinary mathematicians think it more polite to say “an element of,”</span><br><span class="line">instead of “a little bit of.”</span><br></pre></td></tr></table></figure>因此 dx 表示 x 的一点点；或者 du 表示u的一点点。或者普通数学家认为说“一个元素”更为礼貌</li><li>∫ 积分<br>积分这个词的意思就是整体。如果你把一小时想象成一段时间，你可以(如果你喜欢的话)把它想象成3600个叫做秒的小片段。3600个小片段加起来就是一个小时。当你看到一个以这个可怕的符号开头的表达式时，你就会知道，它放在那里只是为了给你指令，让你现在执行(如果你可以的话)把后面的符号所表示的所有小比特加起来。就是如此。</li></ul><p>如果考虑 x由很多小块组成，每个小块都称为 dx，如果你将它们全部加起来，你得到所有 dx 的总和，与整个 x相同。 “积分”一词的意思是<br>所有的。</p><h2 id="不同程度的小（无穷小）"><a href="#不同程度的小（无穷小）" class="headerlink" title="不同程度的小（无穷小）"></a>不同程度的小（无穷小）</h2><p>因此，理性主义者观察到，跳蚤身上有捕食它的小跳蚤。它们有更小的跳蚤来咬它们，就这样无限发展下去。一头牛可能会担心一只普通大小的跳蚤——一种最小的小生物。不过，他大概不会为一只跳蚤的跳蚤而烦恼;由于它是第二级的小，所以可以忽略不计。即使是一大堆跳蚤对牛来说也不算什么</p><h2 id="相对增长"><a href="#相对增长" class="headerlink" title="相对增长"></a>相对增长</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>推荐系统</title>
      <link href="/2023/01/11/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/01/11/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="推荐系统需求"><a href="#推荐系统需求" class="headerlink" title="推荐系统需求"></a>推荐系统需求</h2><p>个性化新闻推荐系统<br>用基于内容推荐算法，根据用户第一次浏览内容推荐<br>第一次进让用户选择喜欢的关键词，然后根据关键词筛选新闻，后面根据用户上一次浏览内容推荐<br>把推荐的全部在一个页面显示</p><h2 id="可能涉及的技术板块"><a href="#可能涉及的技术板块" class="headerlink" title="可能涉及的技术板块"></a>可能涉及的技术板块</h2><p><img src="/img/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/jiQiXueXi.drawio.svg" alt="主流板块路线"><br>主线板块大概是<code>人工智能 -&gt; 机器学习 -&gt; 监督学习 -&gt; 神经网络</code><br><img src="/img/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/2023-01-11-21-55-03.png" alt="人工智能其中之一 机器学习"></p><p><img src="/img/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/2023-01-11-21-58-37.png" alt="机器学习热门板块 神经网络"></p><h2 id="现有案例"><a href="#现有案例" class="headerlink" title="现有案例"></a>现有案例</h2><h2 id="什么是推荐系统"><a href="#什么是推荐系统" class="headerlink" title="什么是推荐系统"></a>什么是推荐系统</h2><p>推荐系统是机器学习中的重要应用之一，帮助你在海量内容中推荐符合用户的内容<br>能够让用户在不主动搜索寻找的情况下更快发现感兴趣的内容，虽然这都是被动受到推荐系统推荐的内容</p><h2 id="为什么推荐系统很重要"><a href="#为什么推荐系统很重要" class="headerlink" title="为什么推荐系统很重要"></a>为什么推荐系统很重要</h2><p>提升应用程序中的用户活跃度，沉浸式体验，更好地服务用户<br>电商推荐系统，不是为用户服务的，是奸商用来大数据杀熟的</p><h2 id="现代的推荐系统是怎么样的"><a href="#现代的推荐系统是怎么样的" class="headerlink" title="现代的推荐系统是怎么样的"></a>现代的推荐系统是怎么样的</h2><p>利用用户的过往行为，来预测接下来的推荐内容</p><h2 id="tensorflow推荐系统"><a href="#tensorflow推荐系统" class="headerlink" title="tensorflow推荐系统"></a>tensorflow推荐系统</h2><p>最好具有机器学习背景，并且熟悉tensorflow2<br>什么是embedding，如何使用keras训练和搭建神经网络，并进行特征工程……</p><h3 id="多个组件"><a href="#多个组件" class="headerlink" title="多个组件"></a>多个组件</h3><p>大多数基于神经网络的推荐系统会由多个组件组合构成<br>召回 -&gt; 粗排 -&gt;精排<br>以此来保证推荐内容的多样性、新鲜性、公平性<br><img src="/img/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/2023-01-13-23-21-35.png"></p><h3 id="推荐系统的难点"><a href="#推荐系统的难点" class="headerlink" title="推荐系统的难点"></a>推荐系统的难点</h3><ul><li>训练<br>高维度、稀疏的大规模模型<br>embedding 的词汇表通常会达到千万级别，甚至更多</li><li>多目标优化<br>比如视频的点赞、差评、分享、评论…… 应该优化哪一个目标？</li><li>评估<br>不能单纯依赖点击量评估，因为存在刷点击量的行为，需要多目标优化<br>评估往往不是永远都有那么高的准确率，随着时代发展，可能存在没有预见的目标被我们忽略</li><li>部署<br>数据量太大，不能使用简单的softmax，我们需要更高效的召回系统</li></ul><h3 id="google开源的几款产品"><a href="#google开源的几款产品" class="headerlink" title="google开源的几款产品"></a>google开源的几款产品</h3><p>如果你想从零开始搭建推荐系统，建议使用tensorflow recommenders 和 tensorflow ranking</p><p>tensorflow recommenders<br>与<code>scala</code>无缝集成，实现高效召回<br>与tf ranking集成实现高效排序<br>与tpu集成实现训练大规模模型</p><ul><li>ScaNN（scalable nearest neighbors）<br>快速匹配和召回相似候选条目<br>树状空间分割、非对称哈希、量化、倒排索引……</li></ul><p>机器学习模型可以将文本、图像等输入转化为 embedding，embedding是经过训练的高维向量，使得更多相似的输入能够聚集在一起</p><ul><li>tensorflow ranking<br>推荐内容的相对顺序非常重要，因为展示推荐内容的屏幕大小有限，所以排序十分重要</li></ul><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="基于内容过滤"><a href="#基于内容过滤" class="headerlink" title="基于内容过滤"></a>基于内容过滤</h2><p>根据候选条目的相似性<br>例如我们为如图4条新闻贴标签，当用户点击浏览了第一条含有education标签的新闻后，那么我们可以尝试推荐同样包含education标签的第四条新闻<br><img src="/img/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/2023-01-11-22-49-06.png"><br>容易偏科</p><h2 id="协同过滤"><a href="#协同过滤" class="headerlink" title="协同过滤"></a>协同过滤</h2><p>第一个用户看了哈利波特，史莱克，黑暗骑士<br>又因为第三个用户也观看了哈利波特和史莱克，但没观看黑暗骑士<br>那么我们可以将黑暗骑士推荐给第三个用户<br><img src="/img/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/2023-01-11-22-58-52.png"></p><h2 id="用矩阵分解进行协同过滤"><a href="#用矩阵分解进行协同过滤" class="headerlink" title="用矩阵分解进行协同过滤"></a>用矩阵分解进行协同过滤</h2><p><img src="/img/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/2023-01-11-23-28-03.png"></p><p>在机器学习中，这些 embedding 往往具有更高的维度，我们这里暂时讨论 二维 embedding 的情况，如图所示用户和电影的 embedding 都是二维的<br><img src="/img/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/2023-01-14-11-29-39.png"><br>我们可以通过用户矩阵U和电影矩阵V，求点积 dot product<br>不同维度的点积计算方法是不一样的，</p><p>1x0.9 + 0.1x(-2) &#x3D; 0.88<br><img src="/img/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/2023-01-14-12-35-29.png"><br>至此，我们的优化目标为：<br>最小化 反馈标签 和 预测反馈之间的平方差之和<br><img src="/img/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/2023-01-14-12-38-58.png"><br>需要求解最优的 用户矩阵 和 商品矩阵<br>因为最优的 用户矩阵 和 商品矩阵计算出的预测反馈矩阵与实际反馈矩阵差距是最小的<br><img src="/img/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/2023-01-28-01-11-43.png"><br>如果没有收集到用户反馈，也就是存在Aij为空时，在SVD中使用0表示空的Aij也不靠谱，实际应用中SVD往往非常稀疏，使用 Weighted MF 更合适<br><img src="/img/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/2023-01-14-12-40-47.png"></p><h2 id="DL4J推荐系统"><a href="#DL4J推荐系统" class="headerlink" title="DL4J推荐系统"></a>DL4J推荐系统</h2><h3 id="加权交替最小平方-WALS"><a href="#加权交替最小平方-WALS" class="headerlink" title="加权交替最小平方 WALS"></a>加权交替最小平方 WALS</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">假设我们有两个输入矩阵X和Y，其中X是来自用户的观看记录，而Y是来自电影的特征向量。</span><br><span class="line"> </span><br><span class="line"><span class="number">1.</span> 使用DL4J的DataSetIterator来获取X和Y的数据：</span><br><span class="line"> </span><br><span class="line"><span class="type">DataSetIterator</span> <span class="variable">xIterator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSetIterator</span>(x);</span><br><span class="line"><span class="type">DataSetIterator</span> <span class="variable">yIterator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSetIterator</span>(y);</span><br><span class="line"> </span><br><span class="line"><span class="number">2.</span> 创建一个基于DL4J的MultiLayerNetwork，用于执行加权交替最小二乘拟合：</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="variable">numInputs</span> <span class="operator">=</span> xIterator.numInputs();</span><br><span class="line"><span class="type">int</span> <span class="variable">numOutputs</span> <span class="operator">=</span> yIterator.numOutputs();</span><br><span class="line"><span class="type">int</span>[] layers = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;numInputs, numOutputs&#125;;</span><br><span class="line"><span class="type">MultiLayerNetwork</span> <span class="variable">network</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MultiLayerNetwork</span>(layers);</span><br><span class="line">network.init();</span><br><span class="line"> </span><br><span class="line"><span class="number">3.</span> 将X和Y数据集分别传递给网络，以训练它：</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> (xIterator.hasNext() &amp;&amp; yIterator.hasNext()) &#123;</span><br><span class="line">    <span class="type">DataSet</span> <span class="variable">xDataSet</span> <span class="operator">=</span> xIterator.next();</span><br><span class="line">    <span class="type">DataSet</span> <span class="variable">yDataSet</span> <span class="operator">=</span> yIterator.next();</span><br><span class="line">    network.fit(xDataSet, yDataSet);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="number">4.</span> 使用训练后的网络来预测新的输入：</span><br><span class="line"> </span><br><span class="line"><span class="type">INDArray</span> <span class="variable">newInput</span> <span class="operator">=</span> ...;</span><br><span class="line"><span class="type">INDArray</span> <span class="variable">prediction</span> <span class="operator">=</span> network.output(newInput);</span><br></pre></td></tr></table></figure><h3 id="ND4J-加权交替最小平方-v2"><a href="#ND4J-加权交替最小平方-v2" class="headerlink" title="ND4J 加权交替最小平方 v2"></a>ND4J 加权交替最小平方 v2</h3><p>加权交替最小平方（Weighted Alternating Least Squares，WALS）是一种基于矩阵分解的推荐系统。它可以用来预测用户对物品的评分，从而实现推荐功能。</p><p>在nd4j中，可以使用WALSRecommender类来实现加权交替最小平方的推荐系统。该类提供了一个fit()方法，可以根据用户-物品评分数据集进行训练，并生成一个预测器。然后可以使用predict()方法对新的用户-物品对进行预测。</p><h3 id="ND4J-加权交替最小平方-v3"><a href="#ND4J-加权交替最小平方-v3" class="headerlink" title="ND4J 加权交替最小平方 v3"></a>ND4J 加权交替最小平方 v3</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.deeplearning4j.nn.api.OptimizationAlgorithm;</span><br><span class="line"><span class="keyword">import</span> org.deeplearning4j.nn.conf.MultiLayerConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.deeplearning4j.nn.conf.NeuralNetConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.deeplearning4j.nn.conf.layers.*;</span><br><span class="line"><span class="keyword">import</span> org.deeplearning4j.nn.*;</span><br><span class="line"><span class="keyword">import</span> org.nd4j.*;</span><br><span class="line"><span class="keyword">import</span> org.nd4j.*;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 定义输入和输出的维度，以及隐藏层的神经元数量 </span></span><br><span class="line"><span class="type">int</span> <span class="variable">numInputs</span> <span class="operator">=</span> <span class="number">10</span>;  <span class="comment">// 输入维度 </span></span><br><span class="line"><span class="type">int</span> <span class="variable">numOutputs</span> <span class="operator">=</span> <span class="number">5</span>;  <span class="comment">// 输出维度 </span></span><br><span class="line"><span class="type">int</span> <span class="variable">numHiddenNodes</span> <span class="operator">=</span> <span class="number">20</span>; <span class="comment">// 隐藏层神经元数量 </span></span><br><span class="line"></span><br><span class="line"> <span class="type">MultiLayerConfiguration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NeuralNetConfiguration</span> .Builder() </span><br><span class="line">    .seed(<span class="number">123</span>) <span class="comment">// 随机数种子，用于初始化权重 </span></span><br><span class="line">    .optimizationAlgo(OptimizationAlgorithm .STOCHASTIC_GRADIENT_DESCENT) <span class="comment">// 梯度下降优化算法 </span></span><br><span class="line">    .updater(<span class="keyword">new</span> <span class="title class_">Nesterovs</span> (<span class="number">0</span>, <span class="number">0</span>)) <span class="comment">// 加权交替最小平方更新器，可以改变学习速率和动量因子  </span></span><br><span class="line"></span><br><span class="line">    .list()   <span class="comment">// 创建多层配置的列表  </span></span><br><span class="line"></span><br><span class="line">    .layer(<span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">DenseLayer</span> .Builder() <span class="comment">// 创建输入层  </span></span><br><span class="line"></span><br><span class="line">        .nIn(numInputs)   <span class="comment">// 输入神经元数量  </span></span><br><span class="line"></span><br><span class="line">        .nOut(numHiddenNodes)   <span class="comment">// 输出神经元数量  </span></span><br><span class="line"></span><br><span class="line">        .activation(<span class="string">&quot;relu&quot;</span>)     <span class="comment">// 激活函数  </span></span><br><span class="line"></span><br><span class="line">        .build())  </span><br><span class="line"></span><br><span class="line">    .layer(<span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">OutputLayer</span> .Builder()     <span class="comment">// 创建输出层  </span></span><br><span class="line"></span><br><span class="line">        .nIn(numHiddenNodes)     <span class="comment">// 输入神经元数量  </span></span><br><span class="line"></span><br><span class="line">        .nOut(numOutputs)     <span class="comment">// 输出神经元数量  </span></span><br><span class="line"></span><br><span class="line">        .activation(<span class="string">&quot;softmax&quot;</span>)      <span class="comment">// 激活函数  </span></span><br><span class="line"></span><br><span class="line">        .build())      </span><br><span class="line"></span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><h3 id="ND4J-加权交替最小平方-v4"><a href="#ND4J-加权交替最小平方-v4" class="headerlink" title="ND4J 加权交替最小平方 v4"></a>ND4J 加权交替最小平方 v4</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.deeplearning4j.nn.api.OptimizationAlgorithm;</span><br><span class="line"><span class="keyword">import</span> org.deeplearning4j.nn.conf.MultiLayerConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.deeplearning4j.nn.conf.NeuralNetConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.deeplearning4j.nn.conf.layers.*;</span><br><span class="line"><span class="keyword">import</span> org.deeplearning4j.nn.*;</span><br><span class="line"><span class="keyword">import</span> org.nd4j.*;</span><br><span class="line"><span class="keyword">import</span> org.nd4j.*;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义输入层，输出层，隐藏层的大小 </span></span><br><span class="line">  <span class="type">int</span> <span class="variable">inputSize</span> <span class="operator">=</span> <span class="number">10</span>;   <span class="comment">// 输入层大小 </span></span><br><span class="line">  <span class="type">int</span> <span class="variable">outputSize</span> <span class="operator">=</span> <span class="number">5</span>;   <span class="comment">// 输出层大小 </span></span><br><span class="line">  <span class="type">int</span> <span class="variable">hiddenSize</span> <span class="operator">=</span> <span class="number">20</span>;  <span class="comment">// 隐藏层大小</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义权重矩阵，用于加权交替最小平方推荐系统  </span></span><br><span class="line">  <span class="type">INDArray</span> <span class="variable">weights</span> <span class="operator">=</span> Nd4j .rand(inputSize, outputSize);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建多层神经网络配置对象  </span></span><br><span class="line"><span class="type">MultiLayerConfiguration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NeuralNetConfiguration</span> .Builder()  </span><br><span class="line">    .seed(<span class="number">123</span>)    <span class="comment">// 设定随机数生成的种子，以便可以复制试验的结果  </span></span><br><span class="line">    .optimizationAlgo(OptimizationAlgorithm .STOCHASTIC_GRADIENT_DESCENT)    <span class="comment">// 梯度下降优化方法  </span></span><br><span class="line">    .list()   <span class="comment">// 创建一个神经元列表，用于添加神经元  </span></span><br><span class="line">    .layer(<span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">DenseLayer</span> .Builder()     <span class="comment">// 创建一个DenseLayer，它是一个全连接的神经元层  </span></span><br><span class="line">        .nIn(inputSize)     <span class="comment">// 设定输入神经元数量  </span></span><br><span class="line">        .nOut(hiddenSize)     <span class="comment">// 设定隐藏神经元数量  </span></span><br><span class="line">        .weightInit(WeightInit .XAVIER)     <span class="comment">// 权重初始化方法，XAVIER是一个常用的权重初始化方法  </span></span><br><span class="line">        .activation(<span class="string">&quot;relu&quot;</span>)     <span class="comment">// 激活函数，这里使用ReLU作为激活函数  </span></span><br><span class="line">        .build())     </span><br><span class="line"></span><br><span class="line">    .layer(<span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">OutputLayer</span> .Builder()      <span class="comment">// 创建一个OutputLayer，它是一个输出神经元层     // 用于加权交替最小平方推荐系统     // 权重可以通过weights变量传递过来     // 激活函数使用sigmoid作为非线性映射     // 用MSE作为loss function       )       )       )       )       )       )       )       )       )       ).build();</span></span><br><span class="line"></span><br><span class="line"> <span class="type">MultiLayerNetwork</span> <span class="variable">model</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MultiLayerNetwork</span> (conf);     model。setParameters (weights);     model。init();</span><br></pre></td></tr></table></figure><h3 id="DL4J矩阵分解"><a href="#DL4J矩阵分解" class="headerlink" title="DL4J矩阵分解"></a>DL4J矩阵分解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">因为DL4J支持多种常用训练模型，其中包括矩阵分解。可以使用相应API实现。下面是一个例子：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="comment">// 创建数据集、训练评估器以及定义其他配置参数</span></span><br><span class="line"><span class="type">DataSetIterator</span> <span class="variable">dataSetIterator</span> <span class="operator">=</span> ... </span><br><span class="line"><span class="type">Evaluation</span> <span class="variable">evaluation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Evaluation</span>(); </span><br><span class="line"><span class="type">MultiLayerConfiguration</span> <span class="variable">conf</span> <span class="operator">=</span> ...;  <span class="comment">// 可根据业务场景进行定制 </span></span><br><span class="line"><span class="type">int</span> <span class="variable">vectorSize</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">// 特征向量中每个特征的大小  </span></span><br><span class="line"><span class="type">int</span> <span class="variable">numUserMovies</span> <span class="operator">=</span> DataSetIterator.getNumberOfMetaDataFields(); <span class="comment">// 连年所有电影的数量 </span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建并安装DL4J的MatrixFactoreizzerRecConnectedModel  </span></span><br><span class="line"><span class="type">MatrixFactorizationReconnected</span> <span class="variable">model</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MatrixFactorizationReconnected</span>(conf);      model.setVectorSize(vectorSize);     model.setNumberOfUsers(numUserMovies);    model.init();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 训练数字  </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;epochs; i++) &#123;          model.fit(dataSetIterator);   &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 运行预测，输出评估       INDArray predictedRatings = model.predict(dataSetIterator);        evaluation.eval(predictedRatings, dataSetIterator);</span></span><br></pre></td></tr></table></figure><h2 id="什么是推荐系统-1"><a href="#什么是推荐系统-1" class="headerlink" title="什么是推荐系统"></a>什么是推荐系统</h2><p>推荐系统就是自动联系用户和物品的一种工具，它能够在信息过载的环境中帮助用户发现令他们感兴趣的信息，也能将信息推送给对它们感兴趣的用户。</p><p>分类 -&gt; 搜索引擎 -&gt; 推荐系统</p><p>用户有明确目标时可以主动通过分类找到想要的内容。<br>和搜索引擎一样，推荐系统也是一种帮助用户快速发现有用信息的工具。和搜索引擎不同的是，推荐系统不需要用户提供明确的需求，而是通过分析用户的历史行为给用户的兴趣建模，从而主动给用户推荐能够满足他们兴趣和需求的信息。因此，从某种意义上说，推荐系统和搜索引擎对于用户来说是两个互补的工具。搜索引擎满足了用户有明确目的时的主动查找需求，而推荐系统能够在用户没有明确目的的时候帮助他们发现感兴趣的新内容。</p><h2 id="建模数据的来源"><a href="#建模数据的来源" class="headerlink" title="建模数据的来源"></a>建模数据的来源</h2><p>标签来源，开发者人工标注，用户行为（浏览记录，搜索记录，去过的地方，当前位置，购买、收藏、点赞、评论、关注等等……）<br>利用用户通过图片验证码标注（视物品数量可能需要大量用户和较长时间）</p><h2 id="推荐系统评测"><a href="#推荐系统评测" class="headerlink" title="推荐系统评测"></a>推荐系统评测</h2><p>推荐系统的重要指标是预测准确度</p><p>虽然有的时候推荐系统不一定帮得上忙，比如我已经打算买《数据库教程》这本书，只是没时间去买，结果还给我推荐……</p><p>好的推荐系统不仅仅能够准确预测用户的行为，而且能够扩展用户的视野，帮助用户<br>发现那些他们可能会感兴趣，但却不那么容易发现的东西。</p><p>推荐系统是能够影响三者的利益的：用户，商家（商品），应用（网站）</p><h2 id="推荐系统实验方法"><a href="#推荐系统实验方法" class="headerlink" title="推荐系统实验方法"></a>推荐系统实验方法</h2><ul><li>离线实验<br>收集用户的历史行为数据通常是数据库的记录，设计并训练模型，设计测试数据来测试预测的结果<br>无法获得实时的数据指标，点击率，转化率等……</li><li>用户调查<br>挑选人员来充当用户进行测试，<br>人力成本高，参与测试人员少导致结果意义不大<br>需要尽量保证测试用户的分布和真实用户的分布相同，比如男女各半，以及年龄、活跃度的分布都和真实用户分布尽量相同。此外，用户调查要尽量保证是双盲实验，不要让实验人员和用户事先知道测试的目标，以免用户的回答和实验人员的测试受主观成分的影响</li><li>在线实验<br>将推荐系统部署上线做AB测试，将新系统和旧系统并行作比较<br>系统庞大，部署时间长，需要控制变量，正交分解流量，比如可能该流量来自于页面推荐算法也可能来自于后端推荐算法，或者两者都有……</li></ul><h2 id="推荐系统评测指标"><a href="#推荐系统评测指标" class="headerlink" title="推荐系统评测指标"></a>推荐系统评测指标</h2><h3 id="用户满意度"><a href="#用户满意度" class="headerlink" title="用户满意度"></a>用户满意度</h3><p>不是单纯的满意&#x2F;不满意<br>而是具体到在系统（网站）中的某些行为，对商品各方面的满意度<br>还可以通过点击率、用户停留时间和转化率等来度量用户满意度</p><h3 id="预测准确度"><a href="#预测准确度" class="headerlink" title="预测准确度"></a>预测准确度</h3><p>一般指预测用户行为的能力，本文主要讨论topN推荐</p><ul><li>评分预测<br>评分也是一种用户行为，比如五星好评，预测用户对未来某个商品的评分，但是购买后不一定会评价，又或许是因为内心评价高了才购买？如果没有购买那就没有评价？我认为评价还可以细分为售前和售后<br>售前：所见所闻，某些渠道体验使用<br>售后：用户切切实实的使用体验</li><li>topN推荐<br>用户下一步对该商品的行为</li></ul><h3 id="覆盖率"><a href="#覆盖率" class="headerlink" title="覆盖率"></a>覆盖率</h3><p>覆盖率 &#x3D; 向全部用户推荐出去的物品数 &#x2F; 总物品数<br>直接用上面的式子计算覆盖率太过粗略，即使覆盖率100%也不能绝对表示覆盖率高，除非这个分布比较平，当然了通常分布都是倾斜陡峭的，那实际覆盖率是达不到100%的</p><p>一般覆盖率还使用 信息熵（评估陡峭） 和 基尼系数（评估马太效应） 来评估</p><p>需要尽量避免马太效应，强者更强，弱者更弱，热搜的越热，冷门的越冷，避免这种现象</p><p>G1、G2忘了配图了，下面这段话没图看不懂可以先跳过……<br>如果G1是从初始用户行为中计算出的物品流行度的基尼系数，G2是从推荐列表中计算出的物品流行度的基尼系数，那么如果G2 &gt; G1，就说明推荐算法具有马太效应。</p><h3 id="多样性"><a href="#多样性" class="headerlink" title="多样性"></a>多样性</h3><p>如果推荐列表只能覆盖用户的一个兴趣点，而这个兴趣点不是用户这个时刻的兴趣点，推荐列表就不会让用户满意。反之，如果推荐列表比较多样，覆盖了用户绝大多数的兴趣点，那么就会增加用户找到感兴趣物品的概率。因此给用户的推荐列表也需要满足用<br>户广泛的兴趣，即具有多样性。</p><p>多样性描述了物品两两之间的不相似性</p><h3 id="新颖性"><a href="#新颖性" class="headerlink" title="新颖性"></a>新颖性</h3><p>用户在本系统和别的网站系统或者现实生活中都没看过的<br>评测新颖度的最简单方法是利用推荐结果的平均流行度，因为越不热门的物品越可能让用户觉得新颖</p><h3 id="惊喜度"><a href="#惊喜度" class="headerlink" title="惊喜度"></a>惊喜度</h3><p>提高推荐惊喜度需要提高推荐结果的用户满意度，同时降低推荐结果和用户历史兴趣的相似度。很显然，我们知道该这么做，但是我们又不能这么做……你没办法提前知道用户尝试兴趣之外的事物后是否对这个事务作为新的兴趣</p><h3 id="信任度"><a href="#信任度" class="headerlink" title="信任度"></a>信任度</h3><ul><li>朋友信任度<br>如果你有两个朋友，一个人你很信任，另一个人经常满嘴跑火车编故事，相比你更信任第一个推荐的物品</li><li>推荐系统信任度<br>提高推荐系统对用户的透明度，向用户解释推荐系统推荐该物品的理由原理</li></ul><h3 id="实时性"><a href="#实时性" class="headerlink" title="实时性"></a>实时性</h3><p>新闻系统推荐昨天的新闻不如推荐当天的新闻<br>用户购买iPhone后立马实时推荐iPhone配件<br>如果推荐列表在用户有行为后变化不大，或者没有变化，说明推荐系统的实时性不高。</p><h3 id="健壮性"><a href="#健壮性" class="headerlink" title="健壮性"></a>健壮性</h3><p>像搜索引擎那样，推荐系统也能通过作弊被利用来获利<br>聊天评论区的网络水军，给自家产品刷好评，恶意差评竞争对手<br>刷商品的购买量<br>数据是可以作假的，只要有利益关系，那么作弊行为就屡禁不止……<br>在使用数据前，进行作弊攻击检测，从而对数据进行清理限流等</p><h2 id="评测维度"><a href="#评测维度" class="headerlink" title="评测维度"></a>评测维度</h2><p>一个推荐算法，可能在某些情况下取得的效果不是很好，我们需要发掘出一个算法在什么情况下效果最好，以便于尝试融合其他的推荐算法来提升推荐系统的指标，多个算法融合取长补短。</p><p>用户：性别、年龄、活跃度、新用户<br>物品：热门度、新物品、类别<br>时间：季节、工作日、周末、节假日</p><h2 id="推荐系统建议"><a href="#推荐系统建议" class="headerlink" title="推荐系统建议"></a>推荐系统建议</h2><p>（1）确定你真的需要推荐系统。推荐系统只有在用户遇到信息过载时才必要。如果你的网站物品不太多，或者用户兴趣都比较单一，那么也许并不需要推荐系统。所以不要纠结于推荐系统这个词，不要为了做推荐系统而做推荐系统，而是应该从用户的角度出发，设计出能够真正帮助用户发现内容的系统，无论这个系统算法是否复杂，只要能够真正帮助用户，就是一个好的系统。</p><p>（2）确定商业目标和用户满意度之间的关系。对用户好的推荐系统不代表商业上有用的推荐系统，因此要首先确定用户满意的推荐系统和商业上需求的差距。一般来说，有些时候用户满意和商业需求并不吻合。但是一般情况下，用户满意度总是符合企业的长期利益，因此这一条的主要观点是要平衡企业的长期利益和短期利益之间的关系。</p><p>（3）平衡数据和算法之间的关系。使用正确的用户数据对推荐系统至关重要。对用户行为数据的深刻理解是设计好推荐系统的必要条件，因此分析数据是设计系统中最重要的部分。数据分析决定了如何设计模型，而算法只是决定了最终如何优化模型。</p><p>（4） 找到相关的物品很容易，但是何时以何种方式将它们展现给用户是很困难的。不要为了推荐而推荐。</p><p>（5）不要浪费时间计算相似兴趣的用户，可以直接利用社会网络数据。</p><h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><p>人算不如机算，机算不如天算，纵使推荐系统能够很好地对用户的行为和兴趣通过计算后在页面上给出推荐结果，但任何事物都讲究天时地利人和，用户下一步要做什么，只有用户自己知道，甚至有的时候用户被胁迫了也不能点点头</p><p>在青学正式球员的比赛中，越前龙马 识破 乾 的推荐系统后，不按照历史行为出牌，反败为胜</p><p>我们获取的行为兴趣信息往往是不够全面的，仅来自于该推荐系统，那么其他推荐系统呢？现实生活呢？除了我的行为，别人的行为传递给我的视觉、嗅觉、听觉、触觉后又有什么影响？是触发了我的回忆在脑海中复现了往日的图像还是我将该画面作为新的记忆？触发了回忆或记忆后，我下一步会做什么呢？</p><p>短时间内不必追求完美，只要推荐系统用起来能够真正帮助用户，就是一个好的系统</p><p>flash 闪电侠也是在不断回滚时间线，不断尝试才战胜敌方超能力者的</p><h2 id="非常感谢"><a href="#非常感谢" class="headerlink" title="非常感谢"></a>非常感谢</h2><p>[^1]:推荐系统实践 项亮编著 北京 人民邮电出版社 2012.6[<a href="https://www.xuetangx.com/course/USTC08091001657/12423937">https://www.xuetangx.com/course/USTC08091001657/12423937</a> ]</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>集成开发工具IntelliJ IDEA</title>
      <link href="/2022/12/24/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/"/>
      <url>/2022/12/24/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/</url>
      
        <content type="html"><![CDATA[<p>IDEA全称 IntelliJ IDEA，是Java编程语言的集成开发环境。免费版只支持Java，Kotlin等少数语言。</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>CTRL + AZXCVFR 全选，撤销，剪切，复制，粘贴，搜索，替换</p><p>使用文件内容搜索，配置后还可以过滤文件类型<br>CTRL + Shift + F<br>配置File mask设置后缀名属性过滤文件类型<br><code>C:\Users\henry\AppData\Roaming\JetBrains\IntelliJIdea2021.1\options\find.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">&quot;FindSettings&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;customScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;All Places&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;defaultScopeName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;All Places&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;SEARCH_SCOPE&quot;</span> <span class="attr">value</span>=<span class="string">&quot;All Places&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mask</span>&gt;</span>*.properties<span class="tag">&lt;/<span class="name">mask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mask</span>&gt;</span>*.html<span class="tag">&lt;/<span class="name">mask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mask</span>&gt;</span>*.css<span class="tag">&lt;/<span class="name">mask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mask</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">mask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mask</span>&gt;</span>*.vue<span class="tag">&lt;/<span class="name">mask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mask</span>&gt;</span>*.sql<span class="tag">&lt;/<span class="name">mask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mask</span>&gt;</span>*.js<span class="tag">&lt;/<span class="name">mask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mask</span>&gt;</span>*.yml<span class="tag">&lt;/<span class="name">mask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mask</span>&gt;</span>*.xml<span class="tag">&lt;/<span class="name">mask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mask</span>&gt;</span>*.java<span class="tag">&lt;/<span class="name">mask</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用文件名搜索<br>双击 Shift</p><p>光标增域选择<br>CTRL + W</p><p>在域内搜索<br>先CTRL + W，再CTRL + R</p><p>跳转到某行<br>CTRL + G</p><p>CTRL + F4关闭标签</p><h2 id="开发调试"><a href="#开发调试" class="headerlink" title="开发调试"></a>开发调试</h2><p>ALT + 1~7 项目资源，debug窗口，文件大纲</p><p>CTRL + Shift + ↑&#x2F;↓<br>调整debug窗口大小</p><p>ESC<br>返回编辑窗口</p><p>F7 进入方法的具体实现，不管是否实现类<br>F8 下一行<br>F9 下一个断点</p><p>Shift + F7 进入字节码层面的具体实现</p><p>F7 和 Shift + F7 的区别<br>对于你自己的代码step into &#x3D; force *，对于第三方库里的代码，force会先找source，找不到会根据字节码生成一个</p><p>Shift + F8 进入实现后，将实现方法执行完并return，断点到下一行</p><p>Shift + F9<br>比如当前断点在line:3<br>我想断点直接到line：7<br>可以先鼠标点击line：7 行，再 Shift + F9</p><p>条件断点</p><p>表达式</p><p>结束当前方法<br>不执行当前断点和当前方法的后续内容，并强制return<br><img src="/img/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/2022-12-24-14-01-06.png"></p><p>Stream面板</p><p>设置异常断点</p><h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><p>Find usages<br>这个方法在哪被使用了？耦合点在哪？修改这个方法后可能造成的影响？<br>ALT + F7</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/12/18/hello-world/"/>
      <url>/2022/12/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><p><code>test</code></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>svn版本管理</title>
      <link href="/2022/11/01/svn%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
      <url>/2022/11/01/svn%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="svn版本管理"><a href="#svn版本管理" class="headerlink" title="svn版本管理"></a>svn版本管理</h1><p>SVN是subversion的缩写，是一个开放源代码的版本控制系统，通过采用分支管理系统的高效管理，简而言之就是用于多个人共同开发同一个项目，实现共享资源，实现最终集中式的管理。</p><h2 id="svn的安装和配置"><a href="#svn的安装和配置" class="headerlink" title="svn的安装和配置"></a>svn的安装和配置</h2><p>以linux系统为例<br>svn安装<code>apt-get install subversion</code></p><p>创建仓库文件夹，首先建立svn文档的根目录 svnrepo, 然后创建一个项目仓库的文件夹 uapp<br><code>mkdir /svnrepo</code><br><code>mkdir /svnrepo/uapp</code><br>将uapp作为仓库<br><code>svnadmin create /svnrepo/uapp</code><br>启动 svn 服务，并指定 svn 数据存储的根目录<br><code>svnserve -d -r /svnrepo</code></p><h2 id="svnWebUi可视化后台管理"><a href="#svnWebUi可视化后台管理" class="headerlink" title="svnWebUi可视化后台管理"></a>svnWebUi可视化后台管理</h2><p>svnWebUi运行起来后可以通过浏览器很方便地配置用户名密码，仓库，用户，组等权限。<br>需要提前安装Java<br>把jar包运行起来即可，注意启动项设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># svn</span></span><br><span class="line">svnserve -d -r ~/svnWebUI/repo</span><br><span class="line"><span class="comment"># svnUI</span></span><br><span class="line"><span class="built_in">nohup</span> java -jar -Dfile.encoding=UTF-8 ~/svnWebUI/svnWebUI.jar --server.port=6060 --project.home=~/svnWebUI/ &gt; ~/logs/svnUI.<span class="built_in">log</span> &amp;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>软件设计师王勇2021版观看笔记</title>
      <link href="/2022/10/28/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/28/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机组成与体系结构"><a href="#计算机组成与体系结构" class="headerlink" title="计算机组成与体系结构"></a>计算机组成与体系结构</h2><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><h4 id="R进制转十进制"><a href="#R进制转十进制" class="headerlink" title="R进制转十进制"></a><code>R进制转十进制</code></h4><p>按权展开，把每个位置上的数和它自己的权，相乘，再将每个位置的结果相加。<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-10-16-20-07-01.png"></p><h4 id="十进制转R进制"><a href="#十进制转R进制" class="headerlink" title="十进制转R进制"></a><code>十进制转R进制</code></h4><p>短除法，几进就除几，除到商为零，余数倒着写<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-10-16-22-30-51.png"></p><h4 id="二进制转八进制与十六进制数"><a href="#二进制转八进制与十六进制数" class="headerlink" title="二进制转八进制与十六进制数"></a><code>二进制转八进制与十六进制数</code></h4><p>二进制转八进制 <code>三位一体 421</code><br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-10-16-20-13-13.png"><br>二进制转十进制，因10不满足2的几次幂，只能使用<a href="####%60R%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B6%60">R进制转十进制</a><br>二进制转十六进制 <code>四位一体 8421</code><br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-10-16-20-14-06.png"></p><p>tips: 八进制与十六进制转二进制也遵循以上法则，不过是逆着求解罢了。</p><h4 id="原码反码补码移码"><a href="#原码反码补码移码" class="headerlink" title="原码反码补码移码"></a><code>原码反码补码移码</code></h4><p>一般地，我们存储数据时会规定这个数据占多少字节，我们这里暂时仅讨论一个字节，也就是8个位的情况。<br>比如用8个位来表示，十进制的1，我们需要在高位添零补位 <code>00000001</code><br>有的时候会讨论到带符号的情况，那么我们把最高位约定为符号位，<code>正零负壹</code></p><h2 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h2><h3 id="数据库三级模式两级映射"><a href="#数据库三级模式两级映射" class="headerlink" title="数据库三级模式两级映射"></a><code>数据库三级模式两级映射</code></h3><p><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-10-29-12-48-28.png"><br><code>三级模式</code>：外模式、概念模式、内模式<br><code>两级映射</code>：外模式-概念模式映射、概念模式-内模式映射</p><h3 id="数据库设计过程"><a href="#数据库设计过程" class="headerlink" title="数据库设计过程"></a><code>数据库设计过程</code></h3><p>这一节需要我们了解，整个设计过程的流程是怎么走下来的，以及每一个不同阶段它会有的不同的产出物。<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-10-29-12-43-35.png"><br>流程的走向依次是：需求分析、概念结构设计、逻辑结构设计、物理设计<br>不同流程阶段的产出有：<br><code>需求分析</code>：数据流图、数据字典、需求说明书<br><code>概念结构设计</code>：ER模型<br><code>逻辑结构设计</code>：关系模式</p><h3 id="ER模型"><a href="#ER模型" class="headerlink" title="ER模型"></a><code>ER模型</code></h3><p>事实上，一个成熟的系统不仅仅是只包含有两个实体的ER模型，而是多个ER模型的集成。</p><h4 id="集成ER模型的方法"><a href="#集成ER模型的方法" class="headerlink" title="集成ER模型的方法"></a>集成ER模型的方法</h4><ul><li>多个ER模型一次性全部集成</li><li>逐步集成，用累加的方式每一次将两个ER图集成起来</li></ul><h4 id="集成产生的冲突"><a href="#集成产生的冲突" class="headerlink" title="集成产生的冲突"></a>集成产生的冲突</h4><ul><li>属性冲突<br>相同的属性，在不同的表可能有不同的枚举值，你用01，我用TF</li><li>命名冲突<br>e.g: 在教职工表和学生表中，员工编号和教师编号可能是同一个值</li><li>结构冲突<br>同一实体在不同ER图中所包含的属性个数或顺序不同，具有不同的抽象</li></ul><h4 id="ER模型转关系模式"><a href="#ER模型转关系模式" class="headerlink" title="ER模型转关系模式"></a>ER模型转关系模式</h4><p><code>一个实体对应一个关系模式</code>，然后有三种联系模式，不同联系模式转成关系模式的时候有差异。</p><ul><li>1:1联系<br>最少两个关系模式，因为联系可以单独转成一个关系模式，也可以把联系合并到某一个实体，合并后只剩两个实体，所以最少是两个关系模式</li><li>1:n联系<br>最少两个关系模式，因为联系可以单独转成一个关系模式，也可以把联系合并到数据量较大的一个实体，合并后只剩两个实体，所以最少是两个关系模式</li></ul><p>比如 部门&lt;&gt;员工 中，正确的合并是把联系合并到员工实体中。</p><ul><li>m:n联系<br>最少三个关系模式，联系也必须转成一个关系模式</li></ul><p>前面是两个实体的关系模式，如果是三个以上实体间的一个多元联系，转关系模式可以参考如下例题<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-10-29-16-56-10.png"></p><h3 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数"></a><code>关系代数</code></h3><h4 id="交"><a href="#交" class="headerlink" title="交"></a>交</h4><p>写作 <code>S1∩S2</code><br>取S1和S2的公共部分<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-10-29-21-31-03.png"></p><h4 id="并"><a href="#并" class="headerlink" title="并"></a>并</h4><p>写作 <code>S1∪S2</code><br>在保证结果元素唯一性的前提下，求S1和S2的元素总和，重复的记录在结果中只显示一次<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-10-29-21-32-50.png"></p><h4 id="差"><a href="#差" class="headerlink" title="差"></a>差</h4><p>写作 <code>S1-S2</code>(差)，就是求在S1有但在S2没有的，S1 - (S1 ∩ S2)<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-10-29-21-39-24.png"></p><h4 id="笛卡儿积"><a href="#笛卡儿积" class="headerlink" title="笛卡儿积"></a>笛卡儿积</h4><p>写作 <code>S1 X S2</code> ，笛卡儿积，是S1的每一条记录都要与S2的每一条记录拼接<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-10-29-21-47-03.png"></p><h4 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h4><p>写作 <code>Πc1,c2(S1)</code><br>投影有两种写法，投影某几个列，投影第几个列<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-10-29-21-58-40.png"></p><h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><p>写作 <code>6c1=v(S1)</code><br>选择有两种写法，选择columName&#x3D;value，或者选择第几个colum&#x3D;value<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-10-29-22-08-53.png"></p><h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><p>连接写作 <code>S1▷◁S2</code>或 <code>S1⨝S2</code><br>一般地，我们还会在连接符号下方写上连接条件<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-10-29-22-23-42.png"><br>如果没有写连接条件，就是自然连接，会把S1、S2中相同名称的列作为等值连接条件，比如这里只有sno是相同的，s1.sno&#x3D;s2.sno</p><p>值得注意的是，如果我们S1 X S2笛卡儿积的话，这里得到的结果记录比较多，而且是5列；但是S1⨝S2得到的结果只有4列。</p><h3 id="规范化理论-函数依赖"><a href="#规范化理论-函数依赖" class="headerlink" title="规范化理论_函数依赖"></a>规范化理论_函数依赖</h3><p>类似数学中的函数f(x)&#x3D;y那样，函数依赖也是讲了通过什么来确定什么。</p><h4 id="部分函数依赖"><a href="#部分函数依赖" class="headerlink" title="部分函数依赖"></a>部分函数依赖</h4><p>(学号，课程号)&#x3D;学生姓名<br>(学号)&#x3D;学生姓名<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-05-11-07-19.png"><br>虽然我们可以通过(学号，课程号)来确定一个学生姓名，但是我们可以只用(学号)就能确定一个学生的姓名。</p><h4 id="传递函数依赖"><a href="#传递函数依赖" class="headerlink" title="传递函数依赖"></a>传递函数依赖</h4><p>A确定了B，B确定了C，并且B不能确定A，那么我们可以得出推理A确定了C。<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-05-11-21-34.png"></p><h3 id="规范化理论-价值与用途"><a href="#规范化理论-价值与用途" class="headerlink" title="规范化理论_价值与用途"></a>规范化理论_价值与用途</h3><p>非规范化的关系模式，可能存在的问题包括：数据冗余、更新异常、插入异常、删除异常。<br>规范化理论的价值与用途，主要是为了解决这一系列的问题。</p><p>与规范化理论相反，存在非规范化理论（反规范化理论）<br>因为数据库的设计并没有绝对的标准，后面的章节会提到反规范化技术。</p><h3 id="规范化理论-候选键"><a href="#规范化理论-候选键" class="headerlink" title="规范化理论_候选键"></a>规范化理论_候选键</h3><p>什么是候选键？<br>候选键怎么求？<br>候选键和主键的关系<br>外键如何求<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-05-12-28-48.png"></p><ul><li><code>超键</code>：单个属性或者多个属性的组合，且能够唯一标识元组</li><li><code>候选键</code>：去掉超键的冗余属性就是候选键，候选键也能够唯一标识元组</li><li><code>主键</code>：主键只有一个，在候选键中任取一个就是主键</li><li><code>外键</code>：其他关系的主键，多表关联的时候会用到<br>下面是王勇老师讲解的求候选键的例题<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-05-14-10-03.png"><br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-05-14-09-13.png"><br>找入度为0的属性，以该属性为起点，若能正常遍历图中所有结点，则该属性为关系模式的候选键<br>若入度为0的属性不能遍历所有结点，则需要尝试将一些中间结点（可以是既有入度，又有出度的结点）并入集合中，此集合为候选键。</li></ul><h3 id="规范化理论-范式"><a href="#规范化理论-范式" class="headerlink" title="规范化理论_范式"></a>规范化理论_范式</h3><p>1NF、2NF……BCNF…………，规范化程度越来越高，范式提高级别，基本上就是进行数据表的拆分，这样会带来性能上的问题，所以一般做到3NF就差不多了。<br>要达到2NF，必先达到1NF<br>要达到3NF，必先达到2NF……<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-05-21-36-30.png"><br>范式级别越高，规范程度越高，更有可能解决 <code>数据冗余、更新异常、插入异常、删除异常</code>的问题。</p><ul><li>第一范式1NF<br>关系模式R中，属性值都是不可分的原子值</li><li>第二范式2NF<br>在满足1NF的条件下，每个非主属性完全依赖主键（不存在部分依赖）</li><li>第三范式3NF<br>在满足2NF的条件下，没有非主属性传递依赖</li><li>BC范式BCNF<br>在满足3NF的条件下，每个传递依赖都是由候选键发起的<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-14-00-03-58.png"></li></ul><p>ps：所谓主属性，属性属于候选键的一部分。判断主属性和非主属性，核心在于哪些是候选关键字，在任何一个候选关键字里出现过的属性都是主属性。</p><h3 id="规范化理论-模式分解"><a href="#规范化理论-模式分解" class="headerlink" title="规范化理论_模式分解"></a>规范化理论_模式分解</h3><p>范式级别不够高时，通过模式分解（把模式进行拆分），范式级别就提升上去了</p><h4 id="保持函数依赖分解"><a href="#保持函数依赖分解" class="headerlink" title="保持函数依赖分解"></a>保持函数依赖分解</h4><p>分解之前有哪些函数依赖，分解之后这些函数依赖依然存在<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-04-22-49-26.png"></p><h4 id="无损连接分解"><a href="#无损连接分解" class="headerlink" title="无损连接分解"></a>无损连接分解</h4><p>将一个关系模式分解成若干个关系模式后，通过连接和投影等运算仍然能还原为原来的关系模式</p><h4 id="无损连接分解的判定方法"><a href="#无损连接分解的判定方法" class="headerlink" title="无损连接分解的判定方法"></a>无损连接分解的判定方法</h4><p>主要有：公式法、表格法</p><ul><li>公式法（仅限一分为二的情况）<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-04-23-43-43.png"></li><li>表格法<br>表头是在原来 R 关系中所有的属性列，若分解后的关系R1，R2，R3……中包含这个属性，则先在表中作 a 标记<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-04-23-14-39.png"><br>以 学号→姓名 这个函数依赖为例进行连接<br>先找到<code>学号是a</code>和<code>姓名是a</code>的关系模式<br>也就是R学生<br>再找到<code>学号是a</code>，但<code>姓名不是a</code>的关系模式<br>也就是R成绩<br>把<code>R成绩</code>修改为<code>姓名是a</code>，如果除了R成绩还有R4，则R4也要修改为姓名是a<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-04-23-23-09.png"><br>其他函数依赖也如此进行表格操作连接，最终如果表中存在一个全a的关系模式，则本次R分解是无损连接分解，可以通过连接还原到最初的R关系模式<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-04-23-35-45.png"></li></ul><h3 id="数据库并发控制"><a href="#数据库并发控制" class="headerlink" title="数据库并发控制"></a>数据库并发控制</h3><h4 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h4><p>事务具有原子性、一致性、隔离性和持久性。这四个特性也称事务的ACID性质。</p><ul><li><code>原子性</code><br>规定事务不可拆分来做，要么全做，要么全不做</li><li><code>一致性</code><br>事务前后的得失守恒</li><li><code>隔离性</code><br>每个事务相互隔离</li><li><code>持久性</code><br>每个事务的结果影响是持续的</li></ul><h4 id="并发操作需要注意"><a href="#并发操作需要注意" class="headerlink" title="并发操作需要注意"></a>并发操作需要注意</h4><p>并发操作引起数据不一致的问题有三类：丢失更新、不可重复读、读脏数据。</p><ul><li>丢失更新<br>并发的函数进程，如t1和t2两个函数，t1运行一点，t2运行一点，交替运行，将同一个共享资源作为入参时，t1将共享资源的值更新了，而t2在共享资源未更新时就读进去了，t2丢失了更新<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-25-00-00-30.png"></li><li>不可重复读<br>并发函数，t1和t2，t1读了两次共享资源，但t2在t1读第二次共享资源前，更新了共享资源，使得t1最后一次读到的是更新后的共享数据A，读不到原始共享数据，这就是不可重复读。<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-25-00-02-06.png"></li><li>读脏数据<br>并发函数，t1和t2，t1修改了共享资源的值，紧接着t2就取了修改后的共享资源，最后t1执行了rollback恢复了共享资源，t2读取到的就是脏数据<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-25-00-02-26.png"></li></ul><h4 id="加锁-解决并发问题"><a href="#加锁-解决并发问题" class="headerlink" title="加锁_解决并发问题"></a>加锁_解决并发问题</h4><p>解决并发问题的主要技术是封锁。基本的封锁类型有X锁和S锁<br><code>S锁/共享锁/读锁</code>：若事务T对数据对象A加了S锁，则其他事务只能对A加S锁，不能对A加X锁<br><code>X锁/排它锁/写锁</code>：若事务T对数据对象A加了X锁，则其他事务不能对A加任意锁</p><ul><li>一级封锁协议<code>可防止丢失更新</code><br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-27-00-03-23.png"></li><li>二级封锁协议<code>可防止丢失更新、读脏数据</code><br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-27-00-05-36.png"></li><li>三级封锁协议<code>可防止丢失更新、读脏数据、不可重复读</code><br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-27-00-07-27.png"></li><li>封锁协议与一致性<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-27-00-09-23.png"></li><li>两段封锁协议<br>所有事务必须分两个阶段来进行加锁和释放锁，一阶段获得锁，二阶段释放锁</li><li>死锁<br>封锁协议会带来死锁的问题，所谓死锁，是指两个以上的事务分别请求封锁对方已经封锁的数据，导致了长期等待而无法继续运行下去的现象。<br>应该在死锁产生前预防，或者死锁产生后设法解除死锁。</li></ul><h3 id="数据库完整性约束"><a href="#数据库完整性约束" class="headerlink" title="数据库完整性约束"></a>数据库完整性约束</h3><ul><li>实体完整性约束<br>主键约束</li><li>参照完整性约束<br>外键约束</li><li>用户自定义完整性约束<br>某个字段的值范围必须在自定义约束内才能存储入库</li><li>触发器<br>通过写脚本来约束，更加复杂的要求往往是用触发器来完成的。</li></ul><h3 id="数据库安全"><a href="#数据库安全" class="headerlink" title="数据库安全"></a>数据库安全</h3><p><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-27-16-28-09.png"></p><ul><li>用户标识和鉴定<br>认证身份，输入口令，账号密码</li><li>存取控制<br>对用户授权管理，不同用户有不同操作权限</li><li>密码存储和传输<br>将信息加密后再传输</li><li>视图的保护<br>对视图进行授权管理</li><li>审计<br>记录数据库的操作日志，从日志中发现不安全的问题。</li></ul><h3 id="数据库的备份与恢复"><a href="#数据库的备份与恢复" class="headerlink" title="数据库的备份与恢复"></a>数据库的备份与恢复</h3><h4 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h4><p><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-27-16-44-19.png"><br>除了上面按数据库是否运行区分的备份方式外，还有以下备份方式<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-27-16-46-23.png"><br>多个增量备份在恢复时需要从头开始逐步增量恢复<br>例如周三的数据需要进行恢复，则需要从周日开始恢复直到周三<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-27-19-34-13.png"></p><h4 id="数据库故障与恢复"><a href="#数据库故障与恢复" class="headerlink" title="数据库故障与恢复"></a>数据库故障与恢复</h4><p><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-27-17-05-56.png"></p><h3 id="数据仓库与数据挖掘"><a href="#数据仓库与数据挖掘" class="headerlink" title="数据仓库与数据挖掘"></a>数据仓库与数据挖掘</h3><p>app随着数据量增大，影响数据库性能，需要在数据库中去掉部分不常用数据，去掉这些数据不是直接删除掉，而是换个地方归档存储，也就是数据仓库。<br>数据库：需要保证增删改查的性能、效率<br>数据仓库：只需要保证查询效率，用于超大数据的查询统计</p><h4 id="数据仓库的特点"><a href="#数据仓库的特点" class="headerlink" title="数据仓库的特点"></a>数据仓库的特点</h4><ul><li>面向主题</li><li>集成的<br>跨系统、跨平台收集数据。<br>把不同来源、格式、特点性质的数据在逻辑上或物理上有机地集中，从而为企业提供全面的数据共享。<br>在企业中，由于开发时间或开发部门的不同，往往有多个异构的、运行在不同的软硬件平台上的信息系统同时运行，这些系统的数据源彼此独立、相互封闭，使得数据难以在系统之间交流。</li><li>相对稳定性（非易失的）<br>存储的数据不再进行修改、删除操作</li><li>反应历史变化<br>在未来会有新数据添加进来</li></ul><h4 id="数据仓库的建立"><a href="#数据仓库的建立" class="headerlink" title="数据仓库的建立"></a>数据仓库的建立</h4><p><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-03-11-15-58.png"><br>下面把这张图从左到右展开来说<br>抽取数据源（数据库）中的数据，数据格式统一，去掉冗余数据，装入数据仓库，然后在未来重复以上步骤以更新数据仓库中的数据</p><p>虽然数据仓库是面向主题的，但是还是需要模块化成为数据集逐步结合为数据集市</p><p>OLAP服务器<br>OLAP是数据仓库系统的主要应用，支持复杂的分析操作，侧重决策支持，并且提供直观易懂的查询结果。</p><p>数据挖掘工具<br>可以挖掘到人类未知的信息，其实我理解为是通过计算机把数据仓库的海量数据进行排列组合，最终由人类来筛选可用的优质数据。<br>什么季节，什么地段，什么商品销量好<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-03-11-41-18.png"><br>老用户的喜好，成功的营销方案……</p><h4 id="数据挖掘的方法和分类"><a href="#数据挖掘的方法和分类" class="headerlink" title="数据挖掘的方法和分类"></a>数据挖掘的方法和分类</h4><p>数据挖掘方法有：决策树、神经网络、遗传算法、关联规则挖掘算法</p><p>数据挖掘方法的分类有：</p><ul><li>关联分析<br>挖掘出隐藏在数据间的相互关系</li><li>序列模式分析<br>分析数据间的前后关系（因果关系）</li><li>分类分析<br>为每一个记录赋予标记，再按标记分类</li><li>聚类分析<br>分类分析的逆过程</li></ul><h3 id="反规范化技术"><a href="#反规范化技术" class="headerlink" title="反规范化技术"></a>反规范化技术</h3><p>虽然<a href="###%E8%A7%84%E8%8C%83%E5%8C%96%E7%90%86%E8%AE%BA_%E4%BB%B7%E5%80%BC%E4%B8%8E%E7%94%A8%E9%80%94">规范化有一定好处</a>但随着规范化程度的提高，这会使得表不断被拆分，增加查询工作量。系统需要进行多次连接才能查询，这样大大降低了系统效率。<br>反规范化技术就是用来提升查询效率的</p><ul><li>增加派生性冗余列</li><li>增加冗余列</li><li>重新分表</li><li>分割表</li></ul><h3 id="大数据基本概念"><a href="#大数据基本概念" class="headerlink" title="大数据基本概念"></a>大数据基本概念</h3><p>大数据，数据量大，传统数据的分析方法和硬件平台已经不适应于大数据……<br>进一步的上升为集群平台和深度分析<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-18-20-47-12.png"></p><h2 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p><code>数组的考点是存储地址的计算</code><br>建议学习时我们可以先暂时遗忘掉编程语言如Java中的数组……<br>当成套公式的数学题来学习即可</p><h4 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h4><p><code>a[n]</code><br>元素a[i]的存储地址的计算为<br><code>a+i*len</code><br>len指的是数组中单个元素所占的字节数</p><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><p><code>a[m][n]</code></p><ul><li>按行存储<br>先填满一行<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-18-21-25-25.png"><br>在按行存储的二维数组中，a[i] [j]的存储地址计算为<br><code>a+(i*n+j)*len</code></li><li>按列存储<br>先填满一列<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-18-21-25-57.png"><br>在按列存储的二维数组中，a[i] [j]的存储地址计算为<br><code>a+(j*m+i)*len</code></li></ul><h4 id="二维数组存储地址-例题"><a href="#二维数组存储地址-例题" class="headerlink" title="二维数组存储地址_例题"></a>二维数组存储地址_例题</h4><p><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-18-21-39-36.png"></p><ul><li>答案<br>a+13*2<br>这是数组的第十四个元素</li><li>解析过程</li><li><ul><li>是多少维数组，如果是二维数组按什么存储？<br>二维数组，按行存储 -&gt; <code>a+(i*n+j)*len</code><br>即a+(2*5+3)*2</li></ul></li></ul><h3 id="稀疏矩阵"><a href="#稀疏矩阵" class="headerlink" title="稀疏矩阵"></a>稀疏矩阵</h3><p>稀疏矩阵的排列方式可以理解为特殊的二维数组，重点记忆上三角和下三角矩阵的下标计算的公式即可<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-22-21-28-32.png"><br>除了公式计算，也可以使用代入法来求解，请看下面例题</p><h4 id="稀疏矩阵-例题"><a href="#稀疏矩阵-例题" class="headerlink" title="稀疏矩阵_例题"></a>稀疏矩阵_例题</h4><p><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-22-21-36-57.png"><br>把矩阵中的元素依次代入公式，求得使用数组存储时的下标，判断下标是否符合实际下标，显然只有A答案M[3]是正确的</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>数据结构是计算机存储和组织数据的方式，不同的数据结构使得程序运行效率存在差异</p><h4 id="逻辑上的数据结构"><a href="#逻辑上的数据结构" class="headerlink" title="逻辑上的数据结构"></a>逻辑上的数据结构</h4><ul><li>线性结构</li><li>非线性结构</li><li><ul><li>树形结构</li></ul></li><li><ul><li>图形结构</li></ul></li></ul><p>虽然逻辑上数据结构分门别类，但是从广义上讲，图包含树，树包含线<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-22-21-52-48.png"></p><h3 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h3><p>线性表是线性结构的基本表现<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-22-22-16-16.png"></p><h4 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h4><p>开辟了连续的空间，顺次把元素表存进来，类似一维数组</p><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><p>链表把物理上不连续的结构通过指针在逻辑上连续起来<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-24-15-08-29.png"><br>每一个存储单元（以下简称结点），包含了数据域和指针域</p><ul><li>单向链表<br>只能从头head指向的第一个结点开始遍历</li><li>循环链表<br>可以从任意位置开始遍历，不断next周期循环遍历每个指针</li><li>双向链表<br>可以向前或向后遍历元素</li></ul><h4 id="单向链表插入和删除结点"><a href="#单向链表插入和删除结点" class="headerlink" title="单向链表插入和删除结点"></a>单向链表插入和删除结点</h4><ul><li>单向链表插入结点<br>结点空间只有在需要的时候才申请，现在我们要插入结点那么是时候申请结点空间了。<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-24-21-28-30.png"></li><li>单向链表删除结点<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-24-21-32-03.png"></li></ul><h4 id="顺序存储与链式存储对比"><a href="#顺序存储与链式存储对比" class="headerlink" title="顺序存储与链式存储对比"></a>顺序存储与链式存储对比</h4><ul><li>存储密度（空间利用率）<br>顺序存储开辟连续的空间来存储所有数据信息，没有空间上的浪费，存储密度是1，空间利用率100%<br>链式存储的结点内除了包含数据还有指针，指针造成了空间的浪费，存储密度小于1，空间利用率小于100%</li><li>容量分配<br>顺序存储需要初始化时就定义好容量，后面不能再改变<br>链式存储可以动态扩容，例如插入时申请结点空间</li><li>查找运算<br>如果涉及到二分查找时使用顺序存储更优</li><li>读运算<br>读取某个元素或结点<br>顺序存储根据顺序的索引下标即可读取到指定元素<br>链式存储需要从head结点不断地next……next……</li><li>插入运算<br>顺序存储在插入元素时，要把后面的元素都往后移</li><li>删除运算<br>顺序存储在删除元素时，要把后面的元素都往前移<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-25-23-58-42.png"></li></ul><h4 id="队列-amp-栈"><a href="#队列-amp-栈" class="headerlink" title="队列 &amp; 栈"></a>队列 &amp; 栈</h4><h2 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h2><h3 id="上午选择题"><a href="#上午选择题" class="headerlink" title="上午选择题"></a>上午选择题</h3><p>每一章【看视频 + 做题】，大约花费 2~3 天。因此建议 45 天内完成。</p><h3 id="下午大题"><a href="#下午大题" class="headerlink" title="下午大题"></a>下午大题</h3><p>下午的应用技术题型是固定的，共 6 道题，最后两道二选一：</p><p>1.结构化分析与设计，考查数据流图 DFD<br>2.数据库的分析和设计，考查 ER 图与关系模式<br>3.面向对象分析与设计，考查常用 UML 图<br>4.常用数据结构和算法（C 语言）<br>5.设计模式（C++ 和 Java 二选一）</p><p>在这一步，我们可以一次复习一种题型对应的视频，然后，一次大量练习攻克【一种题型】。例如看了数据流图相关的视频后，我们可以把多年的数据流图真题都打印出来，一次性吃透数据流图题。每种题型花费 2~3 天，因此建议 15 天内完成。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>flutter入门</title>
      <link href="/2022/09/17/flutter%E5%85%A5%E9%97%A8/"/>
      <url>/2022/09/17/flutter%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="运行第一个flutter程序"><a href="#运行第一个flutter程序" class="headerlink" title="运行第一个flutter程序"></a>运行第一个flutter程序</h2><h3 id="命令行运行"><a href="#命令行运行" class="headerlink" title="命令行运行"></a>命令行运行</h3><p><code>flutter devices</code>检测可用的设备<br><img src="/img/flutter%E5%85%A5%E9%97%A8/2022-09-17-22-20-17.png" alt="查看可用devices"><br><code>flutter run -d all</code>在所有可用设备上运行</p><p><code>flutter run -d deviceName</code>在指定可用设备上运行<br>在可用设备里，取第二列作为deviceName，比如运行web的就是<br>flutter run -d chrome<br>flutter run -d edge<br><code>如果使用了绿色版chrome，则需要为chrome设置环境变量</code><br>CHROME_EXECUTABLE<br>E:\Program Files\Chrome_X64_79.0.3945.88\App\chrome.exe<br><img src="/img/flutter%E5%85%A5%E9%97%A8/2022-09-17-22-24-51.png" alt="chrome非默认目录时需要配环境变量"></p><p>运行windows程序需要c++环境；<br>运行Android程序需要USB连接手机，并在手机上开启USB调试，允许通过USB安装应用，或者直接通过安卓模拟器运行。</p><p>linux、macOS、IOS的程序运行暂时先偷懒了。</p><h3 id="AndroidStudio内运行"><a href="#AndroidStudio内运行" class="headerlink" title="AndroidStudio内运行"></a>AndroidStudio内运行</h3><p>Android通过单独打开flutter项目的Android模块，然后点击run运行</p><h2 id="命令行运行后常用命令"><a href="#命令行运行后常用命令" class="headerlink" title="命令行运行后常用命令"></a>命令行运行后常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">r Hot reload.</span><br><span class="line">R Hot restart.</span><br><span class="line">h List all available interactive commands.</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">h 列出所有可用的交互式命令。</span></span><br><span class="line">d Detach (terminate &quot;flutter run&quot; but leave application running).</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">d 分离（终止“flutter运行”，但保持应用进程运行）。</span></span><br><span class="line">c Clear the screen</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">p 显示网格，在调布局时很有用</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">o 切换Android和iOS的预览模式</span></span><br><span class="line">q Quit (terminate the application on the device).</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">q 退出（终止设备上的应用进程）。</span></span><br></pre></td></tr></table></figure><h2 id="flutter项目结构介绍"><a href="#flutter项目结构介绍" class="headerlink" title="flutter项目结构介绍"></a>flutter项目结构介绍</h2><p>flutter能编写跨平台的应用<br>android、ios、linux、macos、web、windos 存放着不同平台的相关代码<br>lib 我们写flutter代码就在这个文件夹<br>analysis_options.yaml 对dart的语法检查，老项目升级到新项目可能会因此报错可以删了这个文件<br>pubspec.yaml 配置文件和第三方依赖<br><img src="/img/flutter%E5%85%A5%E9%97%A8/2022-09-18-09-36-02.png" alt="flutter项目结构"></p><h2 id="编写第一个flutter程序"><a href="#编写第一个flutter程序" class="headerlink" title="编写第一个flutter程序"></a>编写第一个flutter程序</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一次坐高铁</title>
      <link href="/2022/09/11/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%9D%90%E9%AB%98%E9%93%81/"/>
      <url>/2022/09/11/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%9D%90%E9%AB%98%E9%93%81/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>复习一下，第一次主动坐高铁。一般直达的流程如图所示，换乘的除外。<br><img src="/img/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%9D%90%E9%AB%98%E9%93%81/2022-09-11-02-32-09.png" alt="高铁直达流程图"></p><h2 id="买票"><a href="#买票" class="headerlink" title="买票"></a>买票</h2><p>买票，也就是选座位，座位的价格、设计、服务、相对位置会对心情带来综合的影响……<br><code>我经济有限，考虑价格二等座和相对位置就好了</code></p><h3 id="价格"><a href="#价格" class="headerlink" title="价格"></a>价格</h3><p>价格从高到低依次是：商务座、一等座、二等座、无座<br>有的时候不同等级因距离太近，价格也随之升高，什么逻辑，坐的近就能阶级跨越麻雀攀高枝变凤凰了……？</p><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><ul><li>商务座 略……</li><li>一等座一排四座</li><li>二等座一排五座，设计为 F&#x2F;D&#x2F;C&#x2F;B&#x2F;A<br><img src="/img/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%9D%90%E9%AB%98%E9%93%81/2022-09-11-02-44-03.png" alt="二等座设计"></li><li>无座<br>二等座售完后开始出售无座车票<br>无座车票的价格是和二等座一样的，无座的看情况可以去二等座休息。</li></ul><h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><p>商务座解锁权限：零食、饮料等，感觉进入了酒店。</p><h3 id="相对位置"><a href="#相对位置" class="headerlink" title="相对位置"></a>相对位置</h3><p>靠窗、过道，和朋友邻座等。</p><h3 id="动车组列车免费携带品"><a href="#动车组列车免费携带品" class="headerlink" title="动车组列车免费携带品"></a>动车组列车免费携带品</h3><ul><li>儿童十千克</li><li>外交人员三十五千克</li><li><strong>其他旅客二十千克</strong></li><li><strong>杆状物不超过200厘米</strong></li><li><strong>任意物品长宽高之和不超过160厘米</strong></li><li>残疾人折叠轮椅，不超过130厘米，不超过20千克</li></ul><h3 id="违禁品"><a href="#违禁品" class="headerlink" title="违禁品"></a>违禁品</h3><p>易燃易爆炸有毒危险品，酒精，高度白酒，剪刀。<br>那些包装未拆封的酒居然可以带，与我无关……</p><h2 id="取票"><a href="#取票" class="headerlink" title="取票"></a>取票</h2><p>刷身份证即可，纸质票作为报销使用。</p><h2 id="进站"><a href="#进站" class="headerlink" title="进站"></a>进站</h2><p>刷脸、刷身份证，人和行李大包小包请过安检<br>顺着大屏幕、指示牌信息，询问客服，去找到检票口</p><h2 id="检票"><a href="#检票" class="headerlink" title="检票"></a>检票</h2><p>等报到所购车次的号码才到检票口进站<br>排队检票按照提示进入高铁站台<br>留意广播列车的车次、颜色、车厢号，也可以留意一下地下的指示线，可以定位到车厢。</p><p><code>找到列车后，走错了车厢也没关系，一定要上车，以免错过车次。</code></p><h2 id="上车"><a href="#上车" class="headerlink" title="上车"></a>上车</h2><p>对号入座……<br>厕所在车厢交界处<br>留意广播，快要到站时，移步到车厢交界处的下车门等候。</p><h2 id="换乘"><a href="#换乘" class="headerlink" title="换乘"></a>换乘</h2><p>如果是直达的就不用换乘，当然人生的道路总是曲折的。</p><h3 id="同站换乘"><a href="#同站换乘" class="headerlink" title="同站换乘"></a>同站换乘</h3><p>先下车再在站内找到对应换乘的车号上车。</p><h3 id="异站换乘"><a href="#异站换乘" class="headerlink" title="异站换乘"></a>异站换乘</h3><p>先下车，步行至换乘站后找到换乘的车号上车。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>非技术面试</title>
      <link href="/2022/08/31/%E9%9D%9E%E6%8A%80%E6%9C%AF%E9%9D%A2%E8%AF%95/"/>
      <url>/2022/08/31/%E9%9D%9E%E6%8A%80%E6%9C%AF%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="非技术面试"><a href="#非技术面试" class="headerlink" title="非技术面试"></a>非技术面试</h1><p>总体过程应该先抑后扬，扬长避短，自我介绍不要太骄傲，小心被问倒。<br>相信自己。</p><h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><p>我叫Henry，毕业于广西XX大学XX学院，专业是计算机科学与技术，目前有一年的实习工作经验。</p><p>我叫XX，毕业于广西民族大学相思湖学院，专业是计算机科学与技术，目前有一年的实习工作经验。实习期间主要负责xxxApp的开发和维护，能够利用空余时间学习公司项目涉及技术，积极分担老员工离职后遗留的工作任务，按时完成组长分配的任务。</p><h2 id="对方有我什么信息，用常见标签评价我"><a href="#对方有我什么信息，用常见标签评价我" class="headerlink" title="对方有我什么信息，用常见标签评价我"></a>对方有我什么信息，用常见标签评价我</h2><p>英语：无四级证书，听说读写<br>粤语：会听不会说<br>国语：听说读写<br>家乡：广西XXX<br>房价：XXX</p><p>学校：广西XX大学XX学院<br>专业：计算机科学与技术<br>获奖证书：XX奖XX证书<br>兴趣爱好：编程、慢跑、乒乓球<br>之前公司：XX公司<br>之前职位：Java开发工程师</p><p>之前项目职责：<br>XX系统的开发和维护，<br>需求1……解决方案<br>需求2……解决方案<br>bug……解决方案……</p><h2 id="不失礼貌与身份的反答"><a href="#不失礼貌与身份的反答" class="headerlink" title="不失礼貌与身份的反答"></a>不失礼貌与身份的反答</h2><h2 id="我想问什么"><a href="#我想问什么" class="headerlink" title="我想问什么"></a>我想问什么</h2><p>公司岗位部门情况</p><p>项目组情况</p><p>晋升机会</p><p>加班情况</p><p>公司需要自带电脑吗？</p><p>上下班需要打卡吗</p><p>饮食住宿</p><h2 id="忘词了？"><a href="#忘词了？" class="headerlink" title="忘词了？"></a>忘词了？</h2><p>证明自己，能够胜任这个岗位。<br>我能够做Java开发工程师，我能行！！！</p><h2 id="常用非技术面试题"><a href="#常用非技术面试题" class="headerlink" title="常用非技术面试题"></a>常用非技术面试题</h2><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>no-ip</title>
      <link href="/2022/08/30/no-ip/"/>
      <url>/2022/08/30/no-ip/</url>
      
        <content type="html"><![CDATA[<h1 id="no-ip"><a href="#no-ip" class="headerlink" title="no-ip"></a>no-ip</h1><h2 id="免费的DDNS"><a href="#免费的DDNS" class="headerlink" title="免费的DDNS"></a>免费的DDNS</h2><p>设置域名，绑定ip，通过官方接口更新动态ip，实现动态域名解析DDNS<br>我选了个比较短的ddns.net，往后不出意外的话主机名就一直用<code>ayao.ddns.net</code>了。</p><h2 id="ipv6更新接口"><a href="#ipv6更新接口" class="headerlink" title="ipv6更新接口"></a>ipv6更新接口</h2><p>官方的文档有小错误，还是按这个模板来吧<br>主要是<code>Authorization</code>，需要填的是<code>Basic (username:password)toBase64</code>，即填入<code>Basic 空格 (用户名:密码)的base64编码</code></p><h4 id="接口URL"><a href="#接口URL" class="headerlink" title="接口URL"></a>接口URL</h4><blockquote><p><a href="https://dynupdate.no-ip.com/nic/update?hostname=ayao.ddns.net&myipv6=2100:8a5c:1425:eff0:d2a4:6fff:fe68:de0f">https://dynupdate.no-ip.com/nic/update?hostname=ayao.ddns.net&amp;myipv6=2100:8a5c:1425:eff0:d2a4:6fff:fe68:de0f</a></p></blockquote><h4 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h4><blockquote><p>GET</p></blockquote><h4 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a>Content-Type</h4><blockquote><p>multipart&#x2F;form-data</p></blockquote><h4 id="请求Header参数"><a href="#请求Header参数" class="headerlink" title="请求Header参数"></a>请求Header参数</h4><table><thead><tr><th>参数名</th><th>示例值</th><th>参数类型</th><th>是否必填</th><th>参数描述</th></tr></thead><tbody><tr><td>Host</td><td>dynupdate.no-ip.com</td><td>Text</td><td>是</td><td>-</td></tr><tr><td>Authorization</td><td>Basic base64</td><td>Text</td><td>是</td><td>Basic (username:password)toBase64</td></tr><tr><td>User-Agent</td><td>Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;104.0.5112.102 Safari&#x2F;537.36 Edg&#x2F;104.0.1293.70</td><td>Text</td><td>是</td><td>-</td></tr></tbody></table><h4 id="请求Query参数"><a href="#请求Query参数" class="headerlink" title="请求Query参数"></a>请求Query参数</h4><table><thead><tr><th>参数名</th><th>示例值</th><th>参数类型</th><th>是否必填</th><th>参数描述</th></tr></thead><tbody><tr><td>hostname</td><td>ayao.ddns.net</td><td>Text</td><td>是</td><td>-</td></tr><tr><td>myipv6</td><td>2100:8a5c:1425:eff0:d2a4:6fff:fe68:de0f</td><td>Text</td><td>是</td><td>-</td></tr></tbody></table><h4 id="成功响应示例"><a href="#成功响应示例" class="headerlink" title="成功响应示例"></a>成功响应示例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nochg <span class="number">117.183</span><span class="number">.79</span><span class="number">.88</span>,<span class="number">2100</span>:8<span class="attr">a5c</span>:<span class="number">1425</span>:<span class="attr">eff0</span>:<span class="attr">d2a4</span>:6<span class="attr">fff</span>:<span class="attr">fe68</span>:de0f</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="为域名申请SSL"><a href="#为域名申请SSL" class="headerlink" title="为域名申请SSL"></a>为域名申请SSL</h2><h3 id="使用Keytool工具生成CSR文件"><a href="#使用Keytool工具生成CSR文件" class="headerlink" title="使用Keytool工具生成CSR文件"></a>使用Keytool工具生成CSR文件</h3><p>Keytool是Java Development Kit（JDK）安装包中提供的用于管理数字证书密钥的工具。<br>注意：基于对JDK版本安全性考虑，需使用JDK 8及以上版本。</p><h4 id="创建JKS秘钥库文件"><a href="#创建JKS秘钥库文件" class="headerlink" title="创建JKS秘钥库文件"></a>创建JKS秘钥库文件</h4><p>这将会在指定目录如D:\下生成JKS文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -alias ayaokey -keyalg RSA -keysize 2048 -keystore D:\server.jks</span><br></pre></td></tr></table></figure><h4 id="创建CSR文件"><a href="#创建CSR文件" class="headerlink" title="创建CSR文件"></a>创建CSR文件</h4><p>这将会在指定目录如D:\下生成CSR文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -certreq -alias ayaokey -sigalg SHA256withRSA -file D:\ayao.ddns.net.csr -keystore D:\server.jks</span><br></pre></td></tr></table></figure><p>生成的CSR文件部分内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN NEW CERTIFICATE REQUEST-----</span><br><span class="line">MIIDGzCCAgMCAQAwgaUxCzAJBgNVBAYTAkNOMR4wHAYDVQQIDBXlub/opb/lo67m</span><br><span class="line">IWLSSKzCEMCPM6tyJzuGEOy3pgGzc162bQCqV45Bhbw3PRbM1tkyn7ZYObOGPh/d</span><br><span class="line">NO1GAJBuvHgO7duTiAFO0NnryMLygI0MZSphaM+xuA==</span><br><span class="line">-----END NEW CERTIFICATE REQUEST-----</span><br></pre></td></tr></table></figure><p>CSR需要提交，私钥则存储在JKS文件中。至此，keytool方式的CSR生成完毕。</p><h4 id="提交CSR"><a href="#提交CSR" class="headerlink" title="提交CSR"></a>提交CSR</h4><p>提交CSR内容，填写表单内容，等待验证通过，一般一小时左右</p><h4 id="下载证书"><a href="#下载证书" class="headerlink" title="下载证书"></a>下载证书</h4><p>分别提供以下几种类型的证书，下载完居然是html后缀？那我们把.html去掉，就是真正的证书文件了。<br>ayao_ddns_net.<code>pem-chain</code><br>ayao_ddns_net.<code>pem</code><br>ayao_ddns_net.<code>der</code><br>ayao_ddns_net.<code>pkcs7</code></p><h4 id="为服务器配置SSL"><a href="#为服务器配置SSL" class="headerlink" title="为服务器配置SSL"></a>为服务器配置SSL</h4><p>以nginx.conf为例，因为80、和443我这边没有root权限不能使用，而且据说no-ip对80端口加了广告，所以我使用1024和1443作为我博客的web服务端口，配置文件部分内容如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen       1024;</span><br><span class="line">       listen       [::]:1024;</span><br><span class="line">       listen       1443 ssl;</span><br><span class="line">       listen       [::]:1443 ssl;</span><br><span class="line">       #server_name  ayao.ddns.net;</span><br><span class="line">       ssl_certificate      /data/data/com.termux/files/usr/etc/nginx/cert/ayao_ddns_net.pem-chain;</span><br><span class="line">       ssl_certificate_key  /data/data/com.termux/files/usr/etc/nginx/cert/server.key;</span><br><span class="line">       ssl_session_cache    shared:SSL:1m;</span><br><span class="line">       ssl_session_timeout  5m;</span><br><span class="line">       ssl_ciphers  &quot;EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5&quot;;</span><br><span class="line">       ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">       # 如果协议为http，自动重定向到https</span><br><span class="line">       if ( $scheme = &#x27;http&#x27;)&#123;</span><br><span class="line">               rewrite ^/(.*) https://ayao.ddns.net:1443/$1 permanent;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>myApi</title>
      <link href="/2022/08/30/myApi/"/>
      <url>/2022/08/30/myApi/</url>
      
        <content type="html"><![CDATA[<h2 id="x2F-ayao"><a href="#x2F-ayao" class="headerlink" title="&#x2F;ayao"></a>&#x2F;ayao</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">暂无描述</span><br></pre></td></tr></table></figure><h4 id="公共Header参数"><a href="#公共Header参数" class="headerlink" title="公共Header参数"></a>公共Header参数</h4><table><thead><tr><th>参数名</th><th>示例值</th><th>参数描述</th></tr></thead><tbody><tr><td>暂无参数</td><td></td><td></td></tr></tbody></table><h4 id="公共Query参数"><a href="#公共Query参数" class="headerlink" title="公共Query参数"></a>公共Query参数</h4><table><thead><tr><th>参数名</th><th>示例值</th><th>参数描述</th></tr></thead><tbody><tr><td>暂无参数</td><td></td><td></td></tr></tbody></table><h4 id="公共Body参数"><a href="#公共Body参数" class="headerlink" title="公共Body参数"></a>公共Body参数</h4><table><thead><tr><th>参数名</th><th>示例值</th><th>参数描述</th></tr></thead><tbody><tr><td>暂无参数</td><td></td><td></td></tr></tbody></table><h4 id="预执行脚本"><a href="#预执行脚本" class="headerlink" title="预执行脚本"></a>预执行脚本</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">暂无预执行脚本</span><br></pre></td></tr></table></figure><h4 id="后执行脚本"><a href="#后执行脚本" class="headerlink" title="后执行脚本"></a>后执行脚本</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">暂无后执行脚本</span><br></pre></td></tr></table></figure><h2 id="x2F-ayao-x2F-邮件发送接口"><a href="#x2F-ayao-x2F-邮件发送接口" class="headerlink" title="&#x2F;ayao&#x2F;邮件发送接口"></a>&#x2F;ayao&#x2F;邮件发送接口</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">暂无描述</span><br></pre></td></tr></table></figure><h4 id="接口状态"><a href="#接口状态" class="headerlink" title="接口状态"></a>接口状态</h4><blockquote><p>已完成</p></blockquote><h4 id="接口URL"><a href="#接口URL" class="headerlink" title="接口URL"></a>接口URL</h4><blockquote><p>192.168.1.2:9527&#x2F;mail</p></blockquote><h4 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h4><blockquote><p>POST</p></blockquote><h4 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a>Content-Type</h4><blockquote><p>multipart&#x2F;form-data</p></blockquote><h4 id="请求Body参数"><a href="#请求Body参数" class="headerlink" title="请求Body参数"></a>请求Body参数</h4><table><thead><tr><th>参数名</th><th>示例值</th><th>参数类型</th><th>是否必填</th><th>参数描述</th></tr></thead><tbody><tr><td>subject</td><td>这是邮件标题</td><td>Text</td><td>是</td><td>邮件标题</td></tr><tr><td>content</td><td>这是邮件内容</td><td>Text</td><td>是</td><td>邮件内容</td></tr><tr><td>email</td><td><a href="mailto:&#x32;&#x39;&#51;&#55;&#48;&#54;&#51;&#55;&#52;&#48;&#x40;&#113;&#113;&#46;&#x63;&#x6f;&#x6d;">&#x32;&#x39;&#51;&#55;&#48;&#54;&#51;&#55;&#52;&#48;&#x40;&#113;&#113;&#46;&#x63;&#x6f;&#x6d;</a></td><td>Text</td><td>是</td><td>邮件接收者</td></tr><tr><td>petname</td><td>ayao官方</td><td>Text</td><td>是</td><td>发送方邮件昵称</td></tr></tbody></table><h4 id="预执行脚本-1"><a href="#预执行脚本-1" class="headerlink" title="预执行脚本"></a>预执行脚本</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">暂无预执行脚本</span><br></pre></td></tr></table></figure><h4 id="后执行脚本-1"><a href="#后执行脚本-1" class="headerlink" title="后执行脚本"></a>后执行脚本</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">暂无后执行脚本</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>软件设计师</title>
      <link href="/2022/08/18/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
      <url>/2022/08/18/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/</url>
      
        <content type="html"><![CDATA[<h1 id="软件设计师"><a href="#软件设计师" class="headerlink" title="软件设计师"></a>软件设计师</h1><h2 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h2><h3 id="计算机系统硬件基本组成"><a href="#计算机系统硬件基本组成" class="headerlink" title="计算机系统硬件基本组成"></a>计算机系统硬件基本组成</h3><p>计算机系统是由硬件和软件组成的。<br>计算机的基本硬件系统由运算器、控制器、存储器、输入设备和输出设备5大部件组成。<br>运算器 + 控制器 &#x3D; 中央处理单元。<br>存储器分为内部存储器和外部存储器。<br>输入设备和输出设备合称外部设备（简称外设）。</p><h3 id="中央处理单元"><a href="#中央处理单元" class="headerlink" title="中央处理单元"></a>中央处理单元</h3><p>cpu的功能、cpu的组成、多核cpu</p><h4 id="CPU的功能"><a href="#CPU的功能" class="headerlink" title="CPU的功能"></a>CPU的功能</h4><ul><li>程序控制</li><li>操作控制</li><li>时间控制</li><li>数据处理</li></ul><h3 id="数据表示"><a href="#数据表示" class="headerlink" title="数据表示"></a>数据表示</h3><p>原码、反码、补码、移码<br>定点数、浮点数</p><h4 id="进位计数制"><a href="#进位计数制" class="headerlink" title="进位计数制"></a>进位计数制</h4><p>二进制：（前缀：0b&#x2F;0B）（后缀：b&#x2F;B）<br>八进制：（前缀：0）（后缀：o&#x2F;O）<br>十进制：（前缀：无，可加+&#x2F;-）（后缀d&#x2F;D）<br>十六进制：（前缀：0x&#x2F;0X）（后缀：h&#x2F;H）<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/2022-10-16-23-56-29.png"></p><h4 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h4><h5 id="其他进制转十进制"><a href="#其他进制转十进制" class="headerlink" title="其他进制转十进制"></a>其他进制转十进制</h5><p>对应权值相乘相加<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/2022-10-16-20-07-01.png"></p><h5 id="二进制转其他进制"><a href="#二进制转其他进制" class="headerlink" title="二进制转其他进制"></a>二进制转其他进制</h5><p>二进制转八进制 <code>三位一体 421</code><br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/2022-10-16-20-13-13.png"><br>二进制转十进制，因10不满足2的几次幂，只能使用<a href="#####%E5%85%B6%E4%BB%96%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B6">其他进制转十进制</a><br>二进制转十六进制 <code>四位一体 8421</code><br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/2022-10-16-20-14-06.png"></p><h5 id="其他进制转二进制"><a href="#其他进制转二进制" class="headerlink" title="其他进制转二进制"></a>其他进制转二进制</h5><p>八进制转二进制 <code>三位一体 421</code><br>十六进制转二进制 <code>四位一体 8421</code><br>在<a href="#####%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%85%B6%E4%BB%96%E8%BF%9B%E5%88%B6">二进制转其他进制</a>的基础上逆向求解即可，还是由于10不满足2的整数几次幂的问题，十进制转二进制只能参考<a href="#####%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%85%B6%E4%BB%96%E8%BF%9B%E5%88%B6">十进制转其他进制</a>来求解。</p><h5 id="十进制转其他进制"><a href="#十进制转其他进制" class="headerlink" title="十进制转其他进制"></a>十进制转其他进制</h5><p>分两步，先求整数部分，再求小数部分<br>例如我们求十进制75.3的二进制</p><ul><li>除基取余 求整数部分<br>也叫短除法，用整数75除以2，求几进制就除以几，一直除，直到最后商为0<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/2022-10-16-22-30-51.png"><br>75<code>D</code>&#x3D;1001011<code>B</code></li><li>乘基取整 求小数部分<br>用小数部分0.3乘以2，求几进制就乘以几，一直乘<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/2022-10-16-22-42-32.png"><br>0.3<code>D</code>&#x3D;0.010…<code>B</code><br>你还可以继续乘下去得到下面的结果，看需求是要精确到小数点后多少位<br>0.3<code>D</code>&#x3D;0.01001…<code>B</code><br>所以75.3<code>D</code>&#x3D;1001011.010…<code>B</code></li></ul><h4 id="BCD码"><a href="#BCD码" class="headerlink" title="BCD码"></a>BCD码</h4><p>BCD码有8421码，余3码，2421码三种。主要讲一下8421码。</p><h5 id="8421码"><a href="#8421码" class="headerlink" title="8421码"></a>8421码</h5><p>8421码中，使用四位二进制有权码表示一位十进制，出现非法情况时，需要加6，即二进制加上<code>0110</code><br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/2022-10-16-23-24-29.png"></p><h5 id="余3码-amp-2421码"><a href="#余3码-amp-2421码" class="headerlink" title="余3码 &amp; 2421码"></a>余3码 &amp; 2421码</h5><p><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/2022-10-16-23-33-49.png"></p><h3 id="校验码"><a href="#校验码" class="headerlink" title="校验码"></a>校验码</h3><p>奇偶校验码、海明校验码、循环冗余校验码</p><h4 id="码字、码距"><a href="#码字、码距" class="headerlink" title="码字、码距"></a>码字、码距</h4><p><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/2022-09-12-00-48-49.png" alt="合法的码字"><br>以某位bit位方案组成的编码叫<code>码字</code><br>如图所示，2bit位组成了4个码字，也就是2^2（2的2次方），<br>3bit位组成了8个码字，也就是2^3（2的3次方）。</p><p>在当前bit方案内，将两个码字逐位对比，具有不同位的个数就是<code>两个码字间的距离</code><br>可以将两个码字进行异或运算，再将异或的结果求和，得到两个码字间的距离。</p><p>如果码字能对应上信息位就是<code>合法码字</code>，用来进行正确合法的信息传递<br>如果码字对应不上信息就是<code>非法码字</code>，可能是传递时发生了位错误。</p><p>各合法码字间的最小距离称为<code>码距</code>，<code>小写的字母d表示码距</code></p><table><thead><tr><th>码距 d</th><th>能力</th></tr></thead><tbody><tr><td>2</td><td>检错</td></tr><tr><td>d &gt;&#x3D; 3 且设计合理</td><td>检错 纠错</td></tr></tbody></table><h4 id="奇偶校验码"><a href="#奇偶校验码" class="headerlink" title="奇偶校验码"></a>奇偶校验码</h4><p><code>奇偶校验码 = 1位校验位 + 信息位</code></p><p><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/2022-09-12-01-33-24.png" alt="奇偶校验码"></p><p><code>奇校验码</code>，对编码的校验位设置0或1，使得校验码中1的个数是奇数<br><code>偶校验码</code>，对编码的校验位设置0或1，使得校验码中1的个数是偶数<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/2022-09-12-01-41-50.png" alt="奇偶校验码例题"><br>计算机判断收到的校验码，判断校验码中1的个数，是否符合奇&#x2F;偶校验码，符合则信息合法。<br>也就是将收到的校验码，进行逐位异或，得到校验位，从而判断校验码中1的个数<br><code>奇偶校验码的码距d=2，只能判断发生了奇数位的错误</code><br>发生了1、3、5、7……位的错误</p><h4 id="海明校验码"><a href="#海明校验码" class="headerlink" title="海明校验码"></a>海明校验码</h4><p>将n位信息位，拆分成k个组，对k个组分别进行偶校验<br>每个分组携带一个校验位，也就是会有k个校验位<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/2022-09-12-01-33-24.png" alt="海明码基于偶校验码"><br>然后信息位和校验位会满足关系式<br><code>2</code><sup><code>k</code></sup><code> &gt;= n+k+1</code></p><h4 id="循环冗余校验码"><a href="#循环冗余校验码" class="headerlink" title="循环冗余校验码"></a>循环冗余校验码</h4><h3 id="计算机体系结构的发展"><a href="#计算机体系结构的发展" class="headerlink" title="计算机体系结构的发展"></a>计算机体系结构的发展</h3><p>计算机体系结构分类、指令系统、阵列处理机、并行处理机和多处理机</p><h3 id="存储系统"><a href="#存储系统" class="headerlink" title="存储系统"></a>存储系统</h3><p>存储器结构层次、存储器分类、相联存储器、高速缓存、虚拟存储器、外存储器、磁盘阵列技术、存储域网络</p><h3 id="输入-x2F-输出技术"><a href="#输入-x2F-输出技术" class="headerlink" title="输入&#x2F;输出技术"></a>输入&#x2F;输出技术</h3><p>内存与接口的编址方法、直接程序控制、中断方式、直接存储器存取方式、输入输出处理机IOP</p><h3 id="总线结构"><a href="#总线结构" class="headerlink" title="总线结构"></a>总线结构</h3><p>总线的分类、常见总线</p><h3 id="安全性评价"><a href="#安全性评价" class="headerlink" title="安全性评价"></a>安全性评价</h3><p>计算机安全等级、安全威胁、影响数据安全的因素</p><h3 id="加密技术和认证技术"><a href="#加密技术和认证技术" class="headerlink" title="加密技术和认证技术"></a>加密技术和认证技术</h3><p>加密技术、认证技术</p><h3 id="可靠性评价"><a href="#可靠性评价" class="headerlink" title="可靠性评价"></a>可靠性评价</h3><p>计算机可靠性模型</p><h3 id="性能评价"><a href="#性能评价" class="headerlink" title="性能评价"></a>性能评价</h3><p>性能评测常用方法、基准测试程序、</p><h2 id="程序设计语言"><a href="#程序设计语言" class="headerlink" title="程序设计语言"></a>程序设计语言</h2><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h2 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h2><h2 id="结构化开发方法"><a href="#结构化开发方法" class="headerlink" title="结构化开发方法"></a>结构化开发方法</h2><h2 id="面向对象技术"><a href="#面向对象技术" class="headerlink" title="面向对象技术"></a>面向对象技术</h2><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h2 id="计算机网络与信息安全"><a href="#计算机网络与信息安全" class="headerlink" title="计算机网络与信息安全"></a>计算机网络与信息安全</h2><h2 id="知识产权和标准化"><a href="#知识产权和标准化" class="headerlink" title="知识产权和标准化"></a>知识产权和标准化</h2><h2 id="系统分析与设计"><a href="#系统分析与设计" class="headerlink" title="系统分析与设计"></a>系统分析与设计</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>会话保持</title>
      <link href="/2022/08/05/%E4%BC%9A%E8%AF%9D%E4%BF%9D%E6%8C%81/"/>
      <url>/2022/08/05/%E4%BC%9A%E8%AF%9D%E4%BF%9D%E6%8C%81/</url>
      
        <content type="html"><![CDATA[<h1 id="会话保持"><a href="#会话保持" class="headerlink" title="会话保持"></a>会话保持</h1><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>cookie是由首次请求通过服务器返回，浏览器存储，之后每次请求时携带给服务器的键值对；<br>cookie可以设置失效时间；<br>使用cookie时，服务端接收到的值可能会是乱码，需要在前端对cookie的键值对的值先编码</p><h2 id="Web存储"><a href="#Web存储" class="headerlink" title="Web存储"></a>Web存储</h2><p>在cookie之后出现的Web存储技术；<br>Web存储（Web Storage）的API 包括localStorage、sessionStorage；<br>尽管cookie也是存储在浏览器上的，这就是为什么通常没有把cookie归属到Web存储（Web Storage）内的原因</p><h2 id="session会话"><a href="#session会话" class="headerlink" title="session会话"></a>session会话</h2><p>session默认存储在后端服务内存中，但可以持久化，通常还会存储会话结束时间、会话id</p><h2 id="cookie-amp-session-的结合"><a href="#cookie-amp-session-的结合" class="headerlink" title="cookie &amp; session 的结合"></a>cookie &amp; session 的结合</h2><p>比如用户登录成功后，持久化sessionId和会话结束时间，<br>首次把sessionId 添加入cookie 返回给浏览器，会话结束时间设置为cookie 的失效时间。<br>达到cookie失效时间，cookie超时，会话结束。</p><h2 id="token"><a href="#token" class="headerlink" title="token"></a>token</h2><p>内存中的session会话可能会丢失，而且随着用户量增大，单体服务需要集群部署，需要在集群中session共享，集群会话共享时集群主机资源可能会顶不住；所以我们持久化了session，但是数据库也是靠不住的，所以我们选择使用后端生成时效性的token签名令牌，存储于前端cookie或storage中，请求时携带token进行验证。</p><h2 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h2><p>jwt 全称是 json web token<br>jwt 的组成 header . payload . signature<br>jwt 的组成 ① .  ② . ③<br>①：签名所用算法和token类型，经过base64编码<br>② ：数据和时效性，经过base64编码<br>③：将①、②结合服务器设置的密码使用①的算法进行运算得到签名信息</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>爬虫入门</title>
      <link href="/2022/08/04/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/"/>
      <url>/2022/08/04/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="爬虫入门"><a href="#爬虫入门" class="headerlink" title="爬虫入门"></a>爬虫入门</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>隐私数据，例如：人名、联系方式、详细地址，这些涉及隐私信息的，是完全不可以爬取的。<br>一个自觉且善意的爬虫，应该在抓取网页之前，先阅读<code>robots.txt</code>，了解并执行网站管理者制定的爬虫规则。<br><strong>如何查看robot.txt？</strong><br>在浏览器的网址搜索栏中，输入网站的根域名，然后再输入&#x2F;robot.txt。<br>比如，必应的robots.txt网址为<code>https://cn.bing.com/robots.txt</code><br><strong>如何解读robots.txt？</strong><br><a href="https://zhuanlan.zhihu.com/p/65463520">https://zhuanlan.zhihu.com/p/65463520</a></p><h2 id="爬虫学习平台分享"><a href="#爬虫学习平台分享" class="headerlink" title="爬虫学习平台分享"></a>爬虫学习平台分享</h2><p>分享几个国内可访问，专门练习爬虫的网站<br><a href="http://www.glidedsky.com/">http://www.glidedsky.com/</a><br><a href="https://cuiqingcai.com/9522.html">https://cuiqingcai.com/9522.html</a><br><a href="https://scrape.center/">https://scrape.center/</a></p><p><a href="https://news.163.com/">https://news.163.com/</a><br><a href="https://news.sohu.com/">https://news.sohu.com/</a></p><h2 id="实战语言选择"><a href="#实战语言选择" class="headerlink" title="实战语言选择"></a>实战语言选择</h2><p>理论上能够http请求响应的都能做为爬虫语言<br>我用的是基于java的httpclient、httpUtil +jsoup或者selenium框架</p><h2 id="selenium框架"><a href="#selenium框架" class="headerlink" title="selenium框架"></a>selenium框架</h2><h3 id="Selenium-IDE"><a href="#Selenium-IDE" class="headerlink" title="Selenium IDE"></a>Selenium IDE</h3><p>Selenium IDE是浏览器扩展程序，可以编写、录制、执行测试脚本。脚本一般过于简单，不适用于有循环和复杂条件的场景，但是我们可以导出脚本为编程语言，支持下面几种，这样可以方便我们了解selenium的API，编写为功能更加强大地代码。</p><ul><li>C# NUnit</li><li>Java JUnit</li><li>JavaScript Mocha</li><li>Python pytest<br><img src="/img/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/2022-10-12-22-27-33.png"></li></ul><h3 id="Selenium-RC"><a href="#Selenium-RC" class="headerlink" title="Selenium RC"></a>Selenium RC</h3><p>Selenium RC 在很长一段时间内都是 Selenium 的主要项目，直到 WebDriver&#x2F;Selenium 合并而产生了最新和最强大的 Selenium 2</p><p>RC 服务端绑定了 Selenium Core 并且自动将其注入浏览器。这在你的测试程序打开浏览器时发生（使用客户端库的方法）。Selenium-Core 是一个 JavaScript 程序，实际上是一些利用浏览器的内置 JavaScript 解析器解析和执行 Selenese 命令 的 JavaScript 函数。<br><img src="/img/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/2022-10-12-22-39-56.png"><br>Server 使用简单的 HTTP GET&#x2F;POST 请求来接收你的测试程序中的 Selenese 命令。这意味这你可以使用任何可以发送 HTTP 请求的编程语言来实现 Selenium 测试在浏览器中的自动运行。</p><p>懵逼了吧，不管了，先动手实现<code>RC server</code>和<code>RC client</code>吧</p><h4 id="RC-server"><a href="#RC-server" class="headerlink" title="RC server"></a>RC server</h4><p>Selenium RC 服务端是一个简单的 jar 包 (selenium-server-standalone-.jar)，它不需要安装，只需要在RC server的目录下命令启动即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.seleniumhq.selenium<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>selenium-server-standalone<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.53.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要添加浏览器的驱动来启动，我这里指定了edge和chrome驱动，后续我的client就支持edge和chrome的选项了</span></span><br><span class="line">java -Dwebdriver.edge.driver=&quot;E:\Downloads\edgedriver_win64\msedgedriver.exe&quot; -Dwebdriver.chrome.driver=&quot;E:\Downloads\chromedriver_win32\chromedriver.exe&quot; -jar selenium-server-standalone-2.53.0.jar</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不需要浏览器驱动启动项，如果你设置了浏览器驱动的环境变量到PATH</span></span><br><span class="line">java -jar selenium-server-standalone-&lt;version-number&gt;.jar</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">你可以使用 -h 来查看所有的配置项</span></span><br><span class="line">java -jar selenium-server-standalone-&lt;version-number&gt;.jar -h</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>java -version</code>（需要&gt;&#x3D;1.5）现在达不到的很少了吧<br><img src="/img/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/2022-10-15-23-44-08.png" alt="带驱动启动RC服务器"></p><h4 id="RC-client"><a href="#RC-client" class="headerlink" title="RC client"></a>RC client</h4><ul><li><p>这里我们选择Java语言来实现client，当然你可以选其他语言。<br><img src="/img/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/2022-10-12-23-12-09.png"></p></li><li><p><a href="https://github.com/SeleniumHQ/selenium/releases/download/selenium-4.5.0/selenium-java-4.5.0.zip">https://github.com/SeleniumHQ/selenium/releases/download/selenium-4.5.0/selenium-java-4.5.0.zip</a><br>我们将下载的selenium-java-4.5.0.zip解压，新建一个Java项目，将文件夹内的selenium-java-.jar 添加到你的项目中，或者使用maven</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.seleniumhq.selenium<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>selenium-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- webdrivermanager也先拿去，客户端浏览器驱动用到的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.bonigarcia<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webdrivermanager<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>从 Selenium-IDE 将脚本导出为 Java 文件，并放入你的项目，或者使用 Selenium 的 Java 客户端 API 编写一个 Selenium 测试文件。你可以使用 JUnit，或者 TestNg 来运行你的测试，或者你可以简单的写一个 main() 方法。<br><code>除了C/S架构运行，它还支持仅在客户端运行，我主要讲一下浏览器驱动连接的问题，具体看下面代码</code><br>如果是个人小项目，选择客户端浏览器足够用了，服务器浏览器只是为了统一客户端不同测试用例的测试环境。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">private</span> ChromeOptions chromeOptions;</span><br><span class="line">  <span class="keyword">private</span> EdgeOptions edgeOptions;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> WebDriver driver; <span class="comment">//使用服务端浏览器</span></span><br><span class="line">  <span class="comment">// 如果是使用客户端浏览器</span></span><br><span class="line"><span class="comment">//  private ChromeDriver driver;</span></span><br><span class="line"><span class="comment">//  private EdgeDriver driver;</span></span><br><span class="line">  <span class="meta">@Before</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> <span class="keyword">throws</span> MalformedURLException &#123;</span><br><span class="line">    <span class="comment">// 为客户端浏览器匹配最佳驱动 WebDriverManager需要导包 import io.github.bonigarcia.wdm.WebDriverManager;</span></span><br><span class="line"><span class="comment">//    WebDriverManager.chromedriver().setup();</span></span><br><span class="line"><span class="comment">//    WebDriverManager.edgedriver().setup();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为客户端浏览器设置驱动</span></span><br><span class="line"><span class="comment">//    System.setProperty(&quot;webdriver.chrome.driver&quot;,&quot;E:\\Downloads\\chromedriver_win32\\chromedriver.exe&quot;);</span></span><br><span class="line"><span class="comment">//    System.setProperty(&quot;webdriver.edge.driver&quot;,&quot;E:\\Downloads\\edgedriver_win64\\msedgedriver.exe&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为客户端或服务端浏览器设置驱动 推荐！！！</span></span><br><span class="line"><span class="comment">//    将驱动所在目录添加到系统的path环境变量</span></span><br><span class="line"></span><br><span class="line">    chromeOptions = <span class="keyword">new</span> <span class="title class_">ChromeOptions</span>();</span><br><span class="line">    <span class="comment">// 设置浏览器选项的参数，setBinary，浏览器.exe可以执行程序二进制文件，一般不需要设这个，除非你的浏览器不是安装在默认目录</span></span><br><span class="line">    chromeOptions.setBinary(<span class="string">&quot;E:\\Program Files\\Chrome_X64_79.0.3945.88\\App\\chrome.exe&quot;</span>);</span><br><span class="line">    chromeOptions.setPlatformName(<span class="string">&quot;Windows 10&quot;</span>);</span><br><span class="line">    chromeOptions.setBrowserVersion(<span class="string">&quot;79&quot;</span>);</span><br><span class="line"></span><br><span class="line">    edgeOptions = <span class="keyword">new</span> <span class="title class_">EdgeOptions</span>();</span><br><span class="line">    edgeOptions.setPlatformName(<span class="string">&quot;Windows 10&quot;</span>);</span><br><span class="line">    edgeOptions.setBrowserVersion(<span class="string">&quot;106.0.1370.42&quot;</span>);</span><br><span class="line">    <span class="comment">// 使用远程浏览器</span></span><br><span class="line">    driver = <span class="keyword">new</span> <span class="title class_">RemoteWebDriver</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://127.0.0.1:4444/wd/hub&quot;</span>), edgeOptions);</span><br><span class="line">    <span class="comment">// 使用客户端浏览器</span></span><br><span class="line"><span class="comment">//    driver = new ChromeDriver(chromeOptions);</span></span><br><span class="line"><span class="comment">//    driver = new EdgeDriver();</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>在一个RC client中还可以使用 JavaScript 是非常灵活的，但是 Selenium 不直接支持它。你可以在 Selenium RC 中使用 getEval 接口的方法来执行它。<br>考虑RC client中的没有静态 id 的多选框。在这种情况下，你可以通过使用 Selenium RC 对 JavaScript 语句进行求值（evaluate）来找到所有的多选框并处理它们。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String[] getAllCheckboxIds () &#123;</span><br><span class="line">     <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> <span class="string">&quot;var inputId  = new Array();&quot;</span>;<span class="comment">// Create array in java script.</span></span><br><span class="line">            script += <span class="string">&quot;var cnt = 0;&quot;</span>; <span class="comment">// Counter for check box ids.</span></span><br><span class="line">            script += <span class="string">&quot;var inputFields  = new Array();&quot;</span>; <span class="comment">// Create array in java script.</span></span><br><span class="line">            script += <span class="string">&quot;inputFields = window.document.getElementsByTagName(&#x27;input&#x27;);&quot;</span>; <span class="comment">// Collect input elements.</span></span><br><span class="line">            script += <span class="string">&quot;for(var i=0; i&lt;inputFields.length; i++) &#123;&quot;</span>; <span class="comment">// Loop through the collected elements.</span></span><br><span class="line">            script += <span class="string">&quot;if(inputFields[i].id !=null &quot;</span> +</span><br><span class="line">                      <span class="string">&quot;&amp;&amp; inputFields[i].id !=&#x27;undefined&#x27; &quot;</span> +</span><br><span class="line">                      <span class="string">&quot;&amp;&amp; inputFields[i].getAttribute(&#x27;type&#x27;) == &#x27;checkbox&#x27;) &#123;&quot;</span>; <span class="comment">// If input field is of type check box and input id is not null.</span></span><br><span class="line">            script += <span class="string">&quot;inputId[cnt]=inputFields[i].id ;&quot;</span> + <span class="comment">// Save check box id to inputId array.</span></span><br><span class="line">                      <span class="string">&quot;cnt++;&quot;</span> + <span class="comment">// increment the counter.</span></span><br><span class="line">                      <span class="string">&quot;&#125;&quot;</span> + <span class="comment">// end of if.</span></span><br><span class="line">                      <span class="string">&quot;&#125;&quot;</span>; <span class="comment">// end of for.</span></span><br><span class="line">            script += <span class="string">&quot;inputId.toString();&quot;</span> ;<span class="comment">// Convert array in to string.</span></span><br><span class="line">     String[] checkboxIds = selenium.getEval(script).split(<span class="string">&quot;,&quot;</span>); <span class="comment">// Split the string.</span></span><br><span class="line">     <span class="keyword">return</span> checkboxIds;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>如果要计算页面中的图片数，你可以<code>selenium.getEval(&quot;window.document.images.length;&quot;);</code><br>记住要调用 window 对象，以防在 DOM 表达式中其默认指向 Selenium 窗口而不是测试窗口。<br>这只是API巧妙的冰山一角。</p></li></ul><h4 id="Selenium-RC-架构原理"><a href="#Selenium-RC-架构原理" class="headerlink" title="Selenium RC 架构原理"></a>Selenium RC 架构原理</h4><p><a href="https://wizardforcel.gitbooks.io/selenium-doc/content/official-site/selenium-1.html">https://wizardforcel.gitbooks.io/selenium-doc/content/official-site/selenium-1.html</a></p><h3 id="Selenium-Grid"><a href="#Selenium-Grid" class="headerlink" title="Selenium Grid"></a>Selenium Grid</h3><p>Selenium-Grid 允许你在多台机器的多个浏览器上并行的进行测试，也就是说，你可以同时运行多个测试。本质上来说就是，Selenium-Grid 支持分布式的测试执行。它可以让你的测试在一个分布式的执行环境中运行。</p><p>通过在多个浏览器中运行测试，在多个版本的浏览器中进行测试，或在不同操作系统的浏览器中进行测试，以减少测试运行时间。</p><p>Selenium-Grid 2.0 是(2012&#x2F;5&#x2F;26)已发布的最新版本。它同版本 1 有很多不同之处。在 2.0 中，Selenium-Grid 和 Selenium-RC 服务端进行了合并。</p><p><code>需要jdk11或更高版本……那我先溜了</code></p><h3 id="不鼓励的行为"><a href="#不鼓励的行为" class="headerlink" title="不鼓励的行为"></a>不鼓励的行为</h3><p>验证码<br>文件下载<br>HTTP响应码<br>Gmail, email and Facebook<br>测试依赖<br>性能测试<br>爬取链接<br>双因素认证<br>详情见 <a href="https://www.selenium.dev/zh-cn/documentation/test_practices/discouraged/">https://www.selenium.dev/zh-cn/documentation/test_practices/discouraged/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>编程范式</title>
      <link href="/2022/08/02/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/"/>
      <url>/2022/08/02/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="编程范式"><a href="#编程范式" class="headerlink" title="编程范式"></a>编程范式</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每种语言都有其主张的编程范式，而且你在使用不同语言编程的时候可能实际上想的东西非常不一样，有时一种语言可以包含多种编程范式。<br>C、MISP汇编、C++、并发编程、scheme、python</p><h2 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h2><p>C</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>C++</p><h2 id="并发式"><a href="#并发式" class="headerlink" title="并发式"></a>并发式</h2><p>2个函数看起来像同时运行，但实际上在单处理器的机器中是A运行一点，然后B运行一点，再A运行一点……<br>使用场景：网络编程、两个人同时对同一个账户存取款（2个不同进程访问的共享资源）。</p><h2 id="函数式"><a href="#函数式" class="headerlink" title="函数式"></a>函数式</h2><p>Lisp是函数式编程的代表，后来又发展出了Scheme……，建议使用Scheme，因为有SICP类的书参考。<br>函数式编程依赖函数的返回值</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>[^1]:Stanford CS107 Programming Paradigms 编程范式 中英双语字幕[<a href="https://www.bilibili.com/video/BV1Cx411S7HJ]">https://www.bilibili.com/video/BV1Cx411S7HJ]</a><br>[^2]:Stanford CS107 Programming Paradigms 编程范式 官方原视频和文档[<a href="https://see.stanford.edu/Course/CS107]">https://see.stanford.edu/Course/CS107]</a><br>[^3]:SICP[<a href="http://mitpress.mit.edu/sicp/full-text/book/book.html]">http://mitpress.mit.edu/sicp/full-text/book/book.html]</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git入门</title>
      <link href="/2022/08/01/git%E5%85%A5%E9%97%A8/"/>
      <url>/2022/08/01/git%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="git入门"><a href="#git入门" class="headerlink" title="git入门"></a>git入门</h1><h2 id="origin远程仓库名"><a href="#origin远程仓库名" class="headerlink" title="origin远程仓库名"></a>origin远程仓库名</h2><p>服务端仓库名很多文档默认用的origin，所以先记住<code>服务端仓库名=origin</code>，其实<code>origin</code> 是当你运行 git clone 时默认的远程服务端仓库名字。 如果你运行 <code>git clone -o </code>repo，那么你默认的远程仓库将会是 repo</p><h2 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h2><p>.git文件夹存在于仓库的根目录<br><code>git init</code> 当前文件夹成为一个git仓库</p><h2 id="绑定远程仓库"><a href="#绑定远程仓库" class="headerlink" title="绑定远程仓库"></a>绑定远程仓库</h2><p><code>git remote origin url</code></p><h2 id="克隆整个仓库"><a href="#克隆整个仓库" class="headerlink" title="克隆整个仓库"></a>克隆整个仓库</h2><p><code>git clone url</code></p><h2 id="推送本地分支到服务端"><a href="#推送本地分支到服务端" class="headerlink" title="推送本地分支到服务端"></a>推送本地分支到服务端</h2><p><code>git push origin &lt;分支名&gt;</code><br>默认单分支是<code>master</code>分支，提交到master分支即可，最新版改名叫<code>main</code>了<br><code>git push origin master</code></p><h2 id="多分支管理"><a href="#多分支管理" class="headerlink" title="多分支管理"></a>多分支管理</h2><p>备份在服务端的主分支<code>master</code>最新版改叫<code>main</code>分支了。<br>在多人协作开发中，<code>master</code>分支最终的内容是来自于你和其他人的。<br>我们要在服务端最新的master分支的基础上进行新功能的开发，但是又不想影响master分支，所以我们要新建分支。</p><h3 id="新建、切换分支"><a href="#新建、切换分支" class="headerlink" title="新建、切换分支"></a>新建、切换分支</h3><p>切换分支<br><code>git checkout 分支名</code></p><p>切换到<code>分支名</code>的分支，<code>-b</code>如果分支不存在则新建<br><code>git checkout -b 分支名</code></p><h2 id="拉取服务端分支"><a href="#拉取服务端分支" class="headerlink" title="拉取服务端分支"></a>拉取服务端分支</h2><p>拉取master分支<br><code>git pull origin master</code><br>拉取当前正在用的分支<br><code>git pull</code><br>拉取所有分支<br><code>git pull --all</code></p><h3 id="多分支开发-实战"><a href="#多分支开发-实战" class="headerlink" title="多分支开发 实战"></a>多分支开发 实战</h3><h4 id="从新建多分支开发到提交"><a href="#从新建多分支开发到提交" class="headerlink" title="从新建多分支开发到提交"></a>从新建多分支开发到提交</h4><p>服务端子分支已存在<br>方法一:本地仓库，绑定远程仓库，获取分支，切换分支开发<br>方法二：clone仓库，这将会拉取所有分支，切换分支开发</p><p>服务端子分支不存在<br>本地拉取服务端仓库，本地新建分支，推送分支到服务端仓库</p><p><strong>服务端子分支不存在 实战</strong><br>拉取最新的主分支<code>master</code>到本机<br><code>git clone url </code>全部分支都拿下<br>或者空的本地仓库<code>git remote add origin url</code>再<code>git pull --all</code>也是全拿下<br>或者空的本地仓库<code>git remote add origin url</code>再<code>git pull origin master</code></p><p>收到新任务，需要在当前master分支的最新版基础上开发新功能。<br>①本地切换到master分支<br><code>git checkout master</code><br>②将本地master分支更新到最新版，拉取当前正在用的master分支<br><code>git pull</code><br>③切换到子分支，如果子分支不存在则新建<br><code>git checkout -b &lt;分支名&gt;</code><br>④推送本地子分支到服务器端，服务器端将会新建子分支<br><code>git push origin &lt;分支名&gt;</code><br>⑤使用子分支进行开发、自测<br>⑥将本地子分支通过<code>rebase</code>获取master的更新，再次测试<br><code>git rebase master</code><br>⑦子分支提交请求合并到master</p><h4 id="不小心写错分支了"><a href="#不小心写错分支了" class="headerlink" title="不小心写错分支了"></a>不小心写错分支了</h4><p>本来需要在dev分支进行开发，结果不小心在master分支上直接进行编辑修改了。<br>不要慌，首先把所做的修改<code>git add</code>进暂存区，先不要<code>git commit</code>，然后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash // 把暂存区内的修改存储起来</span><br><span class="line">git checkout dev //切换到正确的分支</span><br><span class="line">git stash pop //将存储的修改取出来</span><br></pre></td></tr></table></figure><p>如果已经git commit了呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD^ // 撤回到刚刚commit之前的状态</span><br></pre></td></tr></table></figure><h4 id="多分支开发实战总结"><a href="#多分支开发实战总结" class="headerlink" title="多分支开发实战总结"></a>多分支开发实战总结</h4><p>多分支不适合单人使用，切换分支较为繁琐<br>不在master开发提交<br>创建子分支进行开发<br>子分支功能依赖master更新的内容时先<code>git pull origin master</code>，再<code>在子分支中 git rebase master</code>最后开发测试通过再提交<code>git push origin &lt;分支名&gt;</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Web安全</title>
      <link href="/2022/08/01/Web%E5%AE%89%E5%85%A8/"/>
      <url>/2022/08/01/Web%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Web安全"><a href="#Web安全" class="headerlink" title="Web安全"></a>Web安全</h1><h2 id="Web安全发展史"><a href="#Web安全发展史" class="headerlink" title="Web安全发展史"></a>Web安全发展史</h2><p>随着历史的发展，Web应用开发的技术百花齐放，有些技术较为新颖，需要时间和攻击者的考验，有潜在的漏洞隐患。<br>Web应用的万金油，大量有价值的Web数据和系统，利益驱使着攻击者从系统攻击和网络攻击转移到了对Web应用的攻击。</p><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>URL是URI的一个子集,叫做统一资源定位符。<br><code>http</code>：&#x2F;&#x2F;<code>cn.bing.com</code>:<code>80</code>&#x2F;<code>search</code>?<code>name=Sam``#homework</code><br>依次是 协议、主机或域名、端口、路径、参数、锚点</p><h3 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h3><p>方法、URL、HTTP版本、头部</p><h4 id="origin"><a href="#origin" class="headerlink" title="origin"></a>origin</h4><p>跨域请求的头部会携带origin，后端通过判断请求的Header携带的origin校验保证服务器安全性。</p><h4 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h4><p>Referer其实应该是单词Referrer,只是将错就错了,Header携带的Referer记录了请求的来源URL，但是Referer可以为空。</p><h3 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h3><p>HTTP版本、状态码、头部、响应体。</p><h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h2><p>一个web容器，可以搭建web站点、配置https、配置反向代理，并且可以将mysql、ssl模块化，有点像nginx。</p><h2 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h2><h3 id="为什么需要SSL"><a href="#为什么需要SSL" class="headerlink" title="为什么需要SSL"></a>为什么需要SSL</h3><p>网站中的用户名、密码，在tcp协议包中明文传输，会被恶人利用侦听到数据并泄露出来。<br>可以使用Wireshark或者Fiddler抓包看到明文的数据。<br>还有<a href="http://cn.bing.com/">http://cn.bing.com</a>、<a href="http://cn.bing.sb.com/">http://cn.bing.sb.com</a>如何确保哪个是正确的网站？不法分子使用相似的域名钓鱼，用户点击进去后输入用户名、密码就完蛋了。<br>so…… 为了安全：<br>①用户和服务器间的通信需要加密。<br>②身份认证，确保这个网站就是用户想要的网站。</p><h3 id="什么是SSL"><a href="#什么是SSL" class="headerlink" title="什么是SSL"></a>什么是SSL</h3><p>Secure Socket Layer 安全套接字层<br>SSL位于传输层之上，应用层之下，为上层应用提供接口服务。<br>HTTP + SSL &#x3D; HTTPS<br>SSL + FTP &#x3D; SFTP</p><h3 id="SSL的功能"><a href="#SSL的功能" class="headerlink" title="SSL的功能"></a>SSL的功能</h3><p>对服务器进行认证<br>对用户进行认证<br>加密通信<br>通信双方之间的保密性和完整性</p><h3 id="SSL是如何工作的"><a href="#SSL是如何工作的" class="headerlink" title="SSL是如何工作的"></a>SSL是如何工作的</h3><p>SSL有两层，握手协议和记录协议<br><strong>-SSL 握手协议</strong></p><ul><li>建立通信双方的可靠连接</li></ul><p><strong>-SSL 记录协议</strong></p><ul><li>传输数据块</li></ul><h4 id="SSL握手"><a href="#SSL握手" class="headerlink" title="SSL握手"></a>SSL握手</h4><p>验证服务器<br>验证用户<br>选择加密算法<br>确定会话密钥</p><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p>CA机构将证书颁发给网站，网站提供证书，浏览器验证。<br>好比公安局办完身份证，我就是拥有证书的网站了，浏览器只需要验证我的证书身份证，确定证书身份证号就是对应我的url，可以允许建立连接。</p><h5 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h5><p>证书是由CA机构颁发给网站的。<br>证书内容包含了颁发者、持有者、持有者公钥、有效期……<br>证书持有者的公钥，公钥是公开的密钥，任何人都可以使用这个公开的密钥进行加密，然后发给公钥持有者；公钥和密文并不能解密；只有私钥才能解密。<br>这里用到了非对称加密，</p><h5 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h5><p>协商会话算法和会话密钥。<br>加密传输数据。</p><h5 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h5><p><code>一般是公钥加密、私钥解密</code>，公钥和私钥是对称的，也可以使用私钥加密，公钥解密，但是公钥是公开的，使用<code>私钥加密没有保密性可言</code>。<br>但也不是一无是处。<br><strong>数字签名在证书颁发过程的使用</strong><br>网站将证书提交给CA机构，CA机构对证书进行<code>私钥加密</code>后颁发给网站；我们对网站发起请求时，网站将证书交给浏览器，浏览器通过CA的<code>公钥解密</code>根证书的内容，如果解密成功，证书域名与浏览器url一致，则通过。</p><h3 id="非对称加密算法-RSA"><a href="#非对称加密算法-RSA" class="headerlink" title="非对称加密算法 RSA"></a>非对称加密算法 RSA</h3><p><code>因数1 × 因数2 = 积</code><br><code>质数 = a = 1 × a</code> a最小值是2<br><code>余数 = 积 - 因数1 × 因数2 =  积 % 因数1 = 积 % 因数2</code><br>好了，我们知道因数、质数、余数了，下面我们一起来加密解密吧。</p><h4 id="RSA加密解密"><a href="#RSA加密解密" class="headerlink" title="RSA加密解密"></a>RSA加密解密</h4><p>RSA加解密使用的是<code>公钥(E,N)</code>，<code>私钥(D,N)</code>，D是不能被公开的；现在我们先假设我们有了<code>公钥(7,33)</code>和<code>私钥(3,33)</code>；对源数据3，1，15使用RSA加密传输后解密得到3，1，15。<br><img src="/img/Web%E5%AE%89%E5%85%A8/2022-08-02-21-14-42.png" alt="RSA的加密解密"><br><code>一般是公钥加密、私钥解密</code>，但是如果使用了<code>私钥(3,33)</code>加密，<code>公钥(7,33)</code>也是可以解密的，可以用于数字签名的实现。</p><h4 id="制作公钥和私钥"><a href="#制作公钥和私钥" class="headerlink" title="制作公钥和私钥"></a>制作公钥和私钥</h4><p><img src="/img/Web%E5%AE%89%E5%85%A8/2022-08-02-21-35-21.png" alt="制作公钥私钥"><br>T是算出私钥D的重要数字。<br>T能被N推算出来，但是如果两个质数很大的时候就不好推了，只是时间问题。<br>目前的经典计算机中，1024位的密钥基本安全，2048位的密钥及其安全。<br>量子计算机能在8小时内破解2048位RSA加密。</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="SSL实现HTTPS总结"><a href="#SSL实现HTTPS总结" class="headerlink" title="SSL实现HTTPS总结"></a>SSL实现HTTPS总结</h3><p>CA机构通过制作公钥私钥来完成自身机构的证书，提供给浏览器厂商，这样浏览器厂商发布浏览器时就会携带这些根证书（包含该CA的公钥）。</p><p>服务器提交证书给CA，CA用私钥将服务器证书签名后颁发给服务器。</p><p>访问HTTPS时，服务器把持有的证书发送给浏览器，浏览器使用CA的公钥解密，解密成功，获得服务器的公钥，<code>使用服务器公钥加密通信来确定数据传输加密方法</code>。<br>为什么不直接用服务器公钥加密后数据传输给服务器呢，RSA用于身份认证和密钥协商，很少用于直接数据加密，因为效率低。</p><h3 id="OpenSSL"><a href="#OpenSSL" class="headerlink" title="OpenSSL"></a>OpenSSL</h3><p>OpenSSL是一款开源软件，是SSL协议的具体实现。<br>能够实现证书生成、证书签名、密钥生成、加解密等各种操作。</p><h4 id="使用OpenSSL自建HTTPS网站"><a href="#使用OpenSSL自建HTTPS网站" class="headerlink" title="使用OpenSSL自建HTTPS网站"></a>使用OpenSSL自建HTTPS网站</h4><p>需要 OpenSSL、Web程序、Web容器<br>待实现，略……</p><h2 id="非常感谢"><a href="#非常感谢" class="headerlink" title="非常感谢"></a>非常感谢</h2><p>[^1]:Web安全 中国科学技术大学[<a href="https://www.xuetangx.com/course/USTC08091001657/12423937">https://www.xuetangx.com/course/USTC08091001657/12423937</a> ]</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用社区版软件开发JavaWeb</title>
      <link href="/2022/07/31/%E4%BD%BF%E7%94%A8%E7%A4%BE%E5%8C%BA%E7%89%88%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91JavaWeb/"/>
      <url>/2022/07/31/%E4%BD%BF%E7%94%A8%E7%A4%BE%E5%8C%BA%E7%89%88%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91JavaWeb/</url>
      
        <content type="html"><![CDATA[<h1 id="使用社区版软件开发JavaWeb"><a href="#使用社区版软件开发JavaWeb" class="headerlink" title="使用社区版软件开发JavaWeb"></a>使用社区版软件开发JavaWeb</h1><h2 id="用到的社区版软件"><a href="#用到的社区版软件" class="headerlink" title="用到的社区版软件"></a>用到的社区版软件</h2><p>IDEA、vsCode、Dbeaver</p><h2 id="Dbeaver连接数据库"><a href="#Dbeaver连接数据库" class="headerlink" title="Dbeaver连接数据库"></a>Dbeaver连接数据库</h2><p>Dbeaver是一款可视化数据库连接工具。<br>建议打开后先修改驱动安装位置，不然数据库驱动全默认下载到C盘。<br><img src="/img/%E4%BD%BF%E7%94%A8%E7%A4%BE%E5%8C%BA%E7%89%88%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91JavaWeb/2022-07-31-20-47-51.png" alt="修改驱动位置"></p><h2 id="idea搭建后端项目"><a href="#idea搭建后端项目" class="headerlink" title="idea搭建后端项目"></a>idea搭建后端项目</h2><h3 id="从maven创建后端JavaWeb项目"><a href="#从maven创建后端JavaWeb项目" class="headerlink" title="从maven创建后端JavaWeb项目"></a>从maven创建后端JavaWeb项目</h3><p>使用Maven创建webapp项目<br><img src="/img/%E4%BD%BF%E7%94%A8%E7%A4%BE%E5%8C%BA%E7%89%88%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91JavaWeb/2022-07-31-20-57-50.png" alt="创建webapp项目"><br>设置编译输出路径，可以先不搞这个，不是很必要<br><img src="/img/%E4%BD%BF%E7%94%A8%E7%A4%BE%E5%8C%BA%E7%89%88%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91JavaWeb/2022-07-31-21-01-00.png" alt="项目编译输出路径"><br><img src="/img/%E4%BD%BF%E7%94%A8%E7%A4%BE%E5%8C%BA%E7%89%88%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91JavaWeb/2022-07-31-21-02-26.png" alt="模块编译输出路径"></p><h3 id="添加smartTomcat插件支持"><a href="#添加smartTomcat插件支持" class="headerlink" title="添加smartTomcat插件支持"></a>添加smartTomcat插件支持</h3><p><img src="/img/%E4%BD%BF%E7%94%A8%E7%A4%BE%E5%8C%BA%E7%89%88%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91JavaWeb/2022-07-31-21-05-58.png" alt="安装Tomcat"><br>配置项目上下文路径，启动项目<br><img src="/img/%E4%BD%BF%E7%94%A8%E7%A4%BE%E5%8C%BA%E7%89%88%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91JavaWeb/2022-07-31-21-09-43.png" alt="配置项目上下文路径"></p><h2 id="vsCode编写js"><a href="#vsCode编写js" class="headerlink" title="vsCode编写js"></a>vsCode编写js</h2><h3 id="微软账户同步设置"><a href="#微软账户同步设置" class="headerlink" title="微软账户同步设置"></a>微软账户同步设置</h3><p>登录微软账户同步vsCode插件和设置，不会有人想在别的地方也要设置一边吧~</p><h3 id="设置自动保存"><a href="#设置自动保存" class="headerlink" title="设置自动保存"></a>设置自动保存</h3><p>帮你CTRL+S<br><img src="/img/%E4%BD%BF%E7%94%A8%E7%A4%BE%E5%8C%BA%E7%89%88%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91JavaWeb/2022-07-31-22-02-02.png" alt="自动保存"></p><h3 id="添加IntelliJ-IDEA-Keybindings插件"><a href="#添加IntelliJ-IDEA-Keybindings插件" class="headerlink" title="添加IntelliJ IDEA Keybindings插件"></a>添加IntelliJ IDEA Keybindings插件</h3><p>一款idea快捷键插件，双shift找文件，ctrl+shift+f全局搜索，ctrl+w光标增域选择，ctrl+f4关闭标签，你会忘了你是在vscode里。</p><h3 id="用于JSP文件的设置"><a href="#用于JSP文件的设置" class="headerlink" title="用于JSP文件的设置"></a>用于JSP文件的设置</h3><p>添加<code>java server page</code>插件，使文件语言模式能被编辑器标记为jsp<br><img src="/img/%E4%BD%BF%E7%94%A8%E7%A4%BE%E5%8C%BA%E7%89%88%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91JavaWeb/2022-07-31-21-37-57.png" alt="jsp标记"><br>设置Emmet插件，使jsp的h5部分得到Emmet插件的支持。<br><img src="/img/%E4%BD%BF%E7%94%A8%E7%A4%BE%E5%8C%BA%E7%89%88%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91JavaWeb/2022-07-31-21-44-38.png" alt="jsp的h5快捷键支持"></p><h3 id="自定义用户片段"><a href="#自定义用户片段" class="headerlink" title="自定义用户片段"></a>自定义用户片段</h3><p>就是写h5的时候一个!感叹号就能触发的模板，Emmett自带的h5模板不是我想要的。<br><img src="/img/%E4%BD%BF%E7%94%A8%E7%A4%BE%E5%8C%BA%E7%89%88%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91JavaWeb/2022-07-31-21-51-38.png" alt="用户片段入口"><br>能够支持设置h5和jsp的代码片段。，这里我只设置了h5的。<br><img src="/img/%E4%BD%BF%E7%94%A8%E7%A4%BE%E5%8C%BA%E7%89%88%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91JavaWeb/2022-07-31-22-12-49.png" alt="代码片段设置"><br>将用户片段置顶，因为默认情况下Emmet插件优先级大于用户片段。<br>进入 Settings，在上方搜索栏输入 snippet，设置为top<br><img src="/img/%E4%BD%BF%E7%94%A8%E7%A4%BE%E5%8C%BA%E7%89%88%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91JavaWeb/2022-07-31-21-54-35.png" alt="用户片段置顶"></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>idea社区版不支持jsp和js，即使copy了一份jsp插件也是被禁用的。<br>单纯只用idea社区版完成JavaWeb开发是不可能的。<br>但这并不能阻挡我拥抱免费社区版软件的决心。<br>因此后端使用idea，前端使用vscode，数据库连接使用dbeaver。</p><p>物质是一切生活情感、关系的基础。不能盲目追求免费开源用爱发电，看看Apache基金会，是受到了其他公司赞助和个人捐赠的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> IDE </tag>
            
            <tag> 编辑器 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Java </tag>
            
            <tag> Web </tag>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/2022/07/30/Spring/"/>
      <url>/2022/07/30/Spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="第一个Spring程序"><a href="#第一个Spring程序" class="headerlink" title="第一个Spring程序"></a>第一个Spring程序</h2><h3 id="下载Spring"><a href="#下载Spring" class="headerlink" title="下载Spring"></a>下载Spring</h3><p>Spring有很多其他的包，但是对于Spring的IOC基础，只需要这些包就够了。</p><p>Spring的<code>beans、content、core、expressssion</code>；还需要Apache的<code>commons-logging</code>；</p><h3 id="使用Maven下载Spring"><a href="#使用Maven下载Spring" class="headerlink" title="使用Maven下载Spring"></a>使用Maven下载Spring</h3><p>自有国情，可以去<a href="http://maven.aliyun.com/">http://maven.aliyun.com</a>搜索寻找jar包，进入网站后点击文件搜索即可。<br>搜索并查看jar包<br><img src="/img/Spring/2022-07-30-14-56-13.png" alt="搜索jar包"></p><p>点击文件名即可看到jar包对应的maven依赖<br><img src="/img/Spring/2022-07-30-15-00-08.png" alt="查看maven依赖"><br>maven的<code>&lt;dependencies&gt;</code>部分</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.anaptecs.jeaf.owalibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>org.apache.commons.logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><p>①创建一个类<code>HelloSpring.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloSpring</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单独一个say方法，打印输出say hello</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(HelloSpring.class+<span class="string">&quot;say hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②创建一个<code>beans.xml</code>文件<br>用来为<code>HelloSpring</code>注册bean的，beans.xml文件的模板可以去spring官网找。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;ayao1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ayao.HelloSpring&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>③创建<code>AppTest.java</code>文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// ClassPathXmlApplicationContext bean = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// BeanFactory bean = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">HelloSpring</span> <span class="variable">ayao1</span> <span class="operator">=</span> (HelloSpring)bean.getBean(<span class="string">&quot;ayao1&quot;</span>);</span><br><span class="line">        <span class="type">HelloSpring</span> <span class="variable">ayao2</span> <span class="operator">=</span> bean.getBean(<span class="string">&quot;ayao1&quot;</span>, HelloSpring.class);</span><br><span class="line">        ayao1.say(); <span class="comment">// HelloSpring.class+&quot;say hello&quot;</span></span><br><span class="line">        ayao2.say(); <span class="comment">// HelloSpring.class+&quot;say hello&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④运行<code>AppTest.java</code>中的main方法<br>我们在<code>beans.xml</code>中为<code>HelloSpring</code>通过id注册了bean，<br>在<code>AppTest.java</code>中读取<code>beans.xml</code>文件，并用id通过getBean获取到了对象，并转换为我们想要的<code>HelloSpring</code>对象，然后就可以用对象调用<code>say()</code>方法了。</p><h2 id="IOC控制反转"><a href="#IOC控制反转" class="headerlink" title="IOC控制反转"></a>IOC控制反转</h2><h3 id="IOC控制反转是什么"><a href="#IOC控制反转是什么" class="headerlink" title="IOC控制反转是什么"></a>IOC控制反转是什么</h3><p>对象创建和对象之间的调用交给Spring管理，是低耦合的。</p><h3 id="IOC原理"><a href="#IOC原理" class="headerlink" title="IOC原理"></a>IOC原理</h3><p>xml解析、工厂模式、反射。<br>IOC容器就是对象工厂，读取xml配置文件，通过工厂模式用反射创建对象。</p><h3 id="IOC的实现接口"><a href="#IOC的实现接口" class="headerlink" title="IOC的实现接口"></a>IOC的实现接口</h3><p>Spring提供了两个IOC的实现接口<code>BeanFactory</code>和<code>ApplicationContext</code><br>BeanFactory是低级容器，ApplicationContext是高级容器继承了BeanFactory，正常开发直接用<code>ApplicationContext</code>就好了，除非你哪天有空去编译阅读Spring源码。</p><h3 id="IOC两个实现接口的区别"><a href="#IOC两个实现接口的区别" class="headerlink" title="IOC两个实现接口的区别"></a>IOC两个实现接口的区别</h3><p><code>BeanFactory</code>，读取xml配置文件不创建对象，getBean才创建对象。<br><code>ApplicationContext</code>，读取xml配置文件并创建对象。除了<code>ClassPathXmlApplicationContext</code>ApplicationContext还有一个实现类<code>FileSystemXmlApplicationContext</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="/img/Spring/2022-07-30-17-20-54.png"></p><h3 id="IOC的实际应用"><a href="#IOC的实际应用" class="headerlink" title="IOC的实际应用"></a>IOC的实际应用</h3><h4 id="Bean管理"><a href="#Bean管理" class="headerlink" title="Bean管理"></a>Bean管理</h4><p>Bean管理就是<code>由Spring创建对象，注入属性</code>。<br>Bean管理有两种实现方式：<br>由Spring<code>基于xml</code>创建对象，注入属性。<br>由Spring<code>基于注解</code>创建对象，注入属性。</p><h5 id="基于xml"><a href="#基于xml" class="headerlink" title="基于xml"></a>基于xml</h5><p><strong>创建对象</strong><br>请看第一个Spring程序 略……<br>创建对象时，一般默认使用类的无参构造方法创建对象。<br>java类中默认包含无参构造，但如果类包含有参构造，则需要添加无参构造。<br><strong>注入属性</strong><br>注入属性，学名：依赖注入、DI（dependency injection）<br>注入属性有两种实现方式：<code>set方法注入、有参构造注入</code><br><strong># 方法一：set方法注入</strong><br>①创建<code>Student.java</code>，并设置属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String studentName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudentName</span><span class="params">(String studentName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.studentName = studentName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②在<code>beans.xml</code>使用<code>property</code>为studentName注入值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">略</span>……&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;ayao1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ayao.Student&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>③创建<code>AppTest.java</code>文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">ayao1</span> <span class="operator">=</span> (Student)bean.getBean(<span class="string">&quot;ayao1&quot;</span>);</span><br><span class="line">        <span class="comment">// Student&#123;studentName=&#x27;张三&#x27;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong># 方法一 续：set注入语法糖 p命名空间</strong><br>需要在beans标签添加<code>xmlns:p</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>  <span class="attr">略</span>……</span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;ayao1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ayao.Student&quot;</span> <span class="attr">p:studentName</span>=<span class="string">&quot;张三&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong># 方法二：有参构造注入</strong><br>这将会使用有参构造创建对象并注入属性。<br>①创建<code>Student.java</code>，设置属性和有参构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String studentName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String studentName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.studentName = studentName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②在<code>beans.xml</code>使用<code>constructor-arg</code>为studentName注入值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">略</span>……&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;ayao1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ayao.Student&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;studentName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;constructor-arg index=&quot;0&quot; value=&quot;李四&quot;&gt;&lt;/constructor-arg&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>③创建<code>AppTest.java</code>文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">ayao1</span> <span class="operator">=</span> (Student)bean.getBean(<span class="string">&quot;ayao1&quot;</span>);</span><br><span class="line">        <span class="comment">// Student&#123;studentName=&#x27;李四&#x27;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="xml注入null和特殊符号的处理方式"><a href="#xml注入null和特殊符号的处理方式" class="headerlink" title="xml注入null和特殊符号的处理方式"></a>xml注入null和特殊符号的处理方式</h5><p>为属性注入<code>null</code>值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">略</span>……&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;ayao1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ayao.Student&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentName&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为属性注入特殊符号，使用<code>&lt;![CDATA[]]&gt;</code>注入，如<code>《红楼梦》</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">略</span>……&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;ayao1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ayao.Student&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentName&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[《红楼梦》]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="注入属性-外部bean"><a href="#注入属性-外部bean" class="headerlink" title="注入属性-外部bean"></a>注入属性-外部bean</h5><p>传统的Service调Dao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MoneyDao</span> <span class="variable">moneyDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MoneyDaoImpl</span>();</span><br><span class="line">moneyDao.getMoney();</span><br></pre></td></tr></table></figure><p>Spring使用Bean管理注入外部Bean属性，如在MoneyService的bean中注入moneyDao属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MoneyService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> MoneyDao moneyDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">newGetMoney</span><span class="params">()</span>&#123;</span><br><span class="line">        moneyDao.getMoney();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml中注入外部bean moneyDaoImpl</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;moneyService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;main.java.service.MoneyService&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;moneyDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;moneyDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;moneyDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;main.java.dao.MoneyDaoImpl&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试入口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">    <span class="type">MoneyService</span> <span class="variable">moneyService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;moneyService&quot;</span>, MoneyService.class);</span><br><span class="line">    moneyService.newGetMoney();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注入属性-内部bean"><a href="#注入属性-内部bean" class="headerlink" title="注入属性-内部bean"></a>注入属性-内部bean</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">略</span>……&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.Student&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;玲玲&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;classRoom&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;classRoom&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ClassRoom&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;classRoomName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;七年级1班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="注入属性-级联赋值"><a href="#注入属性-级联赋值" class="headerlink" title="注入属性-级联赋值"></a>注入属性-级联赋值</h5><p>教室ClassRoom</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassRoom</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String classRoomName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClassRoom</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClassRoomName</span><span class="params">(String classRoomName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.classRoomName = classRoomName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ClassRoom&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;classRoomName=&#x27;&quot;</span> + classRoomName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>学生Student</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String studentName;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> ClassRoom classRoom;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ClassRoom <span class="title function_">getClassRoom</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> classRoom;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudentName</span><span class="params">(String studentName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.studentName = studentName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClassRoom</span><span class="params">(ClassRoom classRoom)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.classRoom = classRoom;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;studentName=&#x27;&quot;</span> + studentName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, classRoom=&quot;</span> + classRoom +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>级联赋值，<code>classRoom.classRoomName</code>相当于new ClassRoom().classRoomName</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">略</span>……&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.Student&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;玲玲&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;classRoom&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;classRoom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;classRoom.classRoomName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;十年级2班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;classRoom&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ClassRoom&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;constructor-arg name=&quot;classRoomName&quot; value=&quot;七年级1班&quot;&gt;&lt;/constructor-arg&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="注入属性-数组和集合"><a href="#注入属性-数组和集合" class="headerlink" title="注入属性-数组和集合"></a>注入属性-数组和集合</h5><p>略……</p><h5 id="FactoryBean接口"><a href="#FactoryBean接口" class="headerlink" title="FactoryBean接口"></a>FactoryBean接口</h5><p>普通bean的注册class和getBean返回值都是HelloSpring<br><code>&lt;bean id=&quot;helloSpring&quot; class=&quot;ayao.HelloSpring&quot; &gt;&lt;/bean&gt;</code><br>工厂bean的注册class和getBean返回值可以不一样，是通过实现<code>FactoryBean</code>来完成的。<br>我们通过Dog.java和AppTest.java来演示这个例子。<br>Dog.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="comment">// FactoryBean&lt;String&gt;，比如这里将泛型设置为String</span></span><br><span class="line">    <span class="comment">// getBean的返回类型 修改为String</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line">        str = <span class="string">&quot;孙行者&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> FactoryBean.<span class="built_in">super</span>.isSingleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AppTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;dog&quot;</span>, String.class);</span><br><span class="line">        System.out.println(string); <span class="comment">// 孙行者</span></span><br><span class="line">        <span class="comment">//这里在Dog.java重写了getObject()方法，所以返回值的对象不再是Dog了。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="bean是否单例、作用域"><a href="#bean是否单例、作用域" class="headerlink" title="bean是否单例、作用域"></a>bean是否单例、作用域</h5><p>对象是否单例可以通过打印比较多个对象地址得到<code>println(Object)</code><br>Spring的bean对象默认是单例的，我们可以调整<code>scope</code>设置成多实例对象。<code>singleton</code>单例、<code>prototype</code>多例。<br>singleton的bean在加载配置文件时就创建对象且只创建一次。<br>prototype的bean在getBean的时候才创建对象。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;bean id=&quot;student&quot; class=&quot;com.Student&quot; scope=&quot;singleton&quot;&gt;&lt;/bean&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.Student&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>scope</code>还能设置bean作用域，使用<code>request</code>或者<code>session</code>，当然这是web应用中的内容了。</p><h5 id="bean的生命周期、后置处理器"><a href="#bean的生命周期、后置处理器" class="headerlink" title="bean的生命周期、后置处理器"></a>bean的生命周期、后置处理器</h5><p>bean的生命周期如下，其中③、④是非必要的，只有添加了后置处理器才会出现。<br>①构造方法创建bean对象实例<br>②注入属性和引用其他bean<br>③<strong>后置处理器before</strong><br>④bean的初始化方法<br>⑤<strong>后置处理器after</strong><br>⑥getBean<br>⑦销毁bean<br>我们来实现一下后置处理器的情况，直接看下面的代码吧。<br>Dog.java 一个普通的bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;①构造方法创建bean对象实例&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">&quot;②注入属性和引用其他bean&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initDog</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;④bean的初始化方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyDog</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;⑦销毁bean&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现了<code>BeanPostProcessor</code>接口的一个bean，配置后置处理器需要用到。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    <span class="comment">// 实现了BeanPostProcessor接口才能重写的两个方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, java.lang.String beanName)</span> <span class="keyword">throws</span> org.springframework.beans.BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;⑤后置处理器before&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, java.lang.String beanName)</span> <span class="keyword">throws</span> org.springframework.beans.BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;⑥后置处理器after&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>beans.xml中配置，<code>init-method</code>初始化方法，<code>destroy-method</code>销毁方法，<code>注册后置处理器的bean</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">略</span>……&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.Dog&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initDog&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroyDog&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;二狗&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bpp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.MyBeanPostProcessor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>来个main方法跑起来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"><span class="comment">//        ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;dog&quot;</span>, Dog.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;⑥getBean&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//销毁开始，将会调用destoryDog</span></span><br><span class="line">        ((ClassPathXmlApplicationContext)applicationContext).close();</span><br><span class="line"><span class="comment">//        applicationContext.close();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h5><p>使用<code>autowire</code>进行自动装配，可根据属性名或属性类型进行注入，<code>byName</code>、<code>byType</code></p><p>ByName自动装配<br>使用自动装配，在Person中注入Pet，实现代码如下<br>Pet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String pName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getpName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setpName</span><span class="params">(String pName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pName = pName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Person.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPet</span><span class="params">(Pet pet)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pet = pet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">personAction</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name+<span class="string">&quot;和&quot;</span>+pet.getpName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">略</span>……&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;pet&quot;</span> <span class="attr">class</span>=<span class="string">&quot;Pet&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小花&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;大明&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>AppTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;person&quot;</span>, Person.class);</span><br><span class="line">        person.personAction(); <span class="comment">// 大明和小花</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ByType自动装配<br>被装配的bean的id不再重要，<code>hhh</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">略</span>……&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hhh&quot;</span> <span class="attr">class</span>=<span class="string">&quot;Pet&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小花&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;大明&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="基于注解"><a href="#基于注解" class="headerlink" title="基于注解"></a>基于注解</h5><p>注解简化了xml配置，注解作用在类、属性、方法上面。<br><strong>Bean管理中用于创建对象的注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@Repository</span></span><br></pre></td></tr></table></figure><p>这四个注解功能都是一样的，用于创建bean实例。<br><strong>创建对象</strong><br>导入<code>spring-aop</code>的依赖<br>在<code>beans.xml</code>开启组件扫描</p>]]></content>
      
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用心得</title>
      <link href="/2022/07/25/Hexo%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/"/>
      <url>/2022/07/25/Hexo%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo使用心得"><a href="#Hexo使用心得" class="headerlink" title="Hexo使用心得"></a>Hexo使用心得</h1><h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><p>请移步Hexo官网，略……</p><h2 id="Hexo编辑"><a href="#Hexo编辑" class="headerlink" title="Hexo编辑"></a>Hexo编辑</h2><p>请移步Hexo官网，略……</p><h2 id="Hexo运行"><a href="#Hexo运行" class="headerlink" title="Hexo运行"></a>Hexo运行</h2><p>可以使用Hexo自带的node运行，</p><p>也可以生成静态文件后通过nginx等Web容器运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清除已存在的静态文件</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="comment"># 生成静态文件，默认在public文件夹下</span></span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><h2 id="心仪的主题-——-Fluid主题"><a href="#心仪的主题-——-Fluid主题" class="headerlink" title="心仪的主题 —— Fluid主题"></a>心仪的主题 —— Fluid主题</h2><p>使用的是Fluid主题</p><h3 id="设置Mac风格代码块"><a href="#设置Mac风格代码块" class="headerlink" title="设置Mac风格代码块"></a>设置Mac风格代码块</h3><p>添加自定义样式文件到主题目录内的css文件夹，并使用配置。</p><p>在<code>_config.fluid.yml</code>编辑使用自定义配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 别忘了，你还差一个macstyle自定义样式文件</span></span><br><span class="line"><span class="attr">custom_css:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/css/macstyle</span></span><br></pre></td></tr></table></figure><p><strong>主题目录</strong></p><p>如果是node安装的，<code>node_modules/hexo-theme-fluid/source/css</code></p><p>如果是手动安装的，<code>themes/fluid/source/css</code></p><p>在<code>主题的css目录</code>内创建样式文件<code>文件后缀是styl</code>，文件内容如下</p><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里我文件名是macstyle.styl</span></span><br><span class="line"><span class="selector-class">.highlight</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#21252b</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span></span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">30px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">4</span>)</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">30px</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-pseudo">&amp;::before</span></span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#fc625d</span></span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">50%</span></span><br><span class="line">      <span class="attribute">box-shadow</span>: <span class="number">20px</span> <span class="number">0</span> <span class="number">#fdbc40</span>, <span class="number">40px</span> <span class="number">0</span> <span class="number">#35cd4b</span></span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&#x27; &#x27;</span></span><br><span class="line">      <span class="attribute">height</span>: <span class="number">12px</span></span><br><span class="line">      <span class="attribute">left</span>: <span class="number">12px</span></span><br><span class="line">      <span class="attribute">margin-top</span>: -<span class="number">20px</span></span><br><span class="line">      <span class="attribute">position</span>: absolute</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">12px</span></span><br></pre></td></tr></table></figure><h3 id="设置短代码显示风格"><a href="#设置短代码显示风格" class="headerlink" title="设置短代码显示风格"></a>设置短代码显示风格</h3><p>设置字体颜色，并去掉默认的背景色</p><p>位于<code>node_modules\hexo-theme-fluid\source\css\_pages\_post</code>的<code>markdown.styl</code>文件的code部分修改成如下</p><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">code</span></span><br><span class="line">    <span class="attribute">tab-size</span> <span class="number">4</span></span><br><span class="line">    <span class="comment">/*background-color var(--inlinecode-bg-color)*/</span></span><br><span class="line">    <span class="attribute">background-color</span> <span class="built_in">rgba</span>(<span class="number">27</span>, <span class="number">31</span>, <span class="number">35</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="attribute">transition</span> background-color .<span class="number">2s</span> ease-in-out</span><br><span class="line">    <span class="attribute">color</span> orange</span><br></pre></td></tr></table></figure><h3 id="其他杂碎"><a href="#其他杂碎" class="headerlink" title="其他杂碎"></a>其他杂碎</h3><p>需要编辑<code>_config.fluid.yml</code></p><h4 id="左上角小标题"><a href="#左上角小标题" class="headerlink" title="左上角小标题"></a>左上角小标题</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">blog_title:</span> <span class="string">&quot;Henry&#x27;s Hexo&quot;</span></span><br></pre></td></tr></table></figure><h4 id="搜索范围-全局搜索"><a href="#搜索范围-全局搜索" class="headerlink" title="搜索范围 全局搜索"></a>搜索范围 全局搜索</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">field:</span> <span class="string">all</span></span><br></pre></td></tr></table></figure><h4 id="首页大标题"><a href="#首页大标题" class="headerlink" title="首页大标题"></a>首页大标题</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">text:</span> <span class="string">&quot;十年树木，百年树人，千年成精，万年成魔&quot;</span></span><br></pre></td></tr></table></figure><h4 id="文章开头显示更新时间"><a href="#文章开头显示更新时间" class="headerlink" title="文章开头显示更新时间"></a>文章开头显示更新时间</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">updated:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="为移动设备的文章设置目录和跳到顶部按钮"><a href="#为移动设备的文章设置目录和跳到顶部按钮" class="headerlink" title="为移动设备的文章设置目录和跳到顶部按钮"></a>为移动设备的文章设置目录和跳到顶部按钮</h4><p>思路：为文章页面注入js和css样式，并修改ejs主题源代码。<br>通过加载injector.js来注入js和css<br><code>hexoProject/scripts/injector.js</code><br><code>这里injector.js中指定了只有post文章才会触发注入</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//injector.js</span></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">injector</span>.<span class="title function_">register</span>(<span class="string">&#x27;head_end&#x27;</span>, <span class="string">&#x27;&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/henry.css&quot;&gt;&lt;/link&gt;&#x27;</span>, <span class="string">&#x27;post&#x27;</span>);</span><br><span class="line"></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">injector</span>.<span class="title function_">register</span>(<span class="string">&#x27;body_end&#x27;</span>, <span class="string">&#x27;&lt;script src=&quot;/js/henry.js&quot;&gt;&lt;/script&gt;&#x27;</span>, <span class="string">&#x27;post&#x27;</span>);</span><br></pre></td></tr></table></figure><p>将主题的post.ejs添加修改如下内容，为隐藏的目录添加了id，henryHuang，添加了两个icon标签。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- post.ejs --&gt;</span><br><span class="line">    &lt;div class=&quot;side-col d-none d-lg-block col-lg-2&quot; id=&quot;henryHuang&quot;&gt;</span><br><span class="line">      &lt;%- inject_point(&#x27;postRight&#x27;) %&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;a href=&quot;#&quot; class=&quot;henryNotMobile&quot; id=&quot;henryTop&quot;&gt;</span><br><span class="line">      &lt;i class=&quot;iconfont icon-arrowup&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line"></span><br><span class="line">    &lt;a href=&quot;javascript:void(0)&quot; class=&quot;henryNotMobile&quot; id=&quot;henryBook&quot;&gt;</span><br><span class="line">      &lt;i class=&quot;iconfont icon-book&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;/a&gt;</span><br></pre></td></tr></table></figure><p>注入的js内容如下，初始化页面时检测用户代理决定是否启用移动设备方案，和通过icon点击事件控制目录的显示隐藏<br><code>hexoProject/source/js/henry.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// henry.js</span></span><br><span class="line"><span class="keyword">let</span> tocFlag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (navigator.<span class="property">userAgent</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;Mobile&#x27;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;检查到移动设备登录&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 目录的样式布局定位只加载一次</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;henryHuang&#x27;</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;henryToc&#x27;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;henryTop&#x27;</span>).<span class="title function_">removeAttribute</span>(<span class="string">&#x27;class&#x27;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;henryBook&#x27;</span>).<span class="title function_">removeAttribute</span>(<span class="string">&#x27;class&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bookClick = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;henryBook&#x27;</span>);</span><br><span class="line"></span><br><span class="line">bookClick.<span class="property">onclick</span>=<span class="keyword">function</span> <span class="title function_">fBook</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!tocFlag) &#123;</span><br><span class="line">        <span class="title function_">showHenryToc</span>();</span><br><span class="line">        tocFlag=!tocFlag;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">hideHenryToc</span>()</span><br><span class="line">        tocFlag=!tocFlag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注入的css，写了目录、目录icon、跳顶icon的布局和定位</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.henryToc</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">    inset: <span class="number">10%</span> <span class="number">0px</span> <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">132</span>, <span class="number">132</span>, <span class="number">132</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">540px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span> auto;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">0%</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0%</span> <span class="number">8%</span> <span class="number">8%</span>;</span><br><span class="line">    <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">11%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#henryTop</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">99</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">2%</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">2%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#henryBook</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">99</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">2%</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">5%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.henryNotMobile</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更多杂碎请移步Fluid主题官网"><a href="#更多杂碎请移步Fluid主题官网" class="headerlink" title="更多杂碎请移步Fluid主题官网"></a>更多杂碎请移步Fluid主题官网</h3><h2 id="心仪的主题-——-butterfly主题"><a href="#心仪的主题-——-butterfly主题" class="headerlink" title="心仪的主题 —— butterfly主题"></a>心仪的主题 —— butterfly主题</h2><p>Fluid默认的主题色调和功能基本满足我的需求，但是由于在移动设备上浏览时文章的TOC目录不会显示，自己写的前端设备判断和目录又比较难堪，所以找到了新的轮子butterfly。</p><h3 id="开始中文的butterfly"><a href="#开始中文的butterfly" class="headerlink" title="开始中文的butterfly"></a>开始中文的butterfly</h3><p>hexo根目录的_config.yml修改下面内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>安装依赖<code>npm install hexo-generator-search</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>hexo根目录的_config.yml加入下面内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索功能，基于 hexo-generator-search 插件，若已安装其他搜索插件请关闭此功能，以避免生成多余的索引文件</span></span><br><span class="line"><span class="comment"># Search feature, based on hexo-generator-search. If you have installed other search plugins, please disable this feature to avoid generating redundant index files</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 搜索索引文件的路径，可以是相对路径或外站的绝对路径</span></span><br><span class="line">  <span class="comment"># Path for search index file, it can be a relative path or an absolute path</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">local-search.xml</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 文件生成在本地的位置，必须是相对路径</span></span><br><span class="line">  <span class="comment"># The location where the index file is generated locally, it must be a relative location</span></span><br><span class="line">  <span class="attr">generate_path:</span> <span class="string">local-search.xml</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 搜索的范围</span></span><br><span class="line">  <span class="comment"># Search field</span></span><br><span class="line">  <span class="comment"># Options: post | page | all</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 搜索是否扫描正文</span></span><br><span class="line">  <span class="comment"># If true, search will scan the post content</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h3><p>sticky越大越靠前</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="section">sticky: 100</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h3 id="文章的顶部图和封面"><a href="#文章的顶部图和封面" class="headerlink" title="文章的顶部图和封面"></a>文章的顶部图和封面</h3><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">top<span class="emphasis">_img:  /img/Java入门/2022-08-10-18-01-11.png</span></span><br><span class="line"><span class="emphasis">cover:  /img/Java入门/2022-08-10-18-01-11.png</span></span><br><span class="line"><span class="emphasis">---</span></span><br></pre></td></tr></table></figure><h3 id="首页的文章封面布局"><a href="#首页的文章封面布局" class="headerlink" title="首页的文章封面布局"></a>首页的文章封面布局</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># 封面的位置</span></span><br><span class="line">  <span class="comment"># 三个值可配置 left , right , both</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span></span><br></pre></td></tr></table></figure><h3 id="Mac风格代码块"><a href="#Mac风格代码块" class="headerlink" title="Mac风格代码块"></a>Mac风格代码块</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_theme:</span> <span class="string">mac</span> </span><br></pre></td></tr></table></figure><h3 id="醒目的标题"><a href="#醒目的标题" class="headerlink" title="醒目的标题"></a>醒目的标题</h3><p>能够将<code>标题</code>和<code>正文加粗</code>区分开来，非常实用<br>会改变ol、ul、h1-h5的样式</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 美化页面显示</span></span><br><span class="line"><span class="attr">beautify:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># site/post</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>生物</title>
      <link href="/2022/07/25/%E7%94%9F%E7%89%A9/"/>
      <url>/2022/07/25/%E7%94%9F%E7%89%A9/</url>
      
        <content type="html"><![CDATA[<h1 id="生物"><a href="#生物" class="headerlink" title="生物"></a>生物</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是为了阳台种植而记录的笔记，可惜没能好好进行实践。</p><h2 id="什么是生物？"><a href="#什么是生物？" class="headerlink" title="什么是生物？"></a>什么是生物？</h2><p>生物一般有以下特征：</p><p><strong>生物的一生需要不断从外界获得营养物质</strong></p><p>绿色植物通过吸收外界的水、无机盐、二氧化碳，进行光合作用制造出葡萄糖、淀粉等有机物用于自身生存的营养物质。</p><p>动物通过以植物或其他动物为食获取营养物质。</p><p><strong>大多数生物需要呼吸</strong></p><p>鱼类浮出水面换气；植物在有氧条件下呼吸，将有机化合物氧化，产生二氧化碳和水。</p><p><strong>生物能排出体内的废物</strong></p><p>人通过排尿、出汗、呼出气体排出体内废物；植物通过落叶排出废物。</p><p><strong>生物对外界应激性</strong></p><p>含羞草受到触摸时会合拢，动物发现天敌后会撒腿就跑。</p><p><strong>生物的繁殖</strong></p><p>植物通过种子繁殖；动物通过卵、胚胎繁殖。<br><strong>生物的遗传和变异</strong></p><p>生物的子代与亲代之间有许多相同的特征，但总有一部分特征不相同。</p><p><strong>大部分生物由细胞构成</strong></p><p>病毒是不由细胞构成的生物。</p><h2 id="生态系统与食物"><a href="#生态系统与食物" class="headerlink" title="生态系统与食物"></a>生态系统与食物</h2><h3 id="生态系统"><a href="#生态系统" class="headerlink" title="生态系统"></a>生态系统</h3><p>空间内的生物与环境构成了生态系统。</p><p>在生态系统中，植物通过光合作用合成有机物，提供给自身营养，也是其他动物的营养来源，<code>植物是生态系统中的生产者</code>；动物不能自己制造有机物，直接或间接以植物为食，<code>动物是生态系统中的消费者</code>；落叶等动植物残骸被细菌、真菌分解为无机物。<code>细菌和真菌是生态系统中的分解者</code></p><h3 id="食物链"><a href="#食物链" class="headerlink" title="食物链"></a>食物链</h3><p>生态系统中不同生物吃与被吃的关系形成了食物链。草→虫→小鸡→老鹰</p><h3 id="食物网"><a href="#食物网" class="headerlink" title="食物网"></a>食物网</h3><p>生态系统中，多条食物链，交错相连，形成食物网。</p><p>人类排放的有毒物质进入生态系统，通过食物链的不断累积，最终危害人类自身。</p><h2 id="生物圈"><a href="#生物圈" class="headerlink" title="生物圈"></a>生物圈</h2><p>生物圈是最大的生态系统，是地球上的生物和环境组成的生态系统。</p><p>生物圈是地球大气表面到陆地，江水海洋中的所有生态系统的组合，是最大的生态系统。</p><h2 id="从细胞到动物个体"><a href="#从细胞到动物个体" class="headerlink" title="从细胞到动物个体"></a>从细胞到动物个体</h2><p>生物体的生长，与细胞的生长、分裂、分化是分不开的。</p><h3 id="细胞生长"><a href="#细胞生长" class="headerlink" title="细胞生长"></a>细胞生长</h3><p>细胞吸收营养物质，体积从小变大，这就是细胞的生长。</p><h3 id="细胞分裂"><a href="#细胞分裂" class="headerlink" title="细胞分裂"></a>细胞分裂</h3><p>如一个细胞分裂成两个细胞，使细胞的数量增加。</p><h3 id="细胞分化"><a href="#细胞分化" class="headerlink" title="细胞分化"></a>细胞分化</h3><p>细胞分裂出了功能不同的细胞。</p><h3 id="组织"><a href="#组织" class="headerlink" title="组织"></a>组织</h3><p>相同功能、形态、结构的细胞组合在一起形成了组织。</p><p>人体有四种基本组织，上皮组织、肌肉组织、结缔组织、神经组织。</p><h3 id="器官"><a href="#器官" class="headerlink" title="器官"></a>器官</h3><p>不同组织按一定次序结合形成器官。</p><p>人体中的器官，大脑、胃、心脏、肝、肺、肾、眼、耳、甲状腺、唾液腺等。</p><h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><p>多个器官按一定次序组合构成系统。</p><p>人体中的系统，运动系统、呼吸系统、消化系统、循环系统、泌尿系统图、神经系统、内分泌系统、生殖系统等。</p><h2 id="从细胞到植物个体"><a href="#从细胞到植物个体" class="headerlink" title="从细胞到植物个体"></a>从细胞到植物个体</h2><p>像动物那样，植物也是受精卵分裂分化，形成组织、器官，形成植物。</p><h3 id="植物的组织"><a href="#植物的组织" class="headerlink" title="植物的组织"></a>植物的组织</h3><p>分生组织，分生细胞不断分裂分化，是成熟植物体还能不断生长的原因。</p><p>植物组织有，分生组织，保护组织，机械组织，输导组织，营养组织。</p><h3 id="绿色开花植物的器官"><a href="#绿色开花植物的器官" class="headerlink" title="绿色开花植物的器官"></a>绿色开花植物的器官</h3><p>根、茎、叶、花、果实、种子。</p><h4 id="营养器官"><a href="#营养器官" class="headerlink" title="营养器官"></a>营养器官</h4><p>根、茎、叶</p><h4 id="生殖器官"><a href="#生殖器官" class="headerlink" title="生殖器官"></a>生殖器官</h4><p>花、果实、种子</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>英语语法</title>
      <link href="/2022/07/07/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/07/07/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="英语语法"><a href="#英语语法" class="headerlink" title="英语语法"></a>英语语法</h1><h2 id="词法"><a href="#词法" class="headerlink" title="词法"></a>词法</h2><p>词法研究单词的词义和词性。<br>词义，一词多义，在日常的词汇量积累中掌握即可，因此略过。<br>比如中文的<code>包袱</code>：①用布包起来的衣物包裹;②精神上的负担。</p><p>这里我们主要讲词性。词性分为实词和虚词。</p><h3 id="实词"><a href="#实词" class="headerlink" title="实词"></a>实词</h3><h4 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h4><h4 id="副词"><a href="#副词" class="headerlink" title="副词"></a>副词</h4><h4 id="动词"><a href="#动词" class="headerlink" title="动词"></a>动词</h4><h5 id="谓语动词"><a href="#谓语动词" class="headerlink" title="谓语动词"></a>谓语动词</h5><h6 id="时态"><a href="#时态" class="headerlink" title="时态"></a>时态</h6><h6 id="语态"><a href="#语态" class="headerlink" title="语态"></a>语态</h6><h6 id="语气"><a href="#语气" class="headerlink" title="语气"></a>语气</h6><h6 id="主谓一致"><a href="#主谓一致" class="headerlink" title="主谓一致"></a>主谓一致</h6><h5 id="非谓语动词"><a href="#非谓语动词" class="headerlink" title="非谓语动词"></a>非谓语动词</h5><h6 id="不定式"><a href="#不定式" class="headerlink" title="不定式"></a>不定式</h6><h6 id="动名词"><a href="#动名词" class="headerlink" title="动名词"></a>动名词</h6><h6 id="分词（现在分词、过去分词）"><a href="#分词（现在分词、过去分词）" class="headerlink" title="分词（现在分词、过去分词）"></a>分词（现在分词、过去分词）</h6><h4 id="数词"><a href="#数词" class="headerlink" title="数词"></a>数词</h4><h4 id="形容词"><a href="#形容词" class="headerlink" title="形容词"></a>形容词</h4><h3 id="虚词"><a href="#虚词" class="headerlink" title="虚词"></a>虚词</h3><h4 id="冠词"><a href="#冠词" class="headerlink" title="冠词"></a>冠词</h4><h4 id="代词"><a href="#代词" class="headerlink" title="代词"></a>代词</h4><h4 id="介词"><a href="#介词" class="headerlink" title="介词"></a>介词</h4><h4 id="连词"><a href="#连词" class="headerlink" title="连词"></a>连词</h4><h4 id="感叹词"><a href="#感叹词" class="headerlink" title="感叹词"></a>感叹词</h4><h2 id="句法"><a href="#句法" class="headerlink" title="句法"></a>句法</h2><h3 id="简单句"><a href="#简单句" class="headerlink" title="简单句"></a>简单句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.主语 + 不及物动词 (S + Vi)</span><br><span class="line"></span><br><span class="line">​2.主语 + 及物动词 + 宾语 (S + Vt + O)</span><br><span class="line"></span><br><span class="line">​3.主语 + 连系动词 + 表语 (S + V系 + P)</span><br><span class="line"></span><br><span class="line">​4.主语 + 及物动词 + 间接宾语 + 直接宾语 (S + Vt + IO + DO)</span><br><span class="line"></span><br><span class="line">​5.主语 + 及物动词 + 宾语 + 宾语补足语 (S + Vt + O + OC)</span><br></pre></td></tr></table></figure><blockquote><p>①句型：句子的谓语动词都能表达完整的意思。这类动词叫做不及物动词，后面可以跟副词、介词短语、状语从句等</p><p>②句型：谓语动词都具有实义，都是主语产生的动作，但不能表达完整的意思，必须跟有一个宾语，动作的承受者，才能使意思完整。这类动词叫做及物动词。</p><p>③句型：句子谓语动词都不能表达一个完整的意思，必须加上一个表明主语身份或状态的表语构成复合谓语，才能表达完整的意思。这类动词叫做连系动词。表语也就是主语的补足语</p><p>④句型：有些及物动词可以有两个宾语,这两个宾语通常一个指人(间接宾语)；一个指物(直接宾语)</p><p>⑤句型：动词虽然是及物动词，但是只跟一个宾语还不能表达完整的意思，必须加上一个补充成分来补足宾语，才能使意思完整。</p><p>宾语补足语：位于宾语之后对宾语作出说明的成分。可以用作宾语补足语的有：名词，形容词，不定式，动名词，分词，介词短语等。</p></blockquote><h3 id="并列句"><a href="#并列句" class="headerlink" title="并列句"></a>并列句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">简单句 + **并列连词and,or,but,for等拼接** = 并列句</span><br></pre></td></tr></table></figure><blockquote><p>由并列连词连接、含有两个或更多主谓结构的句子叫并列句。</p></blockquote><h3 id="省略句"><a href="#省略句" class="headerlink" title="省略句"></a>省略句</h3><p>简单句 + <strong>省略主语和谓语的一些成分</strong> &#x3D; 省略句</p><h3 id="倒装句"><a href="#倒装句" class="headerlink" title="倒装句"></a>倒装句</h3><p>简单句 + <strong>主语谓语适当颠倒</strong> &#x3D; 倒装句</p><blockquote><p>倒装句分为完全倒装&amp;不完全倒装</p></blockquote><h3 id="主从复合句"><a href="#主从复合句" class="headerlink" title="主从复合句"></a>主从复合句</h3><p>简单句 + <strong>从属连词</strong> &#x3D; 主从复合句</p><blockquote><p>主从复合句细分</p><ul><li>名词性从句（主语从句、宾语从句、表语从句、同位语从句）</li><li>定语从句（限制性定语从句、非限制性定语从句）</li><li>状语从句（时间、地点、原因、结果、方式、目的、条件、让步、比较，【9种】）</li></ul></blockquote><h3 id="独立主格结构（未完待续）"><a href="#独立主格结构（未完待续）" class="headerlink" title="独立主格结构（未完待续）"></a>独立主格结构（未完待续）</h3><h3 id="强调句型（未完待续）"><a href="#强调句型（未完待续）" class="headerlink" title="强调句型（未完待续）"></a>强调句型（未完待续）</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>移动光猫DT741-csg</title>
      <link href="/2022/06/28/%E7%A7%BB%E5%8A%A8%E5%85%89%E7%8C%ABDT741-csg/"/>
      <url>/2022/06/28/%E7%A7%BB%E5%8A%A8%E5%85%89%E7%8C%ABDT741-csg/</url>
      
        <content type="html"><![CDATA[<h1 id="移动光猫DT741-csg"><a href="#移动光猫DT741-csg" class="headerlink" title="移动光猫DT741-csg"></a>移动光猫DT741-csg</h1><h2 id="登录最高权限"><a href="#登录最高权限" class="headerlink" title="登录最高权限"></a>登录最高权限</h2><p>超级账号：<code>admin</code></p><p>密码：<code>Cmcc10086#</code></p><p>位置坐标：0771</p><p>在登录页面可以直接用下面的脚本在浏览器控制台注入，登录管理员账号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;username&#x27;</span>).<span class="property">value</span>=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;logincode&#x27;</span>).<span class="property">value</span>=<span class="string">&#x27;Cmcc10086#&#x27;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;showpassword&#x27;</span>).<span class="property">style</span>.<span class="property">display</span>=<span class="string">&#x27;block&#x27;</span>;</span><br><span class="line"><span class="title function_">dosubmit</span>();</span><br></pre></td></tr></table></figure><h2 id="开启ipv6连接"><a href="#开启ipv6连接" class="headerlink" title="开启ipv6连接"></a>开启ipv6连接</h2><p>略</p><h2 id="关闭ipv6防火墙"><a href="#关闭ipv6防火墙" class="headerlink" title="关闭ipv6防火墙"></a>关闭ipv6防火墙</h2><p>安全 → 防火墙 → IPv6Session防火墙开关</p><h2 id="ipv6可玩性"><a href="#ipv6可玩性" class="headerlink" title="ipv6可玩性"></a>ipv6可玩性</h2><h3 id="远程桌面"><a href="#远程桌面" class="headerlink" title="远程桌面"></a>远程桌面</h3><p>可以PC远程PC，也可以Android远程PC</p><p><strong>1）PC远程PC</strong></p><p>cmd <code>mstsc</code></p><p>主机：<code>ipv6地址</code></p><p>用户名：略</p><p>密码：略</p><p><strong>2）Android远程PC</strong></p><p>手机需要安装<code>RD Client</code></p><p>pc name：<code>ipv6地址</code></p><h3 id="访问ipv6项目"><a href="#访问ipv6项目" class="headerlink" title="访问ipv6项目"></a>访问ipv6项目</h3><p>访问者支持ipv6才能访问ipv6项目</p><p><a href="http://[2409:8a5c:1421:19f0:94ec:9d:2f18:7c95]:8080/">http://[2409:8a5c:1421:19f0:94ec:9d:2f18:7c95]:8080/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>软件测试</title>
      <link href="/2022/06/28/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
      <url>/2022/06/28/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="软件测试"><a href="#软件测试" class="headerlink" title="软件测试"></a>软件测试</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>软件测试的首要目的就是提高软件的质量。</p><h2 id="开发自测时使用的技术"><a href="#开发自测时使用的技术" class="headerlink" title="开发自测时使用的技术"></a>开发自测时使用的技术</h2><h3 id="postman"><a href="#postman" class="headerlink" title="postman"></a>postman</h3><p>postman接口测试工具，新建请求后，输入请求，raw-json，把json格式的报文一贴，请求后观察等待响应就好了。</p><h3 id="junit"><a href="#junit" class="headerlink" title="junit"></a>junit</h3><p>tdd 测试驱动开发(Test-Driven Development)<br>把需求拆分成方法，尝试把方法流程图画出来，提出输出假设，确定输入内容，需要判断的条件，需要处理的异常，确定输出内容，编写并测试验证提出的假设。<br>可以理解成，我希望这个方法（接口）给我返回什么数据，我需要在使用方法（接口）时输入什么规则的数据，而方法中业务流程的正确性就是编码内容。</p><p>例如：一个判断是否是偶数的方法<br>最开始时，UserService是没有方法的实现的，先在UserService类名上使用ALT + Insert生成UserServiceTest测试类<br>UserServiceTest测试类中使用ALT + Insert 生成@Test测试方法<br>assert断言假设方法的返回值<br>方法可以在测试类中先userService.evenNumber再ALT + Enter在原非测试类中生成evenNumber方法进行编码实现<br>assertEquals将断言值与方法的返回值比较，相同则测试通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">evenNumber</span><span class="params">(<span class="type">int</span> i)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=<span class="number">0</span> &amp;&amp; i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">evenNumberTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line">        assertAll(</span><br><span class="line">                ()-&gt; assertEquals(<span class="literal">true</span>,userService.evenNumber(<span class="number">0</span>)), <span class="comment">//when i &gt;= 0 and i%2==0</span></span><br><span class="line">                ()-&gt; assertEquals(<span class="literal">false</span>,userService.evenNumber(<span class="number">3</span>)), <span class="comment">//when i &gt;= 0 and i%2!=0</span></span><br><span class="line">                ()-&gt; assertThrows(Exception.class,()-&gt; &#123;userService.evenNumber(-<span class="number">2</span>);&#125;) <span class="comment">//when i &lt; 0</span></span><br><span class="line"><span class="comment">//                ()-&gt; assertTimeout() 方法运行超出规定时间则测试不通过</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-Mock自测单元"><a href="#Spring-Mock自测单元" class="headerlink" title="Spring-Mock自测单元"></a>Spring-Mock自测单元</h3><p>Spring-Mock插件可以在开发spring项目时结合junit进行开发自测，模拟request，测试带request的方法就方便多了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 别忘了导包</span></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mock.web.MockHttpServletRequest;</span><br><span class="line"><span class="type">MockHttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MockHttpServletRequest</span>();</span><br></pre></td></tr></table></figure><h3 id="Fiddler抓包"><a href="#Fiddler抓包" class="headerlink" title="Fiddler抓包"></a>Fiddler抓包</h3><p>抓包，获取web软件请求响应的内容，帮助分析web系统的质量，观察涉密字段明文传输，系统的请求时间等。</p><h3 id="Acunetix漏洞扫描"><a href="#Acunetix漏洞扫描" class="headerlink" title="Acunetix漏洞扫描"></a>Acunetix漏洞扫描</h3><p>扫描web系统的漏洞……开发噩梦</p><h2 id="从开发到测试"><a href="#从开发到测试" class="headerlink" title="从开发到测试"></a>从开发到测试</h2><p>为了确保我们开发完的软件是我们想要开发的软件，开发完后都会进行自我测试。</p><p>功能测试、可用性测试、界面测试、数据库测试，用心的开发一般在开发自测阶段就已经包含在开发自测阶段且测试通过了。</p><p>但是因为开发人员的数量和精力等限制，单靠开发者自己是无法完成其他：性能测试、兼容性测试、安全性测试、呼叫外包测试……诸如此类的测试的。</p><p>下面就来讲讲开发自测无法涵盖到的其他种类测试如何展开。</p><h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><p>生不逢时，学校教学的都还是单体应用，与当今企业级项目流行的集群、分布式、高并发、微服务……都不沾边。</p><p>其实企业级项目也是由单体应用一步步升级过来的，可能你的小项目只是缺少了性能测试。</p><h4 id="性能测试的目的"><a href="#性能测试的目的" class="headerlink" title="性能测试的目的"></a>性能测试的目的</h4><p>通过<code>测试系统或接口的性能瓶颈</code>，从而可以实现以下目的：<br>系统峰值稳定性<br>系统内新功能上线的性能影响<br>验证技术架构升级对性能的提升<br>性能调优<br>物理机网络和硬件资源相对于该软件系统的性价比规划</p><p>借培训机构老师吉言：三百个并发，三千个并发，三万个并发，三十万个并发，乃至三百万个并发的方式我都会教到你</p><h4 id="常用性能测试软件"><a href="#常用性能测试软件" class="headerlink" title="常用性能测试软件"></a>常用性能测试软件</h4><p><strong>Loadrunner, JMeter</strong></p><h4 id="使用案例-接口性能测试-测试用例"><a href="#使用案例-接口性能测试-测试用例" class="headerlink" title="使用案例 接口性能测试 测试用例"></a>使用案例 接口性能测试 测试用例</h4><ul><li>性能指标</li></ul><p>并发量：我们通常指的是相对并发量<br>相对并发量，如一秒内500个请求数量，500&#x2F;s<br>绝对并发量，某一时刻的请求数量</p><p>吞吐量：单位时间(s)内处理请求的数量，一秒内有多少数量的请求响应<br>QPS(QueryPS)数据查询吞吐量、TPS(TransactionPS)事务操作吞吐量</p><p>响应时间：从请求开始到响应结束的完整时间</p><p>期望结果，吞吐量&gt;&#x3D;并发量</p><ul><li>性能测试针对的目标接口</li><li>性能测试环境<br>在无法对生产环境停机测试时（对用户关闭服务，仅限测试使用），我们需要复刻一个关于生产环境的性能测试环境，<code>完美复刻</code>，<code>物理机数量下降复刻</code><br>比如预期结果 10W&#x2F;s 的并发，20台机<br><code>完美复刻</code><br>预期结果 10W&#x2F;s 的并发，20台机，负载均衡后平均一台机要受到5000&#x2F;s并发<br><code>物理机数量下降复刻</code><br>一台机5000&#x2F;s并发</li></ul><h5 id="负载测试"><a href="#负载测试" class="headerlink" title="负载测试"></a>负载测试</h5><p>不断加大并发，直到系统不满足需求的性能指标，出现性能瓶颈，拐点（通过性能指标监控的拐点得知性能瓶颈）<br><code>期望结果</code><br>得到系统承载的极限并发</p><p><code>测试步骤</code><br>设计线程数量，我们直接设计一秒5000个线程不就好了？可以，但是我们在测试时很难绝对控制5000&#x2F;s的并发数量</p><p>通常使用下面公式来设计线程数量<br>如，当并发时间单位是&#x2F;s秒时<br><code>线程数量</code> * 单次请求到响应消耗的时间 &#x3D; 1s<br><code>线程数量</code> &#x3D; 并发时间单位(1s) &#x2F; 单次请求到响应消耗的时间</p><p>通过jmeter、多线程代码等手段负载测试，慢慢增加，最终达到设计的线程数量</p><h5 id="压力测试（稳定性测试）"><a href="#压力测试（稳定性测试）" class="headerlink" title="压力测试（稳定性测试）"></a>压力测试（稳定性测试）</h5><p>极限并发下，系统能否稳定</p><h3 id="Jmeter-负载测试实战"><a href="#Jmeter-负载测试实战" class="headerlink" title="Jmeter 负载测试实战"></a>Jmeter 负载测试实战</h3><p>安装Jmeter，略……</p><p>需要在官网下载<a href="https://jmeter-plugins.org/install/Install/">plugins-manager.jar</a>，放在jmeter安装路径的lib&#x2F;ext目录，然后重启Jemeter</p><p>打开插件管理，安装Custom Thread Groups插件<br><img src="/img/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/2023-03-12-21-56-34.png" alt="打开插件管理"><br>安装Custom Thread Groups插件，并重启<br><img src="/img/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/2023-03-12-22-00-00.png"><br>可能因网络原因下载失败，多试几次或者科学下载</p><h2 id="搭建性能指标监控"><a href="#搭建性能指标监控" class="headerlink" title="搭建性能指标监控"></a>搭建性能指标监控</h2><h3 id="prometheus-数据源"><a href="#prometheus-数据源" class="headerlink" title="prometheus 数据源"></a>prometheus 数据源</h3><p>先下载 prometheus 数据源<br>默认配置解压进入文件夹后直接使用命令<code>./prometheus</code>启动即可<br>Prometheus界面<br><a href="http://localhost:9090/">http://localhost:9090</a><br><img src="/img/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/2023-03-12-19-59-22.png" alt="Prometheus界面"></p><h3 id="Grafana-监控面板"><a href="#Grafana-监控面板" class="headerlink" title="Grafana 监控面板"></a>Grafana 监控面板</h3><p>安装后使用<code>service grafana-server start</code>命令启动<br>如果是解压版的可以用<code>grafana-server web</code>启动<br>管理员账号密码默认是admin&#x2F;admin<br>首次登陆需要修改管理员密码<br>Grafana界面<br><a href="http://localhost:3000/">http://localhost:3000/</a><br>设置添加 prometheus数据源<br><img src="/img/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/2023-03-12-20-11-09.png" alt="添加 prometheus数据源"></p><p>此时可以添加dashboard，也就是监控面板了，在刚配好的Prometheus Data Source的设置中有一个标签就是dashboard，我们导入Prometheus 2.0 Stats这个面板，就能看到我们Prometheus的一些基本监控情况了，这其实就是导入了一个别人写好的面板配置，并且连接我们自己Prometheus的监控数据做展示。<br><img src="/img/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/2023-03-12-20-25-39.png" alt="添加面板"></p><h3 id="添加-exporter"><a href="#添加-exporter" class="headerlink" title="添加 exporter"></a>添加 exporter</h3><p>监控机器的状态，包括硬盘、CPU、流量等。因为Prometheus已经有了很多现成的常用exporter，所以我们直接用其中的<a href="https://github.com/prometheus/node_exporter/releases">node_exporter</a>。这是将一个个机器抽象成节点监控，和nodejs没关系<br><code>./node_exporter</code>运行节点监控采集服务</p><p>修改prometheus的配置文件，以添加node_exporter</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&quot;prometheus&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># metrics_path defaults to &#x27;/metrics&#x27;</span></span><br><span class="line">    <span class="comment"># scheme defaults to &#x27;http&#x27;.</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&quot;localhost:9090&quot;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&quot;node_server&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&quot;localhost:9100&quot;</span>]</span><br></pre></td></tr></table></figure><p>改完prometheus的配置文件后，重新运行prometheus<br><img src="/img/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/2023-03-12-20-38-35.png" alt="添加 exporter"></p><h3 id="jmeter和grafana"><a href="#jmeter和grafana" class="headerlink" title="jmeter和grafana"></a>jmeter和grafana</h3><p>在使用jmeter测试时，可以使用grafana监控jmeter的工作，更清晰直观<br><code>jmeter + influxdb + grafana</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux入门</title>
      <link href="/2022/06/21/Linux%E5%85%A5%E9%97%A8/"/>
      <url>/2022/06/21/Linux%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux入门"><a href="#Linux入门" class="headerlink" title="Linux入门"></a>Linux入门</h1><h2 id="linux包管理器"><a href="#linux包管理器" class="headerlink" title="linux包管理器"></a>linux包管理器</h2><table><thead><tr><th>操作系统</th><th>格式</th><th>工具</th></tr></thead><tbody><tr><td>Debian</td><td>.deb</td><td>apt, apt-cache, apt-get, dpkg</td></tr><tr><td>Ubuntu</td><td>.deb</td><td>apt, apt-cache, apt-get, dpkg</td></tr><tr><td>CentOS</td><td>.rpm</td><td>yum</td></tr><tr><td>Fedora</td><td>.rpm</td><td>dnf</td></tr><tr><td>FreeBSD</td><td>Ports, .txz</td><td>make, pkg</td></tr></tbody></table><h2 id="日志保存和打印"><a href="#日志保存和打印" class="headerlink" title="日志保存和打印"></a>日志保存和打印</h2><p>运行并将日志按时间<code>年月日</code>命名，处理后的文件名是<code>ayao-年月日.log</code>即格式化后：<code>ayao-19990203.log</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> java-jar ayao.jar &gt;&gt; ./ayao-`<span class="built_in">date</span> +<span class="string">&quot;%Y%m%d&quot;</span>`.<span class="built_in">log</span> &amp;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>移动魔百盒CM311-5s安装第三方桌面</title>
      <link href="/2022/06/19/%E7%A7%BB%E5%8A%A8%E9%AD%94%E7%99%BE%E7%9B%92CM311-5s%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A1%8C%E9%9D%A2/"/>
      <url>/2022/06/19/%E7%A7%BB%E5%8A%A8%E9%AD%94%E7%99%BE%E7%9B%92CM311-5s%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A1%8C%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="移动魔百盒CM311-5s安装第三方桌面"><a href="#移动魔百盒CM311-5s安装第三方桌面" class="headerlink" title="移动魔百盒CM311-5s安装第三方桌面"></a>移动魔百盒CM311-5s安装第三方桌面</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>移动魔百盒CM311-5s，支持wifi，蓝牙，蓝牙语音遥控，但是<code>盒子生态过于封闭</code>，目前还没有适配的刷机包，所以有了安装第三方桌面的想法。</p><p>商品名称：魔百和CM311-5s<br>商品编号：100035117726<br>商品毛重：200.00g<br>商品产地：中国大陆<br>功能：Wi-Fi，教育CPU<br>核心数：四核<br>网口规格：百兆网口<br>投屏协议：不支持<br>专属模式：其他<br>Wi-Fi连接：双频Wi-Fi 5<br>内容源：其他<br>输出分辨率：1080P<br>遥控器：红外遥控</p><h2 id="准备工作与思路"><a href="#准备工作与思路" class="headerlink" title="准备工作与思路"></a>准备工作与思路</h2><p>能开热点的windows、mac或linux系统，因为需要利用hosts文件的特性，将配置的域名解析到hosts指定的IP地址。</p><p>利用盒子播放某些视频时会请求固定的域名触发自动下载安装<code>咪咕极速.apk</code>的特性。</p><p>将gamedownload.taipan.bja.bcs.ottcn.com域名解析到新指定的IP地址175.24.235.166</p><p>这个新ip目录下含有楼主设置的一个<code>当贝应用.apk</code>文件</p><p>原本对gamedownload.taipan.bja.bcs.ottcn.com的解析将会由<code>咪咕极速版.apk</code>，转变为<code>当贝应用.apk</code></p><h2 id="开始工作与实践"><a href="#开始工作与实践" class="headerlink" title="开始工作与实践"></a>开始工作与实践</h2><p>（1）<strong>修改电脑<code>hosts</code>文件</strong></p><p>需要管理员身份打开hosts文件，具体路径：<code>C:\Windows\System32\drivers\etc</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在下面添加一行（这个ip目录下含有楼主设置的一个当贝应用apk文件）：</span></span><br><span class="line"><span class="number">175.24</span>.<span class="number">235.166</span> gamedownload.taipan.bja.bcs.ottcn.com</span><br></pre></td></tr></table></figure><p>保存后记得在cmd使用命令刷新<code>ipconfig /flushdns</code></p><p>（2）<strong>使用安卓手机连接测试</strong></p><p>使用安卓手机连接修改hosts完毕后电脑开的热点并访问链接<a href="http://gamedownload.taipan.bja.bcs.ottcn.com/upgrade/nams/app/1269/1649925894696migujisu-beijing.apk">http://gamedownload.taipan.bja.bcs.ottcn.com/upgrade/nams/app/1269/1649925894696migujisu-beijing.apk</a></p><p>将会得到一个16M大小的<code>apk</code>文件，查看安装包图标或安装后确认是<code>当贝应用.apk</code>，说明前面的hosts修改已经生效。<br>（3）<strong>使用魔百盒复现手机连接的测试结果</strong><br>首先，确保之前魔百盒内没有安装<code>咪咕极速</code>，可以使用遥控蓝牙语音口令<code>卸载咪咕极速</code>将咪咕极速卸载。<br>后面可能要看脸了，因为要访问一个能触发下载安装咪咕极速（那个域名）的视频，或者说你记得有哪些视频可以触发咪咕极速的下载，也可以直接搜索后访问，等安装咪咕极速的提示走完，顺利的话你的魔百盒内已将<code>当贝应用</code>安装进去。</p><p>（4）<strong>配置与使用</strong></p><p>遥控蓝牙语音指令<code>打开当贝桌面</code>，即可进入当贝桌面。</p><p>遥控蓝牙语音指令<code>打开桌面</code>，也可以点击遥控的<code>主页</code>按钮，即可进入桌面选择，选择原装系统桌面和当贝桌面。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>感谢原楼主提供的当贝桌面资源ip服务，大家快去白嫖。<a href="CM311-5s%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A1%8C%E9%9D%A2%5Bhttps://www.right.com.cn/forum/forum.php?mod=viewthread&tid=8237740%5D">^1</a></p><p>我们可以自己抓取电视盒子访问安装软件的请求地址，根据抓来的请求地址架设一套服务，修改hosts解析到架设的ip服务，再请求域名解析访问到修改hosts后架设的ip服务即可。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>gitea版本管理</title>
      <link href="/2022/06/17/gitea%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
      <url>/2022/06/17/gitea%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="gitea版本管理"><a href="#gitea版本管理" class="headerlink" title="gitea版本管理"></a>gitea版本管理</h1><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>略……</p><h2 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h2><p>需要有MySQL、PostgreSQL、MSSQL 或 SQLite3其中一个用于gitea存储数据，目前我用Mariadb也不是不行，略……</p><h2 id="获取gitea"><a href="#获取gitea" class="headerlink" title="获取gitea"></a>获取gitea</h2><p>从<code>https://dl.gitea.io/gitea</code>找到适配您系统的二进制安装地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget -O gitea https://dl.gitea.io/gitea/1.16.8/gitea-1.16.8-linux-arm64</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">curl -O https://dl.gitea.io/gitea/1.16.8/gitea-1.16.8-linux-arm64</span><br><span class="line"><span class="comment"># 设置运行权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x gitea</span><br></pre></td></tr></table></figure><h2 id="初始化和配置gitea"><a href="#初始化和配置gitea" class="headerlink" title="初始化和配置gitea"></a>初始化和配置gitea</h2><p>在安装目录下使用<code>./gitea web</code>启动gitea，访问<code>localhost:3000</code>即可访问gitea，首次进入还可以进行配置，后续可以在gitea所在的目录内的<code>/custom/conf/app.ini</code>修改配置</p><h2 id="初始化或运行失败"><a href="#初始化或运行失败" class="headerlink" title="初始化或运行失败"></a>初始化或运行失败</h2><p>gitea不允许以root用户启动，需要切换到另外的用户运行，我们使用<code>useradd hyao</code>添加新的linux用户。</p><p>检查<code>app.ini</code>的<code>RUN_USER</code>是否为非root用户。</p><h2 id="push失败"><a href="#push失败" class="headerlink" title="push失败"></a>push失败</h2><p>为hyao用户的git设置用户名和邮箱<code>vim ~/.gitconfig</code></p><h2 id="设置gitea自启动"><a href="#设置gitea自启动" class="headerlink" title="设置gitea自启动"></a>设置gitea自启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su - hyao -c /usr/local/git-workspace/gitea web</span><br><span class="line"><span class="comment"># 切换到非root用户hyao并运行安装目录下的gitea</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>联想Z5刷机</title>
      <link href="/2022/06/11/%E8%81%94%E6%83%B3Z5%E5%88%B7%E6%9C%BA/"/>
      <url>/2022/06/11/%E8%81%94%E6%83%B3Z5%E5%88%B7%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="联想Z5刷机"><a href="#联想Z5刷机" class="headerlink" title="联想Z5刷机"></a>联想Z5刷机</h1><h2 id="开启USB调试"><a href="#开启USB调试" class="headerlink" title="开启USB调试"></a>开启USB调试</h2><p>设置-系统-关于本机-ZUI版本</p><p>连续点击多次<code>ZUI版本</code>开启开发者模式</p><p>设置-系统-开发者选项-调试-USB调试</p><p><code>开启USB调试</code></p><h2 id="安装PC端驱动和9008刷机工具"><a href="#安装PC端驱动和9008刷机工具" class="headerlink" title="安装PC端驱动和9008刷机工具"></a>安装PC端驱动和9008刷机工具</h2><ul><li>9008通用驱动</li><li>9008刷机工具（QPST.WIN.2.7.451.2）</li><li>USB端口补丁（好像是为了适配USB3.0）</li><li>联想USB驱动（LenovoUsbDriver_1.0.0.exe）</li></ul><h2 id="确认连接是否成功"><a href="#确认连接是否成功" class="headerlink" title="确认连接是否成功"></a>确认连接是否成功</h2><h3 id="无法识别的USB设备"><a href="#无法识别的USB设备" class="headerlink" title="无法识别的USB设备"></a>无法识别的USB设备</h3><p><code>！跟这台计算机连接的前一个USB设备工作不正常，Windows无法识别它。</code></p><p>win7及以上，更改高级电源设置，确保<code>USB选择性暂停设置已禁用</code></p><h2 id="进入官方rec的方法"><a href="#进入官方rec的方法" class="headerlink" title="进入官方rec的方法"></a>进入官方rec的方法</h2><p>联想Z5进入recovery模式的方法</p><p>手机关机后，按住<code>音量加</code>，接上充电线，直到进入机器人倒地松开按键，这时可以拔掉数据线。然后按住<code>电源键</code>的同时短按一下<code>音量加</code>即可进入rec。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nodejs入门</title>
      <link href="/2022/06/05/nodejs%E5%85%A5%E9%97%A8/"/>
      <url>/2022/06/05/nodejs%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="nodejs入门"><a href="#nodejs入门" class="headerlink" title="nodejs入门"></a>nodejs入门</h1><p>nodejs是基于chrome V8引擎的可以脱离浏览器运行的js。</p><h2 id="下载安装和环境配置"><a href="#下载安装和环境配置" class="headerlink" title="下载安装和环境配置"></a>下载安装和环境配置</h2><p>这里介绍解压版的环境配置<br>node集成了npm包管理器，我们可以在解压的根目录下新建这两个文件夹<code>node-global</code>，<code>node-cache</code>方便后面的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PATH 设置为node和npm可执行文件所在路径</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:/opt/node_v8/bin&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:/opt/node_v8/node_global&quot;</span></span><br><span class="line"><span class="comment"># 现在可以在命令行中用 npm -v和 node -v测试一下是否安装成功</span></span><br><span class="line"><span class="comment">#为npm配置global和cache</span></span><br><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;/opt/node_v8/node_global&quot;</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;/opt/node_v8/node_cache&quot;</span></span><br></pre></td></tr></table></figure><h2 id="第一个nodejs程序"><a href="#第一个nodejs程序" class="headerlink" title="第一个nodejs程序"></a>第一个nodejs程序</h2><p>创建<code>hello.js</code>，内容如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello.js run&#x27;</span>); <span class="comment">// hello.js run</span></span><br></pre></td></tr></table></figure><p>运行hello.js</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 两个命令都可以运行</span></span><br><span class="line">node hello.js</span><br><span class="line">node hello</span><br></pre></td></tr></table></figure><h2 id="nodejs作为服务端"><a href="#nodejs作为服务端" class="headerlink" title="nodejs作为服务端"></a>nodejs作为服务端</h2><p>与Java的import类似，nodejs使用<code>require</code>导包</p><p>创建<code>nodeServer.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nodeServer.js</span></span><br><span class="line"><span class="comment">// 导入http的包</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建一个httpserver服务，设置服务端响应内容，监听8888端口。</span></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span>(<span class="params">request,response</span>)&#123;</span><br><span class="line">    response.<span class="title function_">writeHead</span>(<span class="number">200</span>,&#123;<span class="string">&#x27;Content-type&#x27;</span>:<span class="string">&#x27;text/plain&#x27;</span>&#125;);</span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;Welcome to  nodejs server&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">8888</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;nodejs server http://localhost:8888&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node nodeServer.js</span><br></pre></td></tr></table></figure><p>浏览器访问<br><a href="http://localhost:8888/">http://localhost:8888</a> 能看到<code>Welcome to  nodejs server</code>就是成功了。</p><h2 id="nodejs连接Mysql数据库"><a href="#nodejs连接Mysql数据库" class="headerlink" title="nodejs连接Mysql数据库"></a>nodejs连接Mysql数据库</h2><p>安装mysql驱动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mysql</span><br></pre></td></tr></table></figure><p>新建<code>database.js</code>连接mysql数据库</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">  host     : <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  user     : <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  password : <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">  database : <span class="string">&#x27;test&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">connection.<span class="title function_">connect</span>();</span><br><span class="line"> </span><br><span class="line">connection.<span class="title function_">query</span>(<span class="string">&#x27;SELECT 1 + 1 AS solution&#x27;</span>, <span class="keyword">function</span> (<span class="params">error, results, fields</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;The solution is: &#x27;</span>, results[<span class="number">0</span>].<span class="property">solution</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">connection.<span class="title function_">end</span>();</span><br></pre></td></tr></table></figure><h2 id="Es6常用特性"><a href="#Es6常用特性" class="headerlink" title="Es6常用特性"></a>Es6常用特性</h2><h3 id="let和const"><a href="#let和const" class="headerlink" title="let和const"></a>let和const</h3><p><code>let</code>定义变量，<code>const</code>定义常量</p><p>let就是为定义局部变量而生的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;孙行者&#x27;</span>;</span><br><span class="line"><span class="comment">// 常量</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="title class_">Math</span>.<span class="property">PI</span>;</span><br></pre></td></tr></table></figure><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;李大明&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//es6模板字符串</span></span><br><span class="line"><span class="keyword">let</span> newStr = <span class="string">`我是<span class="subst">$&#123;person.name&#125;</span>，今年<span class="subst">$&#123;person.age&#125;</span>岁`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传统拼接</span></span><br><span class="line"><span class="keyword">let</span> oldStr = <span class="string">&#x27;我是&#x27;</span>+person.<span class="property">name</span>+<span class="string">&#x27;，今年&#x27;</span>+person.<span class="property">age</span><span class="string">&#x27;岁&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置参数默认值a=100,b=3</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a=<span class="number">100</span>,b=<span class="number">3</span></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">sun</span>(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统函数</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 箭头函数 去掉function用箭头</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">sum</span> = (<span class="params">a,b</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 箭头函数 去掉return</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">sum</span> = (<span class="params">a,b</span>)=&gt;</span><br><span class="line">    a+b;</span><br></pre></td></tr></table></figure><p><code>如果return前有代码块则不能去掉return</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> obj*<span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数 只有一个参数时可以去掉括号()</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">map</span>(<span class="function"><span class="params">obj</span>=&gt;</span>obj*<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//觉得可读性有点差可以尝试还原一下</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">map</span>(<span class="function">(<span class="params">obj</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj*<span class="number">2</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="对象简写"><a href="#对象简写" class="headerlink" title="对象简写"></a>对象简写</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统对象</span></span><br><span class="line"><span class="keyword">var</span> data=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;孙行者&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">skill</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会打妖怪&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// es6对象</span></span><br><span class="line"><span class="comment">// 对象内容是以key:value存在的</span></span><br><span class="line"><span class="comment">// key和value变量名相同时，可只定义一次</span></span><br><span class="line"><span class="comment">// value是函数时，可以去掉:function</span></span><br><span class="line"><span class="keyword">let</span> name=<span class="string">&#x27;孙行者&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> data=&#123;</span><br><span class="line">    name,</span><br><span class="line">    age,</span><br><span class="line">    <span class="title function_">skill</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会打妖怪&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;孙行者&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">skill</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会打妖怪&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取对象的属性和方法 传统方法</span></span><br><span class="line"><span class="keyword">var</span> name = data.<span class="property">name</span>;</span><br><span class="line"><span class="keyword">var</span> age = data.<span class="property">age</span>;</span><br><span class="line"><span class="keyword">var</span> skill = data.<span class="title function_">skill</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = data[<span class="string">&quot;name&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> age = data[<span class="string">&quot;age&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> skill = data[<span class="string">&quot;skill&quot;</span>]();</span><br><span class="line"><span class="comment">// 获取对象的属性和方法 es6</span></span><br><span class="line"><span class="keyword">var</span> &#123;name,age,skill&#125; = data;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">var</span> name = data.<span class="property">name</span>;</span><br><span class="line"><span class="keyword">var</span> age = data.<span class="property">age</span>;</span><br><span class="line"><span class="keyword">var</span> skill = data.<span class="title function_">skill</span>();</span><br></pre></td></tr></table></figure><h3 id="对象传播操作符…"><a href="#对象传播操作符…" class="headerlink" title="对象传播操作符…"></a>对象传播操作符…</h3><p>对象传播操作符<code>...</code>将前后对象内容拆分解构互补，传播符后将解构为一个新的对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;孙行者&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">skill</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会打妖怪&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在解构时进行对象传播...</span></span><br><span class="line"><span class="keyword">var</span> &#123;skill...person&#125; = data;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">var</span> skill = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会打妖怪&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;孙行者&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Map处理数组"><a href="#Map处理数组" class="headerlink" title="Map处理数组"></a>Map处理数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">map</span>(<span class="function">(<span class="params">obj</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj*<span class="number">2</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理数组对象</span></span><br><span class="line"><span class="keyword">var</span> person = [</span><br><span class="line">    &#123;<span class="attr">age</span>:<span class="number">12</span>,<span class="attr">name</span>:<span class="string">&#x27;大明&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">name</span>:<span class="string">&#x27;玲玲&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">age</span>:<span class="number">24</span>,<span class="attr">name</span>:<span class="string">&#x27;萨姆&#x27;</span>&#125;</span><br><span class="line">    ];</span><br><span class="line"><span class="keyword">var</span> newPerson = person.<span class="title function_">map</span>(<span class="function">(<span class="params">ele</span>)=&gt;</span>&#123;</span><br><span class="line">    ele.<span class="property">age</span> = ele.<span class="property">age</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ele</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="reduce处理数组之和"><a href="#reduce处理数组之和" class="headerlink" title="reduce处理数组之和"></a>reduce处理数组之和</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> result = arr.<span class="title function_">reduct</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="NPM包管理器"><a href="#NPM包管理器" class="headerlink" title="NPM包管理器"></a>NPM包管理器</h2><p>npm是nodejs包管理器，现在安装nodejs后自带npm，相当于前端的Maven。</p><p>npm仓库<a href="https://npmjs.com/">https://npmjs.com</a></p><h3 id="创建基于npm的nodejs工程"><a href="#创建基于npm的nodejs工程" class="headerlink" title="创建基于npm的nodejs工程"></a>创建基于npm的nodejs工程</h3><p>使用<code>npm init</code>，将当前目录设置为工程目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br><span class="line"><span class="comment"># 交互命令操作后将会生成一个package.json</span></span><br><span class="line">npm init -y</span><br><span class="line"><span class="comment"># 或者添加-y参数跳过交互，使用默认设置快速新建工程</span></span><br></pre></td></tr></table></figure><p>可以编辑<code>package.json</code>进行修改</p><h3 id="安装和使用第三方模块依赖驱动"><a href="#安装和使用第三方模块依赖驱动" class="headerlink" title="安装和使用第三方模块依赖驱动"></a>安装和使用第三方模块依赖驱动</h3><p>使用<code>npm install 模块名</code>，安装第三方模块，安装的模块会存放于项目里的<code>node_modules</code>文件夹内</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">npm install mysql</span><br><span class="line"><span class="comment"># 简写</span></span><br><span class="line">npm i mysql</span><br><span class="line"><span class="comment"># 连写</span></span><br><span class="line">npm install mysql jquery</span><br><span class="line"><span class="comment"># 指定版本号</span></span><br><span class="line">npm install jquery@2.1.x</span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">npm uninstall mysql jquery</span><br></pre></td></tr></table></figure><p>如果安装模块很慢，可以安装<code>cnpm</code>后使用<code>cnpm install mysql</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">cnpm install mysql</span><br></pre></td></tr></table></figure><p>使用时要先导入模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入模块</span></span><br><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br></pre></td></tr></table></figure><p>创建项目时生成的<code>package.json</code>中包含了很多信息，安装模块后还会增加<code>dependencies</code>字段记录安装的模块版本号，方便后期复用。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;helloworld&quot;</span><span class="punctuation">,</span> <span class="comment">// 项目名</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;这个开发者已摆烂，什么都没有留下&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span> <span class="comment">//入口</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="comment">// 自定义脚本，使用 npm run test运行</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span> </span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yelowShine&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span> <span class="comment">//开源协议</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;mysql&quot;</span><span class="punctuation">:</span><span class="string">&quot;^2.18.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在工程根目录内已存在<code>package.json</code>的情况下，只需要<code>npm install</code>即可下载<code>dependencies</code>中的全部模块方便复用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="Babel转码"><a href="#Babel转码" class="headerlink" title="Babel转码"></a>Babel转码</h2><p>es6的语法不能直接运行在nodejs的v8引擎中，为了将es6代码转为es5代码，于是Babel诞生了。</p><h3 id="安装Babel"><a href="#安装Babel" class="headerlink" title="安装Babel"></a>安装Babel</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g babel-cli</span><br></pre></td></tr></table></figure><h3 id="配置-babelrc"><a href="#配置-babelrc" class="headerlink" title="配置.babelrc"></a>配置.babelrc</h3><p>项目根目录下新建<code>.babelrc</code>文件，用来设置转码规则和插件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .babelrc</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;presets&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;es2015&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="安装转码器"><a href="#安装转码器" class="headerlink" title="安装转码器"></a>安装转码器</h3><p>安装对应版本转码器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-preset-es2015</span><br></pre></td></tr></table></figure><h3 id="转码并输出"><a href="#转码并输出" class="headerlink" title="转码并输出"></a>转码并输出</h3><p><code>一般地，在src写代码，然后转码输出到dist作为浏览器可执行文件。</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将src目录的所有文件转码后输出到dist目录</span></span><br><span class="line">babel src -d dist</span><br></pre></td></tr></table></figure><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>模块化遵循commonjs规范，最新的标准则是es6规范。目前广泛使用的是es6模块化规范。</p><h3 id="commonjs模块化"><a href="#commonjs模块化" class="headerlink" title="commonjs模块化"></a>commonjs模块化</h3><p>创建一个<code>numUtil.js</code>定义工具方法，<code>module.exports</code>将方法导出为模块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// numUtil.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">a,b</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sub</span> = (<span class="params">a,b</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    sum,</span><br><span class="line">    sub</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>require</code>引入模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="built_in">require</span>(<span class="string">&#x27;./numUtil.js&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">sub</span>(<span class="number">1</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure><h3 id="es6模块化"><a href="#es6模块化" class="headerlink" title="es6模块化"></a>es6模块化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分别暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="title function_">sum</span>(a,b)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="title function_">sub</span>(a,b)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 默认暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="title function_">sum</span>(a,b):&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">sub</span>(a,b):&#123;</span><br><span class="line">        <span class="keyword">return</span> a-b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引入模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入分别暴露</span></span><br><span class="line"><span class="keyword">import</span> &#123;sum,sub&#125; <span class="keyword">from</span> <span class="string">&#x27;./numUtil.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sub</span>(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"><span class="comment">// 引入默认暴露</span></span><br><span class="line"><span class="keyword">import</span> num <span class="keyword">from</span> <span class="string">&#x27;./numUtil.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">sub</span>(<span class="number">1</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure><h2 id="WebPack打包"><a href="#WebPack打包" class="headerlink" title="WebPack打包"></a>WebPack打包</h2><p>WebPack是前端静态资源打包工具，将多种静态资源转换成一个静态文件，减少页面请求，提升安全性。当前很多脚手架如Vue-cli、uniapp内部是集成了WebPack的。</p><p>安装WebPack</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g webpack webpack-cli</span><br></pre></td></tr></table></figure><p>查看WebPack版本号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack -v</span><br></pre></td></tr></table></figure><h3 id="使用WebPack打包合并JS"><a href="#使用WebPack打包合并JS" class="headerlink" title="使用WebPack打包合并JS"></a>使用WebPack打包合并JS</h3><p>新建nodejs项目，在项目根目录新建一个src目录，在src存放两个需要合并的js文件util.js和common.js，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// common.js</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">info</span> = <span class="function">(<span class="params">str</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// util.js</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">add</span>=<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在src新建一个入口文件<code>main.js</code>将模块集中进行引入，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&quot;./util&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="title function_">requier</span>(<span class="string">&quot;./common&quot;</span>);</span><br><span class="line">common.<span class="title function_">info</span>(<span class="string">&quot;hello webpack&quot;</span>,util.<span class="title function_">add</span>(<span class="number">100</span>,<span class="number">100</span>));</span><br></pre></td></tr></table></figure><p>在项目根目录定义webpack.config.js文件配置打包规则，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 从入口文件开始编译打包</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">    <span class="attr">output</span>:&#123; <span class="comment">//配置合并打包后输出到根目录的dist/bundle.js文件</span></span><br><span class="line">        <span class="comment">// 导出到哪个文件夹</span></span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">        <span class="comment">// 导出的文件名</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;bundle.js&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行webpack查看效果<br>执行命令<code>webpack</code>就能生成<code>./dist/bundle.js</code>打包合并的文件了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">webpack</span><br><span class="line"><span class="comment"># 热打包，监听有新的修改保存后会重新打包</span></span><br><span class="line">webpack -w</span><br></pre></td></tr></table></figure><h3 id="使用WebPack打包合并CSS"><a href="#使用WebPack打包合并CSS" class="headerlink" title="使用WebPack打包合并CSS"></a>使用WebPack打包合并CSS</h3><p>WebPack本身只能处理JavaScript模块，处理其他类型的文件需要使用loader进行转换。<br>css-loader将css装载到JavaScript，style-loader让JavaScript认识css。<br>2021年4月后可直接打包css，不用再安装loader</p><p>安装Loader</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev style-loader css-loader</span><br></pre></td></tr></table></figure><p>webpack.config.js文件配置css打包规则</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 从入口文件开始编译打包</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">    <span class="attr">output</span>:&#123; <span class="comment">//配置合并打包后输出到根目录的dist/bundle.js文件</span></span><br><span class="line">        <span class="comment">// 导出到哪个文件夹</span></span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">        <span class="comment">// 导出的文件名</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;bundle.js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[&#123;</span><br><span class="line">            <span class="attr">test</span>:<span class="regexp">/\.css$/</span>, <span class="comment">// 项目中所有.css文件进行打包</span></span><br><span class="line">            <span class="attr">use</span>:[<span class="string">&quot;style-loader&quot;</span>,<span class="string">&quot;css-loader&quot;</span>]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在src内新建style.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在入口文件main.js导入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&quot;./util&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="title function_">requier</span>(<span class="string">&quot;./common&quot;</span>);</span><br><span class="line">common.<span class="title function_">info</span>(<span class="string">&quot;hello webpack&quot;</span>,util.<span class="title function_">add</span>(<span class="number">100</span>,<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入css</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;./style.css&quot;</span>);</span><br></pre></td></tr></table></figure><p>项目根目录使用命令打包查看效果<code>webpack</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java入门</title>
      <link href="/2022/06/05/Java%E5%85%A5%E9%97%A8/"/>
      <url>/2022/06/05/Java%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Java入门"><a href="#Java入门" class="headerlink" title="Java入门"></a>Java入门</h1><p>先编译，后解释<br>先把.java文件通过javac编译为.class字节码文件，再交给jvm解释运行。</p><h2 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h2><p>编译是<code>.java</code> -&gt; <code>.class</code>，<br>那么反编译就是<code>.class</code> -&gt; <code>.java</code><br>反编译后得到的*.java和原始代码文件几乎完全相同，甚至能够得到某些注解帮我们实现的内容，除了注释文字。</p><h3 id="通过jdk的javap实现反编译"><a href="#通过jdk的javap实现反编译" class="headerlink" title="通过jdk的javap实现反编译"></a>通过jdk的javap实现反编译</h3><blockquote><p>反编译命令 javap -p xxx.class</p></blockquote><p><img src="/img/Java%E5%85%A5%E9%97%A8/2022-08-18-12-20-57.png" alt="javap反编译"></p><h3 id="通过jad工具实现反编译-推荐"><a href="#通过jad工具实现反编译-推荐" class="headerlink" title="通过jad工具实现反编译 推荐"></a>通过jad工具实现反编译 推荐</h3><p>不同的反编译工具可以得到不同的结果，多尝试，看看谁更强大。</p><blockquote><p>jad -sJava xxx.class</p></blockquote><h2 id="八大基本数据类型"><a href="#八大基本数据类型" class="headerlink" title="八大基本数据类型"></a>八大基本数据类型</h2><table><thead><tr><th>数据类型</th><th>bit位</th><th>Byte字节</th></tr></thead><tbody><tr><td>byte 字节</td><td>8</td><td>1</td></tr><tr><td>short 短整型</td><td>16</td><td>2</td></tr><tr><td>int 整型</td><td>32</td><td>4</td></tr><tr><td>long 长整型</td><td>64</td><td>8</td></tr><tr><td>float 单精度浮点数</td><td>32</td><td>4</td></tr><tr><td>double 双精度浮点数</td><td>64</td><td>8</td></tr><tr><td>chart 字符型</td><td>16</td><td>2</td></tr><tr><td>boolean 布尔型</td><td>8</td><td>1</td></tr></tbody></table><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><h4 id="byte"><a href="#byte" class="headerlink" title="byte"></a>byte</h4><h4 id="short"><a href="#short" class="headerlink" title="short"></a>short</h4><h4 id="int"><a href="#int" class="headerlink" title="int"></a>int</h4><p>对整型int使用不同进制进行赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 10进制的33   */</span><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">33</span>;</span><br><span class="line"><span class="comment">/* 8进制        */</span><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">033</span>;</span><br><span class="line"><span class="comment">/* 16进制       */</span><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0X33</span>; 或<span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0x33</span>;</span><br></pre></td></tr></table></figure><h4 id="long"><a href="#long" class="headerlink" title="long"></a>long</h4><p>表示long类型时，后面要加L或l，否则默认int类型，造成精度丢失</p><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><h4 id="float"><a href="#float" class="headerlink" title="float"></a>float</h4><p>如果要表示float类型，要在小数后加上F或f，否则默认double类型</p><h4 id="double"><a href="#double" class="headerlink" title="double"></a>double</h4><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><h4 id="chart"><a href="#chart" class="headerlink" title="chart"></a>chart</h4><p>用于存储一个单一字符，占两个字节。需要用’’引起来。还可以使用字符对应的Unicode编码上的数字来赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&#x27;汉&#x27;</span>; 或 <span class="type">char</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">27721</span>;</span><br></pre></td></tr></table></figure><h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><h4 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h4><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="一元运算符（单目运算符）"><a href="#一元运算符（单目运算符）" class="headerlink" title="一元运算符（单目运算符）"></a>一元运算符（单目运算符）</h3><p>运算所需变量为一个的运算符，所以n元运算符是运算所需变量为n个的运算符……</p><h2 id="访问权限修饰符"><a href="#访问权限修饰符" class="headerlink" title="访问权限修饰符"></a>访问权限修饰符</h2><p><img src="/img/Java%E5%85%A5%E9%97%A8/2022-08-17-17-40-24.png"></p><h3 id="public"><a href="#public" class="headerlink" title="public"></a>public</h3><p>public修饰：类、属性、方法</p><h3 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h3><p>protected修饰：<br>###</p><h2 id="初始化顺序"><a href="#初始化顺序" class="headerlink" title="初始化顺序"></a>初始化顺序</h2><h2 id="关闭Java"><a href="#关闭Java" class="headerlink" title="关闭Java"></a>关闭Java</h2><p><code>System.exit(0)</code>正常关闭<br><code>System.exit(int 非零)</code>非正常关闭</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>try、catch、finally、throw、throws</p><p><code>try</code> 异常监控范围；<code>catch</code> 在异常监控范围内捕获到异常；<code>finally</code> 不是必须的，finally中的代码块总会被执行；<code>throw</code>在方法内抛出异常；<code>throws</code>在方法定义时抛出异常</p><h3 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java.lang.Throwable</span></span><br><span class="line"><span class="comment">    Error:严重错误,一般只能修改自己的代码,尽量避免</span></span><br><span class="line"><span class="comment">            StackOverflowError 栈溢出错误</span></span><br><span class="line"><span class="comment">            OutOfMemoryError   内存不足错误</span></span><br><span class="line"><span class="comment">    Exception:异常</span></span><br><span class="line"><span class="comment">        1)编译时异常:编译就不让通过,报异常信息(IDEA中有红色的波浪线)</span></span><br><span class="line"><span class="comment">            IOException:输入输出异常</span></span><br><span class="line"><span class="comment">            FileNotFoundException:文件未找到异常</span></span><br><span class="line"><span class="comment">            ClassNotFoundException:类未找到异常</span></span><br><span class="line"><span class="comment">            UnKnownHostException:未知主机异常</span></span><br><span class="line"><span class="comment">        2)运行时异常:RuntimeException</span></span><br><span class="line"><span class="comment">            NullPointerException:空指针异常</span></span><br><span class="line"><span class="comment">            ArrayIndexOutOfBoundsException:数组下标越界异常</span></span><br><span class="line"><span class="comment">            ClassCastException:类转换异常</span></span><br><span class="line"><span class="comment">            NumberFormatException:数值格式化异常</span></span><br><span class="line"><span class="comment">            InputMIssMatchException:输入类型不匹配异常</span></span><br><span class="line"><span class="comment">            ArithmeticException:算术异常</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h3><p>利用零不能做除数，制造异常，进行异常捕获</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a/<span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;try中的代码块出现了异常&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;finally中的代码块总是会被执行&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常捕获多个异常"><a href="#异常捕获多个异常" class="headerlink" title="异常捕获多个异常"></a>异常捕获多个异常</h3><p>catch中捕获的异常类型必须是从小范围到大范围，因为大范围的一捕获就没有小范围什么事了，<code>catch从大范围到小范围的编译是不能通过的</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a/<span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;try中的代码块出现了异常&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Throwable t)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;try中的代码块出现了异常&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常抛出"><a href="#异常抛出" class="headerlink" title="异常抛出"></a>异常抛出</h3><p>异常抛出可以避免程序中断。throws并没有真正解决或处理异常,只是把异常抛给调用者.调用者要继<br>续处理这个异常,调用者要么继续throws,要么进行try-catch-finally的处理.<br>try-catch-finally是真正在处理异常,一旦处理完,就不会影响后续代码的执行.<br>（1）在定义方法时抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exFn</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有我善后——finally"><a href="#有我善后——finally" class="headerlink" title="有我善后——finally"></a>有我善后——finally</h3><p>finally不受return的影响<br>在开发中,IO流,网络Socket,数据库的连接等资源的使用,我们要放在<br>finally代码块中去关闭.因为JVM(java虚拟机)不会自动进行外部资源的关闭,也不会对外部资源<br>进行垃圾回收.所以这些操作必须方法finally当中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exFn2</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        System.out.println(num2/num1);</span><br><span class="line">        System.out.println(<span class="string">&quot;try&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (ArithmeticException e)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;catch ArithmeticException&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）在方法内手动抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a/b;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;try中的代码块出现了异常&quot;</span>);</span><br><span class="line">    <span class="comment">//使用throw关键字,手动抛出异常,new Exception或其子类(String 参数)</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="标准的异常日志处理写法"><a href="#标准的异常日志处理写法" class="headerlink" title="标准的异常日志处理写法"></a>标准的异常日志处理写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a/<span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    log.error(<span class="string">&quot;try中的代码块出现了异常&quot;</span>,e,e.getMessage())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反射Reflection"><a href="#反射Reflection" class="headerlink" title="反射Reflection"></a>反射Reflection</h2><p>反射Reflection，可以在程序在执行时，取得类的内部信息，对类的属性和方法进行读写。</p><p><strong>一般地</strong></p><p>import导包 → new对象 → 对象的属性和方法</p><p><strong>反射时</strong></p><p>获取类的Class对象 → 非new形式实例化对象 → 操作类的属性方法……</p><h3 id="Class对象"><a href="#Class对象" class="headerlink" title="Class对象"></a>Class对象</h3><p>程序运行时，一个类在内存中只有一个Class对象，类的属性和行为都封装在对应的Class对象中。<code>在编码时，获取Class对象，是反射的开始</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 获取class对象 */</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.oace.Student&quot;</span>);</span><br><span class="line"><span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> student.getClass();</span><br><span class="line"><span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> Student.class;</span><br><span class="line"><span class="comment">/* 获取父类class对象 */</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c4</span> <span class="operator">=</span> c1.getSuperclass();</span><br><span class="line"><span class="comment">/* 仅限基本内置类型的包装类 */</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c5</span> <span class="operator">=</span> Integer.TYPE;</span><br></pre></td></tr></table></figure><h3 id="谁配拥有Class对象"><a href="#谁配拥有Class对象" class="headerlink" title="谁配拥有Class对象"></a>谁配拥有Class对象</h3><p>类、接口、一维数组、二维数组、注解、枚举、基本数据类型包装类、void</p><h3 id="Class对象能干什么"><a href="#Class对象能干什么" class="headerlink" title="Class对象能干什么"></a>Class对象能干什么</h3><p>使用反射操作private修饰的元素Method、Field、Constructor时需要<code>setAccessible(true);</code>设置可访问</p><h3 id="反射获取类名、属性、方法、构造方法"><a href="#反射获取类名、属性、方法、构造方法" class="headerlink" title="反射获取类名、属性、方法、构造方法"></a>反射获取类名、属性、方法、构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.oace.Student&quot;</span>);</span><br><span class="line"><span class="comment">//获取类名</span></span><br><span class="line">c1.getName(); <span class="comment">//获得全类名 com.oace.Student</span></span><br><span class="line">c1.getSimpleName(); <span class="comment">//获得类名 Student</span></span><br><span class="line"><span class="comment">//获取属性</span></span><br><span class="line">Fields [] fields = c1.getDeclaredFields(); <span class="comment">//获取类的所有属性</span></span><br><span class="line">fields = c1.getFields(); <span class="comment">//获取类public修饰的属性</span></span><br><span class="line"><span class="type">Filed</span> <span class="variable">field</span> <span class="operator">=</span> c1.getDeclaredField(<span class="string">&quot;userName&quot;</span>); <span class="comment">//获取类的指定属性</span></span><br><span class="line"><span class="comment">//获取方法</span></span><br><span class="line">Method [] methods = c1.getDeclaredMethods(); <span class="comment">//获取类的全部方法</span></span><br><span class="line">methods = c1.getDeclaredMethods(); <span class="comment">//获取类和父类的public修饰方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> c1.getDeclaredMethod(<span class="string">&quot;methodName&quot;</span>,方法参数的形参占位……); <span class="comment">//获取指定方法</span></span><br><span class="line"><span class="comment">//获取构造方法</span></span><br><span class="line">Constructor [] constructors = c1.getDeclaredConstructors();<span class="comment">//全部构造方法</span></span><br><span class="line">constructors = c1.getDeclaredConstructors();<span class="comment">//public构造方法</span></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c1.getDeclaredConstructor(构造方法参数的行参占位……);<span class="comment">//指定构造方法</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="反射实例化对象"><a href="#反射实例化对象" class="headerlink" title="反射实例化对象"></a>反射实例化对象</h3><p><code>newInstance</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.oace.Student&quot;</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">studen</span> <span class="operator">=</span> (Student)c1.newInstance(); <span class="comment">//无参构造实例化对象</span></span><br><span class="line"></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c1.getDeclaredConstructor(<span class="string">&quot;String.class&quot;</span>);<span class="comment">//构造方法实例化对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">studen</span> <span class="operator">=</span> (Student)constructor.newInstance(<span class="string">&quot;孙行者&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="反射操作属性"><a href="#反射操作属性" class="headerlink" title="反射操作属性"></a>反射操作属性</h3><p><code>filed.set(实例对象,属性新值);</code>也就是下面的</p><p><code>userName.set(student,&quot;孙行者&quot;);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取Class对象</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.oace.Student&quot;</span>);</span><br><span class="line"><span class="comment">//实例化实体对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student)c1.Instance();</span><br><span class="line"><span class="comment">//获取属性</span></span><br><span class="line"><span class="type">Filed</span> <span class="variable">userName</span> <span class="operator">=</span> c1.getDeclaredField(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line"><span class="comment">//操作属性</span></span><br><span class="line">userName.setAccessible(<span class="literal">true</span>);<span class="comment">//设置该属性可访问</span></span><br><span class="line">userName.set(student,<span class="string">&quot;孙行者&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="反射执行方法"><a href="#反射执行方法" class="headerlink" title="反射执行方法"></a>反射执行方法</h3><p><code>method.invoke(实例对象,参数……);</code>也就是下面的</p><p><code>setName.invoke(student,&quot;孙行者&quot;);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取Class对象</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.oace.Student&quot;</span>);</span><br><span class="line"><span class="comment">//实例化实体对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student)c1.Instance();</span><br><span class="line"><span class="comment">//获取方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">setName</span> <span class="operator">=</span> c1.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>,String.class); <span class="comment">//获取指定方法</span></span><br><span class="line"><span class="comment">//执行方法</span></span><br><span class="line">setName.invoke(student,<span class="string">&quot;孙行者&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="反射获取注解信息"><a href="#反射获取注解信息" class="headerlink" title="反射获取注解信息"></a>反射获取注解信息</h3><p>略……</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组就是相同数据类型的一组数据的集合，数组中每一组数据叫做元素。</p><ul><li>数组的长度是固定的,初始化之后长度就不可变</li><li>数组名保存的是数组的内存地址</li><li>数组长度 &#x3D; 元素个数</li></ul><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Int [] array = <span class="keyword">new</span> <span class="title class_">Int</span>[<span class="number">3</span>];</span><br><span class="line">Int [] array2 = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数据类型 []数组名 = new 数据类型[数组长度];</span></span><br><span class="line"><span class="comment">数据类型 []数组名 = &#123;元素,元素,元素...&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">### 对象数组</span><br><span class="line">```java</span><br><span class="line">Student [] arrayStudent = <span class="keyword">new</span> <span class="title class_">Student</span> [<span class="number">3</span>];</span><br><span class="line"> arrayStudent [<span class="number">0</span>]  = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;大明&quot;</span>,<span class="number">11</span>);</span><br><span class="line"> arrayStudent [<span class="number">1</span>]  = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;玲玲&quot;</span>,<span class="number">18</span>);</span><br><span class="line"> arrayStudent [<span class="number">2</span>]  = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;萨姆&quot;</span>,<span class="number">24</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">### 数组的遍历</span><br><span class="line">for、foreach遍历数组。</span><br><span class="line">涉及数组的修改常用for循环来遍历，foreach遍历修改数组不会修改原数组。</span><br><span class="line">```java</span><br><span class="line">for (int i = 0; i &lt; array_001.length; i++) &#123;</span><br><span class="line">    System.out.print(array_001[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (int i : array_001) &#123;</span><br><span class="line">    System.out.print(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//返回数组的字符串形式，常用于查看数组元素</span><br><span class="line">Arrays.toString[array_001]</span><br></pre></td></tr></table></figure><h3 id="数组的初始值"><a href="#数组的初始值" class="headerlink" title="数组的初始值"></a>数组的初始值</h3><p>略……</p><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>二维数组是较为常用的多维数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> [][] i = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][];</span><br><span class="line"><span class="type">int</span> []a = &#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line"><span class="type">int</span> []b = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">int</span> []c = &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">i[<span class="number">0</span>] = a;</span><br><span class="line">i[<span class="number">1</span>] = b;</span><br><span class="line">i[<span class="number">2</span>] = c;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数据类型 [][]数组名 = new 数据类型[一维的长度][二维的长度];</span></span><br><span class="line"><span class="comment">注意：一维的长度必须有值，二维的长度可以省略，若二维的长度有值，代表每个二维长度都相同。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="可变长参数"><a href="#可变长参数" class="headerlink" title="可变长参数"></a>可变长参数</h2><p>一般地方法参数的个数是固定的，可变长参数能使方法接受动态个数的参数，动态参数的部分是类型一致的。</p><p>使用场景：当方法的参数列表数据类型已经确定,但是参数个数不确定</p><p><strong>可变长参数注意事项</strong>：</p><p>1.一个方法的参数列表,只能使用一个可变参数</p><p>2.如果方法还有其他参数,其他参数必须写在可变参的前面,可变参必须写在参数列表的最后</p><p>3.一种特殊的写法 Object… obj,可接收所有类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可变长参数本质上是传入可变长参数的数组</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(String str,<span class="type">int</span> ... arrayInt)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrayInt.length; i++) &#123;</span><br><span class="line">        sum += arrayInt[i];</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> sum(<span class="literal">null</span>,<span class="number">1</span>,<span class="number">3</span>); <span class="comment">// 4</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num002</span> <span class="operator">=</span> sum(<span class="literal">null</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>包装类与八大基本数据类型息息相关，每种基本数据类型都有其对于的包装类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    // byte Byte</span></span><br><span class="line"><span class="comment">    // short Short</span></span><br><span class="line"><span class="comment">    // int Integer</span></span><br><span class="line"><span class="comment">    // long Long</span></span><br><span class="line"><span class="comment">    // float Float</span></span><br><span class="line"><span class="comment">    // double Double</span></span><br><span class="line"><span class="comment">    // boolean Boolean</span></span><br><span class="line"><span class="comment">    // char Character</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="自动装箱"><a href="#自动装箱" class="headerlink" title="自动装箱"></a>自动装箱</h3><p>基本数据类型自动转换为引用类型(包装类)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如这里int类型的2自动转存为Integer</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h3 id="自动拆箱"><a href="#自动拆箱" class="headerlink" title="自动拆箱"></a>自动拆箱</h3><p>引用类型(包装类)自动转换为基本数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> integer;</span><br><span class="line">    i = <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h3 id="包装类运算"><a href="#包装类运算" class="headerlink" title="包装类运算"></a>包装类运算</h3><p>引用类型(包装类)可与基本数据类型直接运算。</p><h2 id="集合的实现类们"><a href="#集合的实现类们" class="headerlink" title="集合的实现类们"></a>集合的实现类们</h2><h3 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Collection:单列集合</span></span><br><span class="line"><span class="comment">//      List子接口:存储有序,可重复的数据</span></span><br><span class="line"><span class="comment">//      Set子接口:存储无序,不可重复的数据</span></span><br><span class="line"><span class="comment">//Map不是Collection的子接口,Map是双列集合,键值对的形式key---value</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//interface Collection是一个接口,不能直接使用,需要使用其接口实现类.例如ArrayList</span></span><br><span class="line">    <span class="type">Collection</span> <span class="variable">coll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();<span class="comment">//接口指向实现类对象</span></span><br><span class="line">    <span class="comment">//add(参数) 将参数添加到子类对象中</span></span><br><span class="line">    coll.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    <span class="comment">//Collection中只能添加引用类型的元素,下面为什么可以执行,下面发生了自动装箱</span></span><br><span class="line">    coll.add(<span class="number">100</span>);<span class="comment">//int--&gt;Integer,自动装箱</span></span><br></pre></td></tr></table></figure><h3 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h3><p>List集合就是列表，ArrayList是无序列表，LinkedList是有序列表，ajax返回集合给前端时显示的是[obj1,obj2,obj3,…]</p><h4 id="List集合遍历"><a href="#List集合遍历" class="headerlink" title="List集合遍历"></a>List集合遍历</h4><p>List集合用于存储对象元素集合，在List中添加或查询元素是经常用到的。还有对List集合的遍历，遍历List集合可以使用普通for循环、迭代器、增强for循环foreach，<code>需涉及到集合修改时使用普通for循环遍历</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayListDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//增  add(Object obj)加到尾部  add(int index,Object obj)插队,插入到指定位置</span></span><br><span class="line">        <span class="comment">//删remove(int index)remove(Object obj)</span></span><br><span class="line">        <span class="comment">//改set(int index,Object obj)替换指定下标的元素</span></span><br><span class="line">        <span class="comment">//查get(int index)  indexOf(Object obj)   lastIndexOf(Object obj)  contains(Object obj)</span></span><br><span class="line">        <span class="comment">//长度 size()  下标最大是 size()-1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//ArrayList&lt;E&gt;  泛型&lt;E&gt;  其中E可以用任何引用类型来替换</span></span><br><span class="line">        <span class="comment">//表示该列表只能存储Student类型的数据,不能存储其他类型的元素</span></span><br><span class="line">        ArrayList&lt;Student&gt; studentArrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        studentArrayList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;hyao&quot;</span>,<span class="number">11</span>));</span><br><span class="line">        studentArrayList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;cc&quot;</span>,<span class="number">13</span>));</span><br><span class="line">        <span class="comment">//studentArrayList.add(&quot;Anna&quot;); 错误,违反泛型约束</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// contains</span></span><br><span class="line">        <span class="comment">// 默认比较元素地址是否相同，可以在实体类重写equals方法就能灵活的根据成员变量的值来判断是否为同一个元素</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">cc</span> <span class="operator">=</span> studentArrayList.contains(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;cc&quot;</span>, <span class="number">13</span>));</span><br><span class="line">        <span class="comment">//如果忘记重写Student实体类的equals方法,再调用contains时,也会去调用Object类中的equals方法</span></span><br><span class="line">        <span class="comment">//类似indexOf(Object obj) lastIndexOf(Object obj) remove(Object obj)都会调用到equals()方法</span></span><br><span class="line">        System.out.println(cc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合三种方式</span></span><br><span class="line">        <span class="comment">//如果是遍历集合进行修改使用普通for循环即可</span></span><br><span class="line">        <span class="comment">//因为增强for循环foreach是使用迭代器实现的</span></span><br><span class="line">        <span class="comment">//而迭代器是依赖于集合的,如果再使用迭代器的过程中,对集合进行修改,会造成冲突,所以会出现并发修改异常</span></span><br><span class="line">        <span class="comment">//ConcurrentModificationException,并发修改异常,</span></span><br><span class="line">        function1(studentArrayList);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 1)使用迭代器进行循环遍历</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">function1</span><span class="params">(ArrayList&lt;Student&gt; studentArrayList)</span> &#123;</span><br><span class="line">        <span class="comment">//获取迭代器</span></span><br><span class="line">        Iterator&lt;Student&gt; iterator = studentArrayList.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2)使用普通for循环进行遍历</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">function2</span><span class="params">(ArrayList&lt;Student&gt; studentArrayList)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; studentArrayList.size(); i++) &#123;</span><br><span class="line">            System.out.println(studentArrayList.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3)使用增强for循环(foreach)进行遍历</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">function3</span><span class="params">(ArrayList&lt;Student&gt; studentArrayList)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Student student : studentArrayList) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="List集合排序"><a href="#List集合排序" class="headerlink" title="List集合排序"></a>List集合排序</h4><p><strong>快速排序</strong></p><p>快速排序使用<code>Collections.sort(list)</code>对一般的包装类和引用数据类型List集合进行升序排序，不支持实体类集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; integerList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        integerList.add(<span class="number">11</span>);</span><br><span class="line">        integerList.add(<span class="number">24</span>);</span><br><span class="line">        integerList.add(<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">ArrayList&lt;String&gt; strList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        strList.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        strList.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        strList.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="comment">// 默认是升序排序，不支持实体类</span></span><br><span class="line">Collections.sort(integerList); <span class="comment">// 11, 18, 24</span></span><br><span class="line">Collections.sort(strList); <span class="comment">// a, b, c</span></span><br></pre></td></tr></table></figure><p><strong>自定义排序</strong></p><p>直接对需要排序的List集合<code>studentList</code>进行如下操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Student&gt; studentList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        studentList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>));</span><br><span class="line">        studentList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Dog&quot;</span>,<span class="number">24</span>));</span><br><span class="line">        studentList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">Collections.sort(studentList, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line">                <span class="comment">//return o2.getAge() - o1.getAge(); //按age降序</span></span><br><span class="line">                <span class="keyword">return</span> o1.getAge() - o2.getAge(); <span class="comment">//按age升序</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">/* [</span></span><br><span class="line"><span class="comment">    Student&#123;name=&#x27;Jerry&#x27;, age=10&#125;, </span></span><br><span class="line"><span class="comment">    Student&#123;name=&#x27;Tom&#x27;, age=12&#125;, </span></span><br><span class="line"><span class="comment">    Student&#123;name=&#x27;Dog&#x27;, age=24&#125;</span></span><br><span class="line"><span class="comment">    ]*/</span></span><br></pre></td></tr></table></figure><p><strong>实体类集合封装compareTo方法再进行排序</strong></p><p>实体类先实现<code>Comparable&lt;T&gt;</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写<code>compareTo</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span> &#123;</span><br><span class="line">        <span class="comment">//return this.getAge() - o.getAge(); //this可以省略不写,年龄升序排序</span></span><br><span class="line">        <span class="keyword">return</span> o.getAge() - getAge();<span class="comment">//年龄降序排序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用重写的排序</p><p>直接使用<code>Collections.sort(list)</code>调用泛型List集合中实体类重写的排序方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(studentList);</span><br></pre></td></tr></table></figure><h4 id="List排序原理和扩展"><a href="#List排序原理和扩展" class="headerlink" title="List排序原理和扩展"></a>List排序原理和扩展</h4><p>简单来说就是先比较再排序，我们在实体类重写的<code>compareTo</code>除了用于排序，本身就是一个用于比较的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">12</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Dog&quot;</span>,<span class="number">24</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> tom.compareTo(dog); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure><h4 id="List进行二分查找"><a href="#List进行二分查找" class="headerlink" title="List进行二分查找"></a>List进行二分查找</h4><p>使用二分查找前必须先排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//将所有指定元素添加到指定 集合 中。</span></span><br><span class="line">Collections.addAll(list,<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>,<span class="string">&quot;田七&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;list = &quot;</span> + list);</span><br><span class="line"><span class="comment">//使用二分查找前必须先排序，排序</span></span><br><span class="line">Collections.sort(list);</span><br><span class="line">System.out.println(list);</span><br><span class="line"><span class="comment">//二分查找，输出索引</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Collections.binarySearch(list, <span class="string">&quot;田七&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;index = &quot;</span> + index);</span><br></pre></td></tr></table></figure><h3 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h3><h4 id="Set集合遍历"><a href="#Set集合遍历" class="headerlink" title="Set集合遍历"></a>Set集合遍历</h4><p>Set集合不能使用普通for循环,因为Set集合没有下标index。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">HashSet&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        set.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法一:使用迭代器进行循环遍历</span></span><br><span class="line">        Iterator&lt;String&gt; iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法二:使用增强for循环进行循环遍历</span></span><br><span class="line">        <span class="keyword">for</span> (String s : set) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="Set集合元素唯一"><a href="#Set集合元素唯一" class="headerlink" title="Set集合元素唯一"></a>Set集合元素唯一</h4><p>对Set类型的集合进行添加元素时，因为Set集合元素唯一性，重复的元素不会再次添加进Set集合中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HashSet&lt;String&gt; strSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        strSet.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        strSet.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        strSet.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        strSet.add(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// [李四, 张三, 王五]</span></span><br></pre></td></tr></table></figure><p><strong>实体类泛型Set集合的元素唯一</strong></p><p>实体类泛型Set集合的元素唯一，需要通过equals()方法去判断元素是否重复,不同的equals()重写,会得到不同的结果。一般还要重写hashCode()方法。</p><p>实体类重写equals()和hasCode()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) o;</span><br><span class="line">        <span class="keyword">if</span> (id==student.id) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Set集合存储数据无序"><a href="#Set集合存储数据无序" class="headerlink" title="Set集合存储数据无序"></a>Set集合存储数据无序</h4><p>尝试遍历输出set集合你会发现，输出元素的顺序和add添加存储的顺序是不一样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HashSet&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        set.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// [李四, 张三, 王五]</span></span><br></pre></td></tr></table></figure><p><strong>实体类泛型Set集合元素输出顺序</strong><br>与重写的hashCode()有关，下面将学生用户的id作为hashCode，则实体类泛型Set集合元素将按学生用户id的hashCode顺序输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="有序的Set集合LinkHashSet"><a href="#有序的Set集合LinkHashSet" class="headerlink" title="有序的Set集合LinkHashSet"></a>有序的Set集合LinkHashSet</h4><p>继承了HashSet，LinkedHashSet底层是哈希表(数组+红黑树)+链表:多使用链表结构,可以记录元素的存储顺序,从而实现了有序的Set。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LinkedHashSet&lt;String&gt; linkedHashSet = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">        linkedHashSet.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        linkedHashSet.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        <span class="comment">// [张三,李四]</span></span><br></pre></td></tr></table></figure><h4 id="转为LinkHashSet集合去重且有序"><a href="#转为LinkHashSet集合去重且有序" class="headerlink" title="转为LinkHashSet集合去重且有序"></a>转为LinkHashSet集合去重且有序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要在Product实体类中重写equals、hashCode 略……</span></span><br><span class="line">ArrayList&lt;Product&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Product</span>(<span class="string">&quot;1001&quot;</span>,<span class="string">&quot;小米10&quot;</span>,<span class="number">4999.99</span>,<span class="number">100000</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Product</span>(<span class="string">&quot;1001&quot;</span>,<span class="string">&quot;小米10&quot;</span>,<span class="number">4599.99</span>,<span class="number">90000</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Product</span>(<span class="string">&quot;1001&quot;</span>,<span class="string">&quot;小米10&quot;</span>,<span class="number">4699.99</span>,<span class="number">80000</span>));</span><br><span class="line"></span><br><span class="line">LinkedHashSet&lt;Product&gt; set = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;(list);</span><br></pre></td></tr></table></figure><h3 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h3><p>Map集合存入key键的值不能重复,如果key重复会将原来的value值覆盖，一般put方法返回null，如果value被覆盖了，则返回被覆盖的value。<br>同样的，实体类泛型Map集合也是要重写equals方法和hashCode方法才能确保key的唯一性。</p><h4 id="Map集合遍历"><a href="#Map集合遍历" class="headerlink" title="Map集合遍历"></a>Map集合遍历</h4><p>Map遍历方法一：通过keySet()获取此映射中所有键存入Set集合中，通过遍历Set中的映射（原Map中的键），配合get(Object key)实现遍历Map。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Map&lt;String,Integer&gt; Map&lt;姓名,成绩&gt;</span></span><br><span class="line">Map&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;赵同学&quot;</span>,<span class="number">96</span>);</span><br><span class="line">map.put(<span class="string">&quot;钱同学&quot;</span>,<span class="number">92</span>);</span><br><span class="line">map.put(<span class="string">&quot;孙同学&quot;</span>,<span class="number">91</span>);</span><br><span class="line">map.put(<span class="string">&quot;李同学&quot;</span>,<span class="number">99</span>);</span><br><span class="line">Set&lt;String&gt; keys = map.keySet();<span class="comment">//得到所有key的set集合</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String key : keys)&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">    System.out.println(key + <span class="string">&quot;--&gt;&quot;</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Map遍历方法二：通过entrySet()将此映射存入Set集合中，通过遍历Set&lt;Map.Entry&lt;K,V&gt;&gt;，同时调用getKey()和getValue获取对应的key和value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;张三老婆&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;李四老婆&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;王五老婆&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;赵六&quot;</span>,<span class="string">&quot;赵六老婆&quot;</span>);</span><br><span class="line"><span class="comment">//可以把键值对映射关系,试下理解为结婚证</span></span><br><span class="line"><span class="comment">//调用map.entrySet()方法,得到一大堆结婚证</span></span><br><span class="line"><span class="comment">//我们通过查询每一张结婚证,可以找到对应的丈夫和妻子</span></span><br><span class="line">Set&lt;Map.Entry&lt;String,String&gt;&gt; entries = map.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String,String&gt; entry : entries)&#123;</span><br><span class="line">    <span class="comment">//K getKey() 返回与此项对应的键。</span></span><br><span class="line">    <span class="comment">//V getValue() 返回与此项对应的值。</span></span><br><span class="line">    System.out.println(entry.getKey() + <span class="string">&quot;--&gt;&quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="无序的Map集合HashMap"><a href="#无序的Map集合HashMap" class="headerlink" title="无序的Map集合HashMap"></a>无序的Map集合HashMap</h4><p>HashMap是非常高效的，缺点是迭代HashMap的顺序并不是放置键值对的顺序,也几就是我们讲的无序，存储顺序和取出顺序是不一致的。<br><a href="#Map%E9%9B%86%E5%90%88%E9%81%8D%E5%8E%86">使用HashMap的例子</a></p><h4 id="有序的Map集合LinkHashMap"><a href="#有序的Map集合LinkHashMap" class="headerlink" title="有序的Map集合LinkHashMap"></a>有序的Map集合LinkHashMap</h4><p>LinkedHashMap通过维护一个双向链表,保证了运输迭代的顺序，存储顺序和取出顺序是一致的。<br>Key和Vaule都允许为空,又因为key不允许重复,所以只能有一个key为null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LinkedHashMap&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;Beijing&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;李四&quot;</span>, <span class="string">&quot;Shanghai&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;王五&quot;</span>, <span class="string">&quot;Tianjin&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;赵六&quot;</span>, <span class="string">&quot;广州&quot;</span>);</span><br><span class="line">    Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line">    <span class="keyword">for</span> (String s : keySet) &#123;</span><br><span class="line">        System.out.println(s + <span class="string">&quot;--&gt;&quot;</span> + map.get(s));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="可排序的Map集合TreeMap"><a href="#可排序的Map集合TreeMap" class="headerlink" title="可排序的Map集合TreeMap"></a>可排序的Map集合TreeMap</h4><p>TreeMap会自动调用排序方法，自定义泛型类时需要提前配置比较方法<a href="####%E5%8F%AF%E6%8E%92%E5%BA%8F%E7%9A%84Map%E9%9B%86%E5%90%88TreeMap">自定义排序</a>，根据key对象中的某个属性比较，否则会报错。<br><strong>快速排序</strong><br>一般的包装类作为key时，根据key对TreeMap自动进行默认的升序排序，也可以自定义升序降序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">TreeMap&lt;Integer, String&gt; numTreeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">numTreeMap.put(<span class="number">9</span>,<span class="string">&quot;赵政委&quot;</span>);</span><br><span class="line">numTreeMap.put(<span class="number">5</span>,<span class="string">&quot;李云龙&quot;</span>);</span><br><span class="line">numTreeMap.put(<span class="number">2</span>,<span class="string">&quot;楚云飞&quot;</span>);</span><br><span class="line">numTreeMap.put(<span class="number">7</span>,<span class="string">&quot;杨秀芹&quot;</span>);</span><br><span class="line"></span><br><span class="line">Set&lt;Integer&gt; integers = numTreeMap.keySet();</span><br><span class="line"><span class="keyword">for</span> (Integer integer : integers) &#123;</span><br><span class="line">    System.out.println(integer +<span class="string">&quot;，&quot;</span>+ numTreeMap.get(integer));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2，楚云飞</span></span><br><span class="line"><span class="comment">// 5，李云龙</span></span><br><span class="line"><span class="comment">// 7，杨秀芹</span></span><br><span class="line"><span class="comment">// 9，赵政委</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//手动设置升序、降序</span></span><br><span class="line">TreeMap&lt;Integer, String&gt; numTreeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">        <span class="comment">//return o1 - o2;//升序</span></span><br><span class="line">        <span class="keyword">return</span> o2 - o1; <span class="comment">//降序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>自定义排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">TreeMap&lt;Phone, String&gt; phoneTreeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Phone&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Phone o1, Phone o2)</span> &#123;</span><br><span class="line">                <span class="comment">//return o1 - o2;//升序</span></span><br><span class="line">                <span class="keyword">return</span> o2.getPrice() - o1.getPrice(); <span class="comment">//降序</span></span><br><span class="line">            &#125;</span><br><span class="line">&#125;);</span><br><span class="line">phoneTreeMap.put(<span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&quot;小米&quot;</span>,<span class="number">6666</span>),<span class="string">&quot;雷军&quot;</span>);</span><br><span class="line">phoneTreeMap.put(<span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&quot;华为&quot;</span>,<span class="number">8888</span>),<span class="string">&quot;任正非&quot;</span>);</span><br><span class="line">phoneTreeMap.put(<span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&quot;苹果&quot;</span>,<span class="number">7777</span>),<span class="string">&quot;乔布斯&quot;</span>);</span><br><span class="line">Set&lt;Map.Entry&lt;Phone, String&gt;&gt; phoneEntries = phoneTreeMap.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Phone, String&gt; phoneEntry : phoneEntries) &#123;</span><br><span class="line">    <span class="type">Phone</span> <span class="variable">key</span> <span class="operator">=</span> phoneEntry.getKey();</span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> phoneEntry.getValue();</span><br><span class="line">    System.out.println(key.getBrand() +<span class="string">&quot;，&quot;</span>+ key.getPrice() +<span class="string">&quot;，&quot;</span>+ value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实体类集合封装compareTo方法再进行排序</strong><br>实体类先实现<code>Comparable&lt;T&gt;</code>接口<br>重写<code>compareTo</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Phone&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> String brand; <span class="comment">//品牌</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> price;<span class="comment">//价格</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Phone</span><span class="params">(String brand, <span class="type">int</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBrand</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Phone o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price-o.getPrice(); <span class="comment">//升序</span></span><br><span class="line"><span class="comment">//      return o.getPrice()-price; //降序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在封装或重写比较器可用的情况下，TreeMap会自动排序，直接遍历输出即可得到排序后的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">TreeMap&lt;Phone, String&gt; phoneETreeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">phoneETreeMap.put(<span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&quot;小米&quot;</span>,<span class="number">6666</span>),<span class="string">&quot;雷军&quot;</span>);</span><br><span class="line">phoneETreeMap.put(<span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&quot;华为&quot;</span>,<span class="number">8888</span>),<span class="string">&quot;任正非&quot;</span>);</span><br><span class="line">phoneETreeMap.put(<span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&quot;苹果&quot;</span>,<span class="number">7777</span>),<span class="string">&quot;乔布斯&quot;</span>);</span><br><span class="line">Set&lt;Phone&gt; phones = phoneETreeMap.keySet();</span><br><span class="line"><span class="keyword">for</span> (Phone phone : phones) &#123;</span><br><span class="line">    System.out.println(phone.getBrand() +<span class="string">&quot;，&quot;</span>+ phone.getPrice() +<span class="string">&quot;，&quot;</span>+ phoneETreeMap.get(phone));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 小米，6666，雷军</span></span><br><span class="line"><span class="comment">// 苹果，7777，乔布斯</span></span><br><span class="line"><span class="comment">// 华为，8888，任正非</span></span><br></pre></td></tr></table></figure><h4 id="线程安全的Map"><a href="#线程安全的Map" class="headerlink" title="线程安全的Map"></a>线程安全的Map</h4><p>Hashtable、ConcurrentSkipListMap<br>略……</p><h2 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h2><p>由双引号包围的是字符串，字符串”hello”保存在常量池中，new String( )保存在堆中，<br>使用new String()创建字符串对象会在堆中创建对象，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>+<span class="string">&quot;c&quot;</span>; <span class="comment">// &quot;ab&quot;+&quot;c&quot;编译时会转换成&quot;abc&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abcde&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="常用String-API"><a href="#常用String-API" class="headerlink" title="常用String API"></a>常用String API</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">str.length()</span><br><span class="line"><span class="comment">//获取字符串长度</span></span><br><span class="line">str.indexOf(“str1”)</span><br><span class="line">       <span class="comment">//索引子字符串首次出现的位置，存在返回索引下标，不存在返回-1</span></span><br><span class="line">str.lastIndexOf(“str1”)</span><br><span class="line">       <span class="comment">//索引子字符串最后一次出现的位置，存在返回索引下标，不存在返回-1</span></span><br><span class="line">str.substring(<span class="type">int</span> beginIndex)</span><br><span class="line"><span class="comment">//截取字符串</span></span><br><span class="line">str.trim()</span><br><span class="line"><span class="comment">//去除首尾空格</span></span><br><span class="line">str.replace(“str1”,”str2”)</span><br><span class="line"><span class="comment">//替换，将str1替换为str2</span></span><br><span class="line">   str.replaceAll()</span><br><span class="line"><span class="comment">//替换，支持正则表达式</span></span><br><span class="line">str.replaceAll(“\\s”,””)</span><br><span class="line"><span class="comment">//去除字符串中所有空格</span></span><br><span class="line">str.endsWith(“str1”)</span><br><span class="line"><span class="comment">//判断字符串是否以指定字符串str1结尾，返回Boolean布尔值</span></span><br><span class="line">str.startsWith(“str1”)</span><br><span class="line"><span class="comment">//判断字符串是否以指定字符串str1开头，返回Boolean布尔值</span></span><br><span class="line">str.equals(“str1”)</span><br><span class="line"><span class="comment">//判断字符串是否相等</span></span><br><span class="line">   str.equalsIgnoreCase(“str1”)</span><br><span class="line"><span class="comment">//判断字符串是否相等，忽略大小写</span></span><br><span class="line">str.toUpperCase()</span><br><span class="line"><span class="comment">//变大写</span></span><br><span class="line">str.toLowerCase()</span><br><span class="line"><span class="comment">//变小写</span></span><br><span class="line">str.split(“分割符”)</span><br><span class="line"><span class="comment">//以指定分割符分割字符串，课指定分割后的片段数，返回字符串数组</span></span><br></pre></td></tr></table></figure><h3 id="StringBuffer类"><a href="#StringBuffer类" class="headerlink" title="StringBuffer类"></a>StringBuffer类</h3><p>常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">append() <span class="comment">//拼接StringBuffer字符串</span></span><br><span class="line">setCharAt()</span><br><span class="line">insert()</span><br><span class="line">reverse()</span><br><span class="line">delete()</span><br><span class="line"><span class="comment">//很多方法与String类似</span></span><br></pre></td></tr></table></figure><h3 id="StringBuffer类-1"><a href="#StringBuffer类-1" class="headerlink" title="StringBuffer类"></a>StringBuffer类</h3><p>方法与String、StringBuffer类似</p><h3 id="String三者的区别"><a href="#String三者的区别" class="headerlink" title="String三者的区别"></a>String三者的区别</h3><h4 id="String三者互转换"><a href="#String三者互转换" class="headerlink" title="String三者互转换"></a>String三者互转换</h4><p>String、StringBuffer、StringBuilder三者能够互转。<br><img src="/img/Java%E5%85%A5%E9%97%A8/2022-08-17-18-36-01.png" alt="三者互转"></p><h4 id="线程安全与效率"><a href="#线程安全与效率" class="headerlink" title="线程安全与效率"></a>线程安全与效率</h4><p><img src="/img/Java%E5%85%A5%E9%97%A8/2022-08-17-18-39-44.png" alt="线程安全&amp;效率"></p><h4 id="合理使用String三者"><a href="#合理使用String三者" class="headerlink" title="合理使用String三者"></a>合理使用String三者</h4><p>如下图所示，合理使用String、StringBuffer、StringBuilder<br><img src="/img/Java%E5%85%A5%E9%97%A8/2022-08-17-18-42-23.png" alt="StringX3使用"></p><h2 id="时间与日期"><a href="#时间与日期" class="headerlink" title="时间与日期"></a>时间与日期</h2><p>时间原点1970年1月1日0时0分0秒,格林威治时间</p><h2 id="I-x2F-O框架"><a href="#I-x2F-O框架" class="headerlink" title="I&#x2F;O框架"></a>I&#x2F;O框架</h2><p><img src="/img/Java%E5%85%A5%E9%97%A8/2022-08-09-16-32-57.png" alt="I/O框架"></p><h3 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h3><p>File对象，表示磁盘上的文件或目录。<br>File类没有提供读写文件的方法。<br>File的静态属性String separator存储了当前系统的路径分隔符。<br>在UNIX或Linux中，此字段为‘&#x2F;’，在Windows中，为‘\\’</p><h4 id="File的构造方法"><a href="#File的构造方法" class="headerlink" title="File的构造方法"></a>File的构造方法</h4><p><code>public File(String pathname)</code><br>以pathname为路径创建File对象，可以是绝对路径或者相对路径</p><p><code>public File(String parent,String child) </code><br>以parent为父路径，child为子路径创建File对象。</p><p><code>public File(File dirObj,String child) </code><br>以File为父路径，child为子路径创建File对象。</p><h4 id="文件名和路径"><a href="#文件名和路径" class="headerlink" title="文件名和路径"></a>文件名和路径</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getName()</span><br><span class="line">getPath()</span><br><span class="line">getAbsoluteFile()</span><br><span class="line">getAbsolutePath()</span><br><span class="line">getParent()</span><br><span class="line">toPath()</span><br><span class="line">renameTo(File newName)</span><br></pre></td></tr></table></figure><h4 id="文件检测"><a href="#文件检测" class="headerlink" title="文件检测"></a>文件检测</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exists()</span><br><span class="line">canWrite()</span><br><span class="line">canRead()</span><br><span class="line">isFile()</span><br><span class="line">isDirectory()</span><br></pre></td></tr></table></figure><h4 id="获取文件信息"><a href="#获取文件信息" class="headerlink" title="获取文件信息"></a>获取文件信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lastModified()</span><br><span class="line">length()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">createNewFile()</span><br><span class="line">delete()</span><br></pre></td></tr></table></figure><h4 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir()</span><br><span class="line">mkdirs()</span><br><span class="line">delete()</span><br><span class="line">list()</span><br><span class="line">listFiles()</span><br></pre></td></tr></table></figure><h3 id="字节和字符"><a href="#字节和字符" class="headerlink" title="字节和字符"></a>字节和字符</h3><h4 id="字符编码发展史"><a href="#字符编码发展史" class="headerlink" title="字符编码发展史"></a>字符编码发展史</h4><p><img src="/img/Java%E5%85%A5%E9%97%A8.md/2023-03-26-16-32-16.png"></p><h4 id="字节-byte"><a href="#字节-byte" class="headerlink" title="字节 byte"></a>字节 byte</h4><p>bit比特位:计算机是使用二进制来保存数据的,只有两个值,0或1<br>1byte&#x3D;8bit,1个字节等于8比特位,开辟空间的最小单位是字节<br>一个英文字母&#x3D;1byte&#x3D;8bit 1个英文字母是1个字节，也就是8位<br>在GBK或者GB2312编码下,一个汉字占2byte&#x3D;16bit 1个汉字是两个字节，也就是16比特位</p><h4 id="字符-char"><a href="#字符-char" class="headerlink" title="字符 char"></a>字符 char</h4><p>Java默认采用unicode来表示字符，java中的一个char是2个字节，一个中文或英文字符的unicode编码都占2个字节，但如果采用其他编码方式，一个字符占用的字节数则各不相同。<br>在GB2312或GBK编码中(GBK是对GB2312的升级和扩容)，一个英文字符需要1个字节，一个汉字字符存储需要2个字节。<br>在UTF-8编码中，一个英文字母存储需要1个字节，一个汉字字符储存需要3到4个字节,常用汉字3个字节,少部分不常用汉字占4个字节<br>在UTF-16编码中，一个英文字母字符存储需要2个字节，一个汉字字符储存需要3到4个字节。<br>在UTF-32编码中，世界上任何字符的存储都需要4个字节。</p><h3 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h3><p>流向内存的是<code>输入流</code>，内存流出的是<code>输出流</code>；<br>读写8位二进制的字节是<code>字节流</code>，读写16位二进制的字符是<code>字符流</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Chrome插件开发</title>
      <link href="/2022/05/31/Chrome%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
      <url>/2022/05/31/Chrome%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="Chrome插件开发"><a href="#Chrome插件开发" class="headerlink" title="Chrome插件开发"></a>Chrome插件开发</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><ul><li><code>_locales</code></li><li><ul><li><code>messages.json</code>   <strong>语言配置，可以有多个message.json</strong></li></ul></li><li><code>icons</code> <strong>存放图标的文件夹</strong></li><li><code>manifest.json</code><strong>插件的权限配置，个性化配置</strong></li></ul><h2 id="无页面的JS插件"><a href="#无页面的JS插件" class="headerlink" title="无页面的JS插件"></a>无页面的JS插件</h2><p>只需要<code>manifest.json</code>和一个js文件即可，我的叫<code>main.js</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;manifest_version&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;随身行uapp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;这个开发者已摆烂，什么都没有留下&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yelowShine&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content_scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;matches&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;http://*/*&quot;</span><span class="punctuation">,</span> <span class="string">&quot;https://*/*&quot;</span> <span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//匹配任意网站可用</span></span><br><span class="line">      <span class="attr">&quot;js&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;main.js&quot;</span> <span class="punctuation">]</span></span><br><span class="line">   <span class="punctuation">&#125;</span> <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="获取当前标签页dom节点"><a href="#获取当前标签页dom节点" class="headerlink" title="获取当前标签页dom节点"></a>获取当前标签页dom节点</h2><h2 id="自动填写当前标签页表单"><a href="#自动填写当前标签页表单" class="headerlink" title="自动填写当前标签页表单"></a>自动填写当前标签页表单</h2><h2 id="打开一个气泡窗口"><a href="#打开一个气泡窗口" class="headerlink" title="打开一个气泡窗口"></a>打开一个气泡窗口</h2><p>在<code>manifest.json</code>中添加配置，并新增一个<code>popup.html</code>文件，可以不用icon图片。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;browser_action&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;default_popup&quot;</span><span class="punctuation">:</span> <span class="string">&quot;popup.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;default_icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;popup.png&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h2 id="background后台"><a href="#background后台" class="headerlink" title="background后台"></a>background后台</h2><p>background的生命周期是插件中所有类型页面中最长的；它随着浏览器的打开而打开，随着浏览器的关闭而关闭，所以通常把需要一直运行的、启动就运行的、全局的代码放在background里面。</p><p>background也是需要在<code>manifest.json</code>中进行配置，可以通过<code>page</code>指定一张网页，或者通过<code>scripts</code>直接指定一个js数组，Chrome会自动为js生成默认网页：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// &quot;page&quot;: &quot;background.html&quot;,</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;background.js&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;persistent&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>设置一个background.js，添加监听事件，插件安装完成后输出信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// background.js</span></span><br><span class="line">chrome.<span class="property">runtime</span>.<span class="property">onInstalled</span>.<span class="title function_">addListener</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello Word 插件已被安装&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在插件列表里找到已安装的该插件，点击<code>背景页</code>，即可看到<code>background.js</code>输出的信息。</p><p>需要注意的是，page属性和scripts属性只需要配置一个即可，如果两个同时配置，则会报以下错误信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Only one of &#x27;background.page&#x27;, &#x27;background.scripts&#x27;, and &#x27;background.service_worker&#x27; can be specified.</span><br></pre></td></tr></table></figure><h2 id="使用storage存储"><a href="#使用storage存储" class="headerlink" title="使用storage存储"></a>使用storage存储</h2><p>在storage中设置一个值，这将允许多个插件组件访问该值并进行更新操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">chrome.<span class="property">runtime</span>.<span class="property">onInstalled</span>.<span class="title function_">addListener</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello Word 插件已被安装&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//set存储到storage</span></span><br><span class="line">    chrome.<span class="property">storage</span>.<span class="property">sync</span>.<span class="title function_">set</span>(&#123; <span class="string">&quot;studentName&quot;</span>: <span class="string">&quot;huangYao&quot;</span> &#125;, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;storage init studentName huangYao&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//get获取storage的值</span></span><br><span class="line">        chrome.<span class="property">storage</span>.<span class="property">sync</span>.<span class="title function_">get</span>(<span class="string">&quot;studentName&quot;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;storage的get方法获取到的值&#x27;</span>,data);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>由于使用到了<code>chrome.storage</code>，因此我们需要在manifest.json中给插件注册使用的权限。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;storage&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h2 id="添加第三方js依赖"><a href="#添加第三方js依赖" class="headerlink" title="添加第三方js依赖"></a>添加第三方js依赖</h2><p>第三方依赖和脚本的使用受到内容安全策略CSP的限制，这将缓解跨站脚本问题，但这是插件开发的绊脚石，Eval 和相关函数已禁用，内联 JavaScript 不运行，仅加载本地脚本和对象资源。详情<br><a href="https://docs.microsoft.com/zh-cn/microsoft-edge/extensions-chromium/store-policies/csp">https://docs.microsoft.com/zh-cn/microsoft-edge/extensions-chromium/store-policies/csp</a></p><p>CSP除了可以在HTTP标头<code>meta</code>标签定义，也可以在扩展插件开发时在<code>manifest.json</code>定义<code>关闭CSP</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;content_security_policy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;script-src &#x27;self&#x27; &#x27;unsafe-eval&#x27;; object-src &#x27;self&#x27;&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue框架_BV1Zy4y1K7SH 观后感</title>
      <link href="/2022/05/27/vue%E6%A1%86%E6%9E%B6-BV1Zy4y1K7SH-%E8%A7%82%E5%90%8E%E6%84%9F/"/>
      <url>/2022/05/27/vue%E6%A1%86%E6%9E%B6-BV1Zy4y1K7SH-%E8%A7%82%E5%90%8E%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>这是一篇vue框架关于BV1Zy4y1K7SH的观后感，建议有一定web开发基础，微信小程序开发经验的可以学习。</p><h2 id="Vue安装初始环境"><a href="#Vue安装初始环境" class="headerlink" title="Vue安装初始环境"></a>Vue安装初始环境</h2><p>（1） 使用<code>&lt;script&gt;</code>标签引用</p><p>（2）NPM包管理器安装</p><p>ps：使用Vue.config.productionTip&#x3D;false 关闭生产提示，安装Vuetool</p><h2 id="模板语法数据绑定"><a href="#模板语法数据绑定" class="headerlink" title="模板语法数据绑定"></a>模板语法数据绑定</h2><p>2.1 大胡子语法、插值语法 <code>&#123;&#123; &#125;&#125;</code> 绑定标签体内容 </p><p>2.2 指令语法<code>:属性名</code>绑定属性内容，如:href&#x3D;”url”</p><p>ps:表单输入类元素，使用<code>v-model=&quot;xxx&quot;</code>实现双向数据绑定，<br><code>&#123;&#123;  &#125;&#125;</code>中可以放置表达式和有返回值的函数<code>&#123;&#123;fun()&#125;&#125;</code></p><h2 id="el与data的两种写法"><a href="#el与data的两种写法" class="headerlink" title="el与data的两种写法"></a>el与data的两种写法</h2><p><strong>el</strong>：<br>1.在new Vue时绑定选择容器元素<code>el:&#39;#root&#39;</code><br>2.在new Vue时不绑定容器元素，使用<code>$mount(&#39;#root&#39;)</code>将Vue挂载到某个容器(灵活性高)</p><p><strong>data</strong>:<br>1.以对象形式声明<code>data:&#123;……&#125;</code><br>2.以函数形式声明</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    ……</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Object-defineProperty方法"><a href="#Object-defineProperty方法" class="headerlink" title="Object.defineProperty方法"></a>Object.defineProperty方法</h2><p> Object.definePropertys 是数据代理实现双向绑定的基础</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">  <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">definePropertys</span>(person,<span class="string">&#x27;age&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="comment">//为key &#x27;age&#x27;设置值</span></span><br><span class="line">  <span class="attr">enumerable</span>:<span class="literal">true</span> <span class="comment">//是否可枚举</span></span><br><span class="line">  <span class="attr">writable</span>:<span class="literal">true</span>, <span class="comment">//是否可修改</span></span><br><span class="line">  <span class="attr">configurable</span>:<span class="literal">true</span>, <span class="comment">//是否可被删除</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;age属性被读取时调用&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> number;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;age属性被修改时调用&#x27;</span>,value);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>使用v-on:xxx或@xxx如<code>@click</code>绑定事件<br>不要用箭头函数，否则this就不是vm了<br>this一般指向的是vm或组件实例对象<br>传参时用<code>@click=&#39;fun($event,index,data-xxx)&#39;</code>可携带更多参数, 其中fun为方法名</p><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><p><code>@click.stop=&quot;fun&quot;</code><br>prevent：阻止默认事件<br>stop：阻止事件冒泡<br>once：事件只触发一次<br>capture：事件的捕获<br>self：只有event.target是当前操作元素才触发事件<br>passive：默认事件立即执行，无需等待事件自定义回调执行完毕</p><p>ps:在嵌套关系中的执行顺序，事件的捕获是从外到内，事件的冒泡是从内到外。<br>修饰符是可以连着写的<code>@click.prevent.stop=&quot;fun&quot;</code></p><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><p>键盘事件不得不提<code>e.key</code>键名，键码<code>e.keyCode</code></p><p>（1）通过键名、键别名捕获：如esc键被弹起<code>@keyup.esc</code><br>常用按键别名：<br>enter<br>delete<br>esc<br>space<br>tab<br>up、down、left、right</p><p>（2）通过键码捕获<code>@keyup.13</code><br>不建议使用，因为相同的按键在不同键盘键码可能不一样，不适合多用户程序使用。</p><p>ps：系统修饰键ctrl、alt、shift、meta（win、option键）建议搭配keydown使用</p><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>虽然<code>&#123;&#123; &#125;&#125;</code>大胡子语法内可放置表达式和有返回值的method，但表达式在h5中可能拼接过长不太雅观；后者效率堪忧，每用到method都会调用一次。所以有必要使用计算属性了。<br>一般地，属性会放置在实例的<code>data:&#123;……&#125;</code>中，计算属性则是位于<code>computed:&#123;……&#125;</code>中<br>例如此处设置计算属性fullName，通过data属性中的firstName和lastName计算fullName。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">  <span class="attr">fullName</span>:&#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">      <span class="comment">//todo setNewValue</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算属性中的get何时执行?</span></span><br><span class="line"><span class="comment">//（1）初始化时会执行一次将计算结果存入缓存，</span></span><br><span class="line"><span class="comment">//（2）或者参与计算的变量被修改后，计算结果被刷新存入缓存</span></span><br><span class="line"><span class="comment">// 计算属性如何双向绑定？</span></span><br><span class="line"><span class="comment">// 在set方法中设法修改参与计算的变量们的值，达到重新计算的效果</span></span><br></pre></td></tr></table></figure><p>ps：计算属性好处在于，可以通过缓存减少method调用</p><h2 id="侦听属性"><a href="#侦听属性" class="headerlink" title="侦听属性"></a>侦听属性</h2><p>侦听属性用<code>watch:&#123;……&#125;</code>表示，<br>用来侦听<code>data</code>中的属性和<code>computed</code>中的计算属性<br>当侦听属性发生变化时，回调函数<code>handler</code>发生调用。</p><p>（1）可以在初始化实例时配置侦听属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">  <span class="attr">isHot</span>:&#123;</span><br><span class="line">  <span class="attr">immediate</span>:<span class="literal">true</span>, <span class="comment">//初始化时调用一次handler</span></span><br><span class="line">  <span class="attr">deep</span>:<span class="literal">true</span>, <span class="comment">// 当isHot属性的值为对象或嵌套多层对象时是否深入侦听</span></span><br><span class="line">  <span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot has changed&#x27;</span>,newValue,oldValue)</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）也可以手动调用<code>$watch</code>实现侦听属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vm.$watch(&#x27;isHot&#x27;,&#123;</span><br><span class="line">    immediate:true, //初始化时调用一次handler</span><br><span class="line">    deep:true, // 当isHot属性的值为对象或嵌套多层对象时是否深入侦听</span><br><span class="line">    handler(newValue,oldValue)&#123;</span><br><span class="line">    console.log(&#x27;isHot has changed&#x27;,newValue,oldValue)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="绑定动态样式"><a href="#绑定动态样式" class="headerlink" title="绑定动态样式"></a>绑定动态样式</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//css部分</span><br><span class="line"><span class="selector-class">.qwer</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>=<span class="number">666px</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="selector-class">.s1</span>&#123;……&#125;, <span class="selector-class">.s2</span>&#123;……&#125;, <span class="selector-class">.s3</span>&#123;……&#125;</span><br><span class="line">//<span class="selector-tag">h5</span>部分</span><br><span class="line">:style=<span class="string">&quot;t&quot;</span></span><br><span class="line">:class=<span class="string">&quot;cc&quot;</span></span><br><span class="line">:class=<span class="string">&quot;sofArr&quot;</span></span><br><span class="line">:class=<span class="string">&quot;sofObj&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue属性</span></span><br><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line">  <span class="attr">t</span>:<span class="string">&#x27;font-size=666&#x27;</span>;</span><br><span class="line">  <span class="attr">cc</span>:<span class="string">&#x27;qwer&#x27;</span> <span class="comment">//可以替换指定为已定义的任意类样式</span></span><br><span class="line">  <span class="attr">sofArr</span>:[<span class="string">&#x27;s1&#x27;</span>,<span class="string">&#x27;s2&#x27;</span>,<span class="string">&#x27;s3&#x27;</span>] <span class="comment">//可以增减为多个已定义的任意类样式</span></span><br><span class="line">  <span class="attr">sofObj</span>:&#123;</span><br><span class="line">    <span class="attr">s1</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">s1</span>:<span class="literal">true</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><p>条件渲染，符合布尔boolean表达式值为true的才会渲染，如<code>v-if = true</code><br><code>v-show</code>、<code>v-if</code>、<code>v-else-if</code>、<code>v-else</code><br>v-if 后有else判断时，要求结构不能被打断<br>v-if 效率不如 v-show<br>如果条件渲染的部分需要用一个盒子包裹，则使用v-if与<code>template</code>标签的组合。</p><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><p>（1）遍历数组，数组内多个对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">(p,index)</span> <span class="attr">of</span> <span class="attr">persons</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span> &gt;</span></span><br><span class="line">&#123;&#123;p.index&#125;&#125;    &#123;&#123;p.name&#125;&#125;    &#123;&#123;p.age&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js部分 在data中定义</span></span><br><span class="line"><span class="attr">persons</span>:[</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>:<span class="number">15</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>,<span class="attr">age</span>:<span class="number">16</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;王五&#x27;</span>,<span class="attr">age</span>:<span class="number">17</span>&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>（2）遍历对象<br>这将会输出该对象的所有的键值对</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">(value,k)</span> <span class="attr">of</span> <span class="attr">persons</span> &gt;</span></span><br><span class="line">&#123;&#123;k&#125;&#125;    &#123;&#123;value&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js部分设置vue属性</span></span><br><span class="line"><span class="attr">person</span>:&#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;赵六&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span><br></pre></td></tr></table></figure><p>（3）遍历字符串</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">(char,index)</span> <span class="attr">of</span> <span class="attr">str</span>&gt;</span></span><br><span class="line">&#123;&#123;char&#125;&#125;    &#123;&#123;index&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js部分设置vue属性</span></span><br><span class="line"><span class="attr">str</span>:<span class="string">&#x27;helloWorld&#x27;</span></span><br></pre></td></tr></table></figure><p>（4）遍历指定次数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">(num,index)</span> <span class="attr">of</span> <span class="attr">5</span>&gt;</span></span><br><span class="line">&#123;&#123;num&#125;&#125;    &#123;&#123;index&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ps：<code>:key</code>的值建议使用对象属性的id，而不是使用index</p><h3 id="key的作用和原理"><a href="#key的作用和原理" class="headerlink" title=":key的作用和原理"></a>:key的作用和原理</h3><p>遍历列表时先遍历:key作比较，<br>:key参与了，虚拟dom转真实dom的过程，<br>有新:key的用新:key转真实dom，无新:key则比较新旧:key的文本和元素决定是否服用原真实dom，不再转换。</p><p>ps:<code>如何正确使用:key ？</code> （1）使用数据的唯一标识id作为:key（2）以栈的形式顺序无插队增删列表时，仅用于显示时使用默认的index作为key没有问题。</p><h3 id="列表过滤"><a href="#列表过滤" class="headerlink" title="列表过滤"></a>列表过滤</h3><p>列表过滤，模糊查询，使用js原生filter，结合计算属性或者侦听属性的双向绑定实现。</p><h3 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h3><p>数组排序使用<code>sort</code>方法</p><h2 id="表单数据"><a href="#表单数据" class="headerlink" title="表单数据"></a>表单数据</h2><p>表单数据双向绑定依赖于<code>v-model</code>属性的值，和h5标签的value属性。<br>使用<code>v-model</code>绑定的变量接收h5标签中<code>value</code>属性的值。</p><p>特例：</p><p>（1）单选框没有设置value时，获取的是checked的布尔值，是否选择</p><p>（2）多选框<code>v-model</code>绑定数组时，获取的是多选value值组成的数组；<br>多选框绑定非数组时，获取的是checked布尔值。</p><p><code>v-model</code>三个修饰符：lazy失去焦点再获取，number获取内容转数字，trim去掉首尾空格</p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>（1）局部过滤器<br><code>new Vue(filters:&#123;&#125;)</code></p><p>（2）全局过滤器<br><code>Vue.filter(name,callback)</code></p><p>使用过滤器：</p><p>（1）<code>&#123;&#123;xxx | 过滤器&#125;&#125;</code>、（2）<code>:type=&quot;xxx | 过滤器&quot;</code></p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p><code>v-text</code>，变量将以纯字符串方式渲染。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&#x27;msg&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-html</code>，变量可以携带html的标签和属性进行渲染。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&#x27;msg&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-clock</code>，常用于解决网速慢展示出源代码的问题。原理是vue接管容器后会移除标签的v-clock属性，配合css属性选择器即可实现。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 为选择的dom节点设置样式，初始化时携带v-clock的标签都设置为不可见 */</span></span><br><span class="line"><span class="selector-attr">[v-clock]</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 标签的v-clock属性在vue接管容器后被移除，选择器失效使得元素可见 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-clock</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-once</code>，只渲染一次，不论后续变量如何改变，只显示第一次的渲染结果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-pre</code>，添加在不需要vue编译解析的地方，加快vue编译速度</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-pre</span>&gt;</span>你好，世界<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><h3 id="自定义指令命名规范"><a href="#自定义指令命名规范" class="headerlink" title="自定义指令命名规范"></a>自定义指令命名规范</h3><p><code>user-name</code></p><p><del>userName</del></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-user-name</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义指令局部（当前容器vue实例）"><a href="#自定义指令局部（当前容器vue实例）" class="headerlink" title="自定义指令局部（当前容器vue实例）"></a>自定义指令局部（当前容器vue实例）</h3><p>通过自定义指令操作dom指令，例如自定义一个v-big指令,功能是将属性放大10倍。<br>已知自定义指令两种方式，方式二实现的自定义指令通过<code>bind</code>、<code>inserted</code>、<code>update</code>可以进行更细致的操作，如果指令只需要在<code>bind</code>、<code>update</code>时执行则直接使用方式一更简洁。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一</span></span><br><span class="line"><span class="attr">directives</span>:&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">big</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;v-big被调用了&quot;</span>);</span><br><span class="line">    element.<span class="property">innerText</span> = binding.<span class="property">value</span> * <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="attr">directives</span>:&#123;</span><br><span class="line">  <span class="attr">big</span>:&#123;</span><br><span class="line">    <span class="comment">// 页面首次加载指令与元素成功绑定时</span></span><br><span class="line">    <span class="title function_">bind</span>(element,binding):&#123;</span><br><span class="line">      element.<span class="property">innerText</span> = binding.<span class="property">value</span> * <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 指令所在元素被插入页面时</span></span><br><span class="line">    <span class="title function_">inserted</span>(element,binding):&#123;</span><br><span class="line">      element.<span class="property">innerText</span> = binding.<span class="property">value</span> * <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//指令所在模板容器被重新解析时</span></span><br><span class="line">    <span class="title function_">update</span>(element,binding):&#123;</span><br><span class="line">      element.<span class="property">innerText</span> = binding.<span class="property">value</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在h5中使用v-big，在data中定义n的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-big</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义指令全局配置"><a href="#自定义指令全局配置" class="headerlink" title="自定义指令全局配置"></a>自定义指令全局配置</h3><p>上面的自定义指令配置于单个vue实例中，下面我们来配置全局自定义指令。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;big&#x27;</span>,&#123;</span><br><span class="line">      <span class="comment">// 页面首次加载指令与元素成功绑定时</span></span><br><span class="line">    <span class="title function_">bind</span>(element,binding):&#123;</span><br><span class="line">      element.<span class="property">innerText</span> = binding.<span class="property">value</span> * <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 指令所在元素被插入页面时</span></span><br><span class="line">    <span class="title function_">inserted</span>(element,binding):&#123;</span><br><span class="line">      element.<span class="property">innerText</span> = binding.<span class="property">value</span> * <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//指令所在模板容器被重新解析时</span></span><br><span class="line">    <span class="title function_">update</span>(element,binding):&#123;</span><br><span class="line">      element.<span class="property">innerText</span> = binding.<span class="property">value</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h2><p>大多数情况下，编程时只需要使用<code>mounted</code>、<code>beforeDestroy</code>函数就行了。<br>通俗点，<code>mounted</code>写进入页面后要干的，<code>beforeDestroy</code>写离开页面前要干的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="comment">/* 初始化 生命周期、事件 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//vm的data和methods在当前周期函数不起作用</span></span><br><span class="line">  <span class="title function_">beforeCreate</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 初始化 数据侦听、数据代理 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// vm的data和methods在当前周期函数可以使用了</span></span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 判断容器挂载方式el、$mount和模板渲染方式template并执行 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//未经vue编译的dom结构显示在页面上，现在不要操作dom，最终不生效。</span></span><br><span class="line">  <span class="title function_">beforeMount</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 将虚拟dom转为真实dom显示在页面，可以操作dom */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 挂载完毕，vue完成首次模板解析，并把真实dom放入页面后</span></span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 当data中的属性发生改变时 S */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 数据得到了更新，但页面渲染未更新</span></span><br><span class="line">  <span class="title function_">beforeUpdate</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 新的虚拟dom和旧的虚拟dom进行比较，返回更新结果，页面渲染得到更新 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 数据得到了更新，页面页得到了更新</span></span><br><span class="line">  <span class="title function_">updated</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 当data中的属性发生改变时 E */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 当vm.$destroy被调用 S */</span></span><br><span class="line">  <span class="title function_">beforeDestroy</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁vm，清理vm与组件的连接，解绑指令和自定义事件</span></span><br><span class="line">  <span class="title function_">destroyed</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">  <span class="comment">/* 当vm.$destroy被调用 E */</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>对静态资源文件的复用已不能满足模块化复用的需求，所以组件诞生了。<br>创建组件时，组件内的data要写成有返回值的函数形式。</p><p>vue组件开发的三部曲：创建、注册、使用</p><h3 id="非单文件组件"><a href="#非单文件组件" class="headerlink" title="非单文件组件"></a>非单文件组件</h3><p>这里创建了学校和学生两个组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1）创建组件 */</span></span><br><span class="line"><span class="keyword">const</span> school = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click=&quot;showName&quot;&gt;&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;北京大学&#x27;</span>,</span><br><span class="line">      <span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">showName</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// 北京大学</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> student = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click=&quot;showName&quot;&gt;&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;李大明&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>:<span class="string">&#x27;18&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">  <span class="comment">/* 2)注册组件（局部注册）仅限当前实例绑定的容器内使用 */</span></span><br><span class="line">  <span class="attr">components</span>:&#123;</span><br><span class="line">    <span class="attr">xuexiao</span>:school,</span><br><span class="line">    <span class="attr">xuesheng</span>:student</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 3）使用组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xuexiao</span>&gt;</span><span class="tag">&lt;/<span class="name">xuexiao</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xuesheng</span>&gt;</span><span class="tag">&lt;/<span class="name">xuesheng</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="组件的全局注册"><a href="#组件的全局注册" class="headerlink" title="组件的全局注册"></a>组件的全局注册</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> teacher = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;孔子&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>:<span class="string">&#x27;24&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局注册组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">cmponent</span>(<span class="string">&#x27;laoshi&#x27;</span>,teacher);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#root2&#x27;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 全局注册的组件可以在任意实例使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">laoshi</span>&gt;</span><span class="tag">&lt;/<span class="name">laoshi</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">laoshi</span>&gt;</span><span class="tag">&lt;/<span class="name">laoshi</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="组件创建的简化"><a href="#组件创建的简化" class="headerlink" title="组件创建的简化"></a>组件创建的简化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">  <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;北京大学&#x27;</span>,</span><br><span class="line">      <span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="组件的嵌套"><a href="#组件的嵌套" class="headerlink" title="组件的嵌套"></a>组件的嵌套</h3><p>again，组件三部曲：创建、注册、使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> student = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;h2&gt;&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;李大明&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>:<span class="string">&#x27;18&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> school = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;&#123;&#123;student&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;北京大学&#x27;</span>,</span><br><span class="line">      <span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">components</span>:&#123;</span><br><span class="line">    <span class="attr">student</span>:student</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;school&gt;&lt;/school&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">components</span>:&#123;</span><br><span class="line">    <span class="attr">school</span>:school</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>;</span><br><span class="line">  <span class="attr">components</span>:&#123;</span><br><span class="line">    <span class="attr">app</span>:app</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>开发过程中，由一个vue实例管理一个名为app的组件，app组件内嵌套有多个组件，用树形结构来看的话app组件就是作为了组件树的根节点，包含了众多的子节点组件，子节点组件还可以嵌套分叉更多组件。</p><h3 id="VueComponent构造函数"><a href="#VueComponent构造函数" class="headerlink" title="VueComponent构造函数"></a>VueComponent构造函数</h3><ul><li>vue组件的本质是<code>VueComponent</code>构造函数，是通过Vue.extend生成的。</li><li>使用组件如<code>&lt;school&gt;&lt;/&lt;school&gt;</code>时vue会通过new VueComponent(options)帮我们创建组件的实例对象。</li><li>在VueComponent组件配置的函数中，this指向的是当前组件的实例对象。</li><li>在new Vue(option)内的函数中，this指向当前vue实例。</li></ul><h3 id="JavaScript构造函数"><a href="#JavaScript构造函数" class="headerlink" title="JavaScript构造函数"></a>JavaScript构造函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">a</span>=<span class="number">1</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">b</span>=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Demo</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">//函数才有prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d.<span class="property">__proto__</span>);<span class="comment">//实例对象有__proto__</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Demo</span>.<span class="property"><span class="keyword">prototype</span></span> === d.<span class="property">__proto__</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">VueComponent.prototype.__proto__ === Vue.prototype </span></span><br><span class="line"><span class="comment">所以vc可以访问vm的属性和方法</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h3><p>单文件组件的好处在于可以为组件定义css样式，单文件组件文件名是以<code>.vue</code>结尾的文件。<br>主要由<code>template</code>、<code>script</code>、<code>style</code>三对标签组成，分别对应着<code>组件的标签结构</code>、<code>组件的js脚本</code>、<code>组件的样式</code>。单文件组件创建完毕后需要使用<code>export</code>将组件暴露出去才能使用。</p><p><code>.vue组件</code>的创建如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;school&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// export school 分别暴露</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">const</span> school = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;school&#x27;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;北京大学&#x27;</span>,</span><br><span class="line">      <span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">showName</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// 北京大学</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/* export暴露方式任选其一 */</span></span><br><span class="line"><span class="keyword">export</span> &#123;school&#125; <span class="comment">// 统一暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> school <span class="comment">// 默认暴露</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-class">.school</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>单文件组件的思想就是以<code>main.js</code>为入口创建vue实例调用<code>App.vue</code>根组件，通过根组件App.vue，调用其他子组件</p><ul><li><code>main.js</code></li><li><code>App.vue</code> </li><li><ul><li><code>xx1.vue</code></li></ul></li><li><ul><li><code>xx2.vue</code></li></ul></li><li><ul><li><code>xx…….vue</code></li></ul></li></ul><h2 id="vue-cli脚手架"><a href="#vue-cli脚手架" class="headerlink" title="vue-cli脚手架"></a>vue-cli脚手架</h2><p>略……</p><h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><p>vue-router是vue的一个插件库需要额外安装，常用于实现单页面应用<code>SPA</code>(single page app)，就是根据不同的路由地址展示不同的组件，或者请求不同的接口并且处理响应回调。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat服务器</title>
      <link href="/2022/05/27/Tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2022/05/27/Tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat服务器"><a href="#Tomcat服务器" class="headerlink" title="Tomcat服务器"></a>Tomcat服务器</h1><h2 id="运行tomcat"><a href="#运行tomcat" class="headerlink" title="运行tomcat"></a>运行tomcat</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">方法一：运行tomcat的bin目录下startup文件，win是bat，linux和mac是sh</span><br><span class="line"></span><br><span class="line">方法二：命令行到tomcat的bin目录，输入目录catalina run回车（该方法运行失败时会反馈失败原因）</span><br></pre></td></tr></table></figure><h2 id="测试tomcat是否启动成功"><a href="#测试tomcat是否启动成功" class="headerlink" title="测试tomcat是否启动成功"></a>测试tomcat是否启动成功</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">浏览器进入，任选一个地址</span><br><span class="line"></span><br><span class="line">http://localhost:8080</span><br><span class="line"></span><br><span class="line">http://127.0.0.1:8080</span><br><span class="line"></span><br><span class="line">http://真实ip:8080</span><br><span class="line"></span><br><span class="line">当进入汤姆猫界面，说明tomca服务器启动成功</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="常见tomcat启动失败情况"><a href="#常见tomcat启动失败情况" class="headerlink" title="常见tomcat启动失败情况"></a>常见tomcat启动失败情况</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Java环境变量没有配置JAVA_HOME，要不然汤姆猫去不到JAVA的家</span><br></pre></td></tr></table></figure><h2 id="停止tomcat"><a href="#停止tomcat" class="headerlink" title="停止tomcat"></a>停止tomcat</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">方法一：点击tomcat窗口的x关闭</span><br><span class="line"></span><br><span class="line">方法二：运行tomcat的bin目录下shutdown文件win是bat，linux和mac是sh</span><br><span class="line"></span><br><span class="line">方法三：在tomcat窗口下使用键盘CTRL+C</span><br></pre></td></tr></table></figure><h2 id="修改tomcat端口"><a href="#修改tomcat端口" class="headerlink" title="修改tomcat端口"></a>修改tomcat端口</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修改tomcat目录下conf文件夹内server.xml的connector标签的port属性的值并保存</span><br><span class="line"></span><br><span class="line">然后重启tomcat服务器才能生效</span><br></pre></td></tr></table></figure><h2 id="如何部署项目到tomcat服务器"><a href="#如何部署项目到tomcat服务器" class="headerlink" title="如何部署项目到tomcat服务器"></a>如何部署项目到tomcat服务器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">方法一：把项目拷贝到tomcat的webapps目录下即可</span><br><span class="line"></span><br><span class="line">方法二：在tomcat目录下conf\Catalina\localhost中新建xml文件，一个xml对应一个项目</span><br><span class="line"></span><br><span class="line">如新建一个abc.xml，项目Test路径为E:\Test</span><br><span class="line"></span><br><span class="line">对应的xml配置为&lt;Context path=”/abc” docBase=”E:\Test” /&gt;</span><br></pre></td></tr></table></figure><h2 id="如何访问tomcat里的项目"><a href="#如何访问tomcat里的项目" class="headerlink" title="如何访问tomcat里的项目"></a>如何访问tomcat里的项目</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">方法一：浏览器进入，任选一个地址，假意为进到webapps目录，后再加/项目名/文件名…</span><br><span class="line"></span><br><span class="line">http://localhost:8080</span><br><span class="line"></span><br><span class="line">http://127.0.0.1:8080</span><br><span class="line"></span><br><span class="line">http://真实ip:8080</span><br><span class="line"></span><br><span class="line">如访问webapps目录下的Test项目中a文件夹的b.html</span><br><span class="line"></span><br><span class="line">http://真实ip:8080/Test/a/b.html</span><br><span class="line"></span><br><span class="line">方法二：配置xml部署tomcat，项目Test路径为E:\Test，Test项目中a文件夹的b.html http://真实ip:8080/abc/a/b.html</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安卓终端Termux</title>
      <link href="/2022/05/23/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/"/>
      <url>/2022/05/23/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/</url>
      
        <content type="html"><![CDATA[<h1 id="安卓终端Termux"><a href="#安卓终端Termux" class="headerlink" title="安卓终端Termux"></a>安卓终端Termux</h1><h2 id="官方支持"><a href="#官方支持" class="headerlink" title="官方支持"></a>官方支持</h2><p>termux-boot 开机自启动<br>如果只是像安卓电视盒子开关机的话可以用，但是关闭再打开app就不行了</p><h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><a href="/2022/07/25/Hexo%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/" title="Hexo使用心得">Hexo使用心得</a><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><p>nginx部署hexo生成的静态文件</p><h2 id="openjdk"><a href="#openjdk" class="headerlink" title="openjdk"></a>openjdk</h2><p>openjdk-17</p><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><p><code>apt install redis</code></p><h2 id="activeMQ"><a href="#activeMQ" class="headerlink" title="activeMQ"></a>activeMQ</h2><p>去官网下压缩包，例如apache-activemq-5.9.0-bin.tar.gz<br>解压后运行即可<br><code>apache-activemq-5.9.0/bin/activemq start</code><br>如有需要可以自定义配置<br>apache-activemq-5.9.0&#x2F;conf&#x2F;jetty.xml</p><p><a href="http://192.168.137.240:8161/">http://192.168.137.240:8161/</a><br>admin &#x2F; admin<br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2022-11-19-19-05-06.png"></p><h2 id="svn"><a href="#svn" class="headerlink" title="svn"></a>svn</h2><a href="/2022/11/01/svn%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/" title="svn版本管理">svn版本管理</a><h2 id="安装并使用Linux系统"><a href="#安装并使用Linux系统" class="headerlink" title="安装并使用Linux系统"></a>安装并使用Linux系统</h2><p>使用 <code>AnLinux.apk</code>，这里我安装的是debian</p><h3 id="挂载目录到proot中的linux"><a href="#挂载目录到proot中的linux" class="headerlink" title="挂载目录到proot中的linux"></a>挂载目录到proot中的linux</h3><p><code>termux-steup-storage</code>获取sdcard读写权限<br><code>vim start-debian.sh</code>找到<code>-b /sdcard</code>的那行，解除注释就是挂载sdcard</p><h3 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h3><p>关于中国用户，需要换源<br><code>vim /etc/apt/sources.list</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#deb http://deb.debian.org/debian bullseye main contrib non-free</span><br><span class="line">deb http://mirrors.ustc.edu.cn/debian stable main contrib non-free</span><br><span class="line">#deb-src http://deb.debian.org/debian bullseye main contrib non-free</span><br><span class="line">deb http://mirrors.ustc.edu.cn/debian stable-updates main contrib non-free</span><br></pre></td></tr></table></figure><h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h3><p><code>apt-get install openssh</code><br><code>apt-get install openssh-server</code><br>一般地，安卓没有root权限，22端口是不能用的<br><code>vim /etc/ssh/sshd_config</code><br>将端口改为9022，允许所有v4 &amp; v6通过root用户登录<br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2022-11-19-19-47-03.png"><br><code>passwd root</code>为root用户配置密码<br>重启ssh<br><code>service ssh restart</code>或<br><code>/etc/init.d/ssh restart</code></p><h3 id="code-server"><a href="#code-server" class="headerlink" title="code-server"></a>code-server</h3><p><a href="https://github.com/coder/code-server/releases/download/v4.9.0-rc.1/code-server-4.9.0-rc.1-macos-amd64.tar.gz">https://github.com/coder/code-server/releases/download/v4.9.0-rc.1/code-server-4.9.0-rc.1-macos-amd64.tar.gz</a><br>这是编译好的直接下载解压运行即可<br><code>code-server-4.9.0-rc.1-linux-arm64/bin/code-server</code><br>配置允许外网访问和免密码登录<br><code>vim ~/.config/code-server/config.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">bind-addr:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:8080</span></span><br><span class="line"><span class="comment">#bind-addr: 127.0.0.1:8080</span></span><br><span class="line"><span class="comment">#auth: password</span></span><br><span class="line"><span class="attr">auth:</span> <span class="string">none</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">p</span></span><br><span class="line"><span class="attr">cert:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><a href="http://192.168.137.241:8080/">http://192.168.137.241:8080/</a><br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2022-11-19-19-37-16.png"></p><h3 id="vnc"><a href="#vnc" class="headerlink" title="vnc"></a>vnc</h3><p>使用 <code>AnLinux.apk</code>安装桌面即可<br><code>vncserver-start</code>启动桌面<br><code>vncserver-stop</code>终止桌面</p><ul><li>在带屏幕的Windows中使用VNC Viewer连接<br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2022-11-19-19-56-22.png"></li><li>在带屏幕的安卓中使用VNC Viewer连接<br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2022-11-19-20-26-09.png"></li></ul><h3 id="noVnc"><a href="#noVnc" class="headerlink" title="noVnc"></a>noVnc</h3><p>通过浏览器就能访问vnc（VNC server），不再需要依赖VNC Viewer（VNC client）</p><h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h4><h5 id="运行vnc-server"><a href="#运行vnc-server" class="headerlink" title="运行vnc server"></a>运行vnc server</h5><p>下载安装tightvnc或者别的vnc server……<br>确保该服务使用vnc viewer能够连接</p><h5 id="下载node启用websocket-to-tcp-服务"><a href="#下载node启用websocket-to-tcp-服务" class="headerlink" title="下载node启用websocket-to-tcp 服务"></a>下载node启用websocket-to-tcp 服务</h5><p>安装node后安装websocket-to-tcp包<br>websocket-to-tcp包安装方式： <code>npm i @maximegris/node-websockify</code></p><ul><li>举个例子：<br>比如在C盘下创建一个文件夹，叫做novncPrx,进入这个文件目录下，通过npm命令安装这个包。</li><li>配置并启用websocket-to-tcp服务：<br>在C:&#x2F;novncPrx下创建config.js 文件内容为：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> websockify = <span class="built_in">require</span>(<span class="string">&#x27;@maximegris/node-websockify&#x27;</span>);</span><br><span class="line"><span class="comment">//设置监听websockify的8080端口转发到VNC服务的5900端口</span></span><br><span class="line"><span class="title function_">websockify</span>(&#123;</span><br><span class="line"><span class="attr">source</span>: <span class="string">&#x27;0.0.0.0:8080&#x27;</span>,<span class="comment">//websocket Server 的服务地址和端口，端口号为8080</span></span><br><span class="line"><span class="attr">target</span>: <span class="string">&#x27;0.0.0.0:5900&#x27;</span>,<span class="comment">//VNC Server 的服务地址和端口，端口号为 5900，可能有些是5901</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>启用命令： <code>node config.js</code> 启用websocket-to-tcp 服务</li></ul><h5 id="下载noVNC服务，通过nginx-启用该服务"><a href="#下载noVNC服务，通过nginx-启用该服务" class="headerlink" title="下载noVNC服务，通过nginx 启用该服务"></a>下载noVNC服务，通过nginx 启用该服务</h5><ul><li>下载noVNC<br><a href="https://github.com/novnc/noVNC">https://github.com/novnc/noVNC</a></li><li>把noVNC服务部署到Nginx上<br>方法一：把noVnc项目内的全部文件copy到 <code>nginx-1.22.1\html</code><br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2022-11-19-23-15-39.png"><br>方法二：指定noVnc项目目录作为网站根目录<br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2022-11-19-23-18-49.png"></li><li>启动nginx<br>在nginx目录下 <code>nginx.exe start</code></li><li>使用noVNC访问VNC服务器<br>访问nginx的vnc.html<br>配置WebSocket，输入config.js中配置的websocket Server 的服务地址和端口，连接，输入vnc的密码连接即可享用<br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2022-11-19-22-19-59.png"></li></ul><h4 id="网络代理关系详解"><a href="#网络代理关系详解" class="headerlink" title="网络代理关系详解"></a>网络代理关系详解</h4><p><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2022-11-19-21-49-52.png"><br>代理关系：<br>1，被访问机器安装tightVNC成为VNC server,暴漏5900端口<br>2，浏览器访问VNC server 需要Tcp 到websocket的转化，因此 使用websockify 把5900端口代理到8080<br>3，通过nginx 把noVNC的web服务代理到80端口，供外界访问。<br>4，在其他机器上，通过输入 url:80&#x2F;vnc.html 访问到noVNC页面后，设置websocket访问端口，访问被访问机器。</p><h3 id="Chromium浏览器"><a href="#Chromium浏览器" class="headerlink" title="Chromium浏览器"></a>Chromium浏览器</h3><p>安装<br><code>apt install -y chromium fonts-wqy-* ; chromium --no-sandbox</code><br>启动<br><code>chromium --no-sandbox</code><br>每次都要用命令输入参数启动，不能通过桌面图标启动，很不爽吧，看看下面如何配置</p><p>修改可执行程序，添加启动参数并保存，以后不再需要添加参数启动<br><code>vim /usr/bin/chromium</code><br>其中<code>exec行</code>就是打开命令，在后面行尾追加空格<code>--no-sandbox</code>参数即可<br>尽管有另外一种做法是在&#x2F;usr&#x2F;share&#x2F;applications下或者~&#x2F;.local&#x2F;share&#x2F;applications下找到或创建快捷方式(.desktop文件)修改exec，显然第一种做法更全面</p><h3 id="alist"><a href="#alist" class="headerlink" title="alist"></a>alist</h3><p>一款支持多种存储的目录文件列表程序，支持 web 浏览与 webdav协议，后端基于gin，前端使用react<br><code>alist server</code>启动服务<br><code>alist admin</code>查看admin的密码<br>这里我只挂载proot中的Debian的斜杠<code>/</code>根目录，由于我在Debian内又挂载了sdcard，所以等价于我可以访问Debian和手机sdcard的内容<br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux.md/2023-04-23-23-25-24.png"><br>根文件夹，在挂载路径内的相对路径，也就是直接访问服务端口时展现在页面上打勾✔的路径<br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux.md/2023-04-24-00-02-43.png"></p><h3 id="Barrier"><a href="#Barrier" class="headerlink" title="Barrier"></a>Barrier</h3><p>如果你还想压榨一下安卓设备的屏幕，可以尝试一下<br>想象一下电脑的鼠标和键盘可以同时控制 <code>电脑和安卓设备里的Linux</code><br><code>apt install barrier</code><br><code>barrier</code><br>客户端和服务端的barrier都要设置关闭SSL<br>可以配合日志信息解决连接问题<br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2022-11-20-00-50-33.png"><br>可惜在使用VNC显示的情况下barrier的client中无法移动鼠标位置</p><h3 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h3><p>ALT + Insert 这个快捷键居然不能用，建议改键</p><h3 id="smartgit"><a href="#smartgit" class="headerlink" title="smartgit"></a>smartgit</h3><h3 id="fonts"><a href="#fonts" class="headerlink" title="fonts"></a>fonts</h3><p>字体fonts设置，一些中文软件乱码可能是系统没有中文字体</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /usr/share/fonts/msyh</span><br><span class="line"> sudo cp 存放字体的目录/msyh.ttf /usr/share/fonts/msyh</span><br><span class="line"> sudo chmod 644 /usr/share/fonts/msyh/*</span><br><span class="line"> cd /usr/share/fonts/msyh</span><br><span class="line"> sudo mkfontscale</span><br><span class="line"> sudo mkfontdir</span><br><span class="line"> sudo fc-cache -fv</span><br></pre></td></tr></table></figure><h2 id="开机自启脚本–长期更新维护"><a href="#开机自启脚本–长期更新维护" class="headerlink" title="开机自启脚本–长期更新维护"></a>开机自启脚本–长期更新维护</h2><ul><li>termux配置<br><code>apt install nmap</code><br>并开启ssh服务端口作为接口，在Debian启动vnc之前访问termux的ssh(提权)中的nmap<br><code>vim ~/.bashrc</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">termux-wake-lock</span><br><span class="line">sshd</span><br></pre></td></tr></table></figure></li><li>Debian这边<br>因为ssh不支持编写提前指定密码的脚本，所以我们还需要<code>apt install sshpass</code>，如果你不喜欢的话可以尝试换成密钥登陆。<br><code>vim ~/.bashrc</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#alist</span></span><br><span class="line">/opt/alist server &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="comment">#node env</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:/opt/node-v18.16.0-linux-arm64/bin&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:/opt/node-v18.16.0-linux-arm64/node_global&quot;</span></span><br><span class="line"><span class="comment">#nginx noVnc的web服务</span></span><br><span class="line">nginx</span><br><span class="line"><span class="comment">#ssh</span></span><br><span class="line">/etc/init.d/ssh start</span><br><span class="line"><span class="comment">#websocketToVnc websockify</span></span><br><span class="line">node /opt/websocketToVnc/config.js &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="comment"># vnc start</span></span><br><span class="line"><span class="comment"># Vnc的服务，因为在运行过程中关闭app后再启动vnc会失败，检查发现监听的5901端口已经不存在但是控制台却显示vnc已经启动，所以只能通过端口判断来决定是否重启</span></span><br><span class="line"><span class="keyword">if</span> sshpass -p thisIsYourPassword ssh termuxUserName@127.0.0.1 -p 8022 &lt;&lt; <span class="string">eeooff</span></span><br><span class="line"><span class="string">nmap localhost | grep 5901</span></span><br><span class="line"><span class="string">exit</span></span><br><span class="line"><span class="string">eeooff</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;vnc listenting 5901 is already on&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  vncserver-stop</span><br><span class="line">  vncserver-start</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;vnc port 5901 ReStart successful&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># vnc end</span></span><br></pre></td></tr></table></figure></li><li>出问题了看这里<br>如果是安卓10之前可以直接使用netstat，不需要nmap，并且Debian的脚本也要改了</li></ul><h2 id="postgresql"><a href="#postgresql" class="headerlink" title="postgresql"></a>postgresql</h2><p>apt install postgresql</p><p>mkdir psdata</p><p>cd psdata</p><p>initdb</p><p>postgres -D .&#x2F;</p><p>psql -l</p><p>psql -U $(whoami) -d postgres</p><p>\l</p><p>\password</p><p>\q</p><p>createdb databasename</p><p>dropdb databasename</p><p>vim $(find ~&#x2F;..&#x2F; -name postgresql.conf)</p><p>vim $(find ~&#x2F;..&#x2F; -name pg_hba.conf)</p><p>psql -U $(whoami) -d postgres -h host -W password</p><p>psql -U username -d postgres -h host</p><h2 id="安卓5-or-6"><a href="#安卓5-or-6" class="headerlink" title="安卓5 or 6"></a>安卓5 or 6</h2><p>Termux-on-android-5-or-6</p><p>替换源地址</p><p>gpg key</p><p>缺少可以执行gpg的包</p><p>安装包，包不可用，使用替代包</p><p>gpg key</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Aidlux</title>
      <link href="/2022/05/22/Aidlux/"/>
      <url>/2022/05/22/Aidlux/</url>
      
        <content type="html"><![CDATA[<h1 id="Aidlux"><a href="#Aidlux" class="headerlink" title="Aidlux"></a>Aidlux</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Aidlux是基于ARM架构的跨生态（Android&#x2F;鸿蒙+Linux）一站式人工智能物联网（AIoT）应用开发和部署平台。<br>总结来说就是手机里的Linux系统。</p><p>好处：（1）联想一下Linux都能干些什么。（2）局域网内的便携式主机。（3）支持http使用网址+端口号直连</p><p>坏处：开发者个人乞丐版，无真实root权限支持，没有Linux外设驱动支持，没有商业技术支持。</p><h2 id="安装环境要求"><a href="#安装环境要求" class="headerlink" title="安装环境要求"></a>安装环境要求</h2><p>安卓手机需要Android 6.0</p><h2 id="可玩性研究分析"><a href="#可玩性研究分析" class="headerlink" title="可玩性研究分析"></a>可玩性研究分析</h2><p>内置了应用中心，点击即可下载海量应用。如果想要的应用是arm版本的，自行安装配置后基本上也是可以运行的。</p><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>vscode、nodejs</p><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>java、maven，idea需要图形化界面，而VNC拉跨的速度，实在是忍不下去了，姑且当个部署机用吧。</p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>Mariadb、monggodb </p><h3 id="人脸与姿态识别"><a href="#人脸与姿态识别" class="headerlink" title="人脸与姿态识别"></a>人脸与姿态识别</h3><p>tensflow</p><h3 id="很多我没用过的"><a href="#很多我没用过的" class="headerlink" title="很多我没用过的"></a>很多我没用过的</h3><p>kafka、redis、python、gcc…………</p><p>内置的应用太多了，可以自行下载体验，或者后期补上一个图&#x2F;&#x2F;todo，内置的不好玩就自行安装官方的arm版软件即可。后面将对本人涉猎过的可玩性进行详细分析。</p><h2 id="可玩性详细分析"><a href="#可玩性详细分析" class="headerlink" title="可玩性详细分析"></a>可玩性详细分析</h2><h3 id="SSH连接"><a href="#SSH连接" class="headerlink" title="SSH连接"></a>SSH连接</h3><p>默认密码<code>aidlux</code>，使用<code>passwd</code>修改密码，然后就可以使用<code>ssh</code>连接aidlux了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@host:9022</span><br></pre></td></tr></table></figure><h3 id="Aidlux-远程访问桌面"><a href="#Aidlux-远程访问桌面" class="headerlink" title="Aidlux 远程访问桌面"></a>Aidlux 远程访问桌面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8000</span><br></pre></td></tr></table></figure><h3 id="xfce4与VNC"><a href="#xfce4与VNC" class="headerlink" title="xfce4与VNC"></a>xfce4与VNC</h3><p>xfce4与VNC共同实现了Linux的图形化桌面，由于这肉眼可见的延迟，我就不太喜欢用了，既然踩过坑了还是讲一下吧。<br>之前是因为idea需要图形界面才能启动才踩的这个坑，Aidlux的老版本，那时候叫Aidlearning，老版本是内置有xfce4和VNC的，新版本好像要自己安装了。具体要去官网的开发者社区搜索<a href="https://community.aidlux.com/postDetail/313">AidLux平台XFCE4桌面安装指南&amp;配置无密码启动</a></p><h4 id="VNC-远程访问地址"><a href="#VNC-远程访问地址" class="headerlink" title="VNC 远程访问地址"></a>VNC 远程访问地址</h4><p>vnc默认密码<code>aidlux</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhsot:6080/vnc.html</span><br></pre></td></tr></table></figure><h4 id="设置xfce4分辨率"><a href="#设置xfce4分辨率" class="headerlink" title="设置xfce4分辨率"></a>设置xfce4分辨率</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/vncserver-start</span><br></pre></td></tr></table></figure><h4 id="设置VNC免输密码登录"><a href="#设置VNC免输密码登录" class="headerlink" title="设置VNC免输密码登录"></a>设置VNC免输密码登录</h4><p>&#x2F;home&#x2F;applications&#x2F;xfce4&#x2F;index.html</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*将该文件script中的代码替换为如下内容，注意password的内容为你安装xfce4时设置的密码：*/</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;http://&#x27;</span> + <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hostname</span> + <span class="string">&#x27;:6080/vnc.html?host=&#x27;</span> + <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hostname</span> + <span class="string">&#x27;&amp;port=6080&amp;password=aidlux&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h3><h4 id="VSCode远程"><a href="#VSCode远程" class="headerlink" title="VSCode远程"></a>VSCode远程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）code-server    http://localhst:8008</span><br><span class="line"></span><br><span class="line">（2）vscode         http://localhst:8009</span><br></pre></td></tr></table></figure><h4 id="历史遗留问题及解决方案"><a href="#历史遗留问题及解决方案" class="headerlink" title="历史遗留问题及解决方案"></a>历史遗留问题及解决方案</h4><p>应用中心和aid中为大家提供了两个版本的vscode ide。两者都是vscode的ide，区别在于二者集成的版本不同，另外集成环境也有所差异。vscode较为稳定，但不支持较老的设备，code-server能兼容较老的一些设备，但稳定性比vscode稍差。</p><p>vscode是使用官网最新的v1.61.0编译的arm版本，稳定性较好，也支持更多的新特性。但对于浏览器有一定要求，低版本webview的手机打开vscode会存在白屏，无法使用的情况，但使用web桌面或者桌面浏览器访问是可以打开并且使用的。</p><p>经测试，Android 系统 webview版本大于等于83是可以正常打开并使用的。</p><p>为了能有更愉快的使用体验，建议使用vscode，因webview版本较低的情况无法使用，可考虑升级webview解决该问题。我</p><h3 id="Mariadb"><a href="#Mariadb" class="headerlink" title="Mariadb"></a>Mariadb</h3><p>MariaDB的部分先偷个懒，可以参考国光Termux的Mariadb部分，<a href="https://www.sqlsec.com/2018/05/termux.html">Termux 高级终端安装使用配置教程</a></p><p>（1）安装</p><p>（2）设置远程连接</p><h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3><p>应用中心点击即可安装nodejs</p><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><p>（1）安装</p><p>一般地，在安装了nodejs后会带有npm包管理器，可以使用npm安装hexo了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装 hexo，我菜鸡不想搞局部安装，所以我全局安装了</span></span><br><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>（2）新建项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将新建一个名为 projectName的 hexo工程</span></span><br><span class="line">hexo init [projectName]</span><br><span class="line"><span class="comment"># 将当前文件夹初始化为hexo工程</span></span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>（3）安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> projectName</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>（4）新建文章</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一个 fileName.md，这将在 source/_posts，生成一个对应的markdown文件</span></span><br><span class="line">hexo new <span class="string">&quot;fileName&quot;</span></span><br></pre></td></tr></table></figure><p>（5）启动hexo服务并访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>hexo默认访问地址：<a href="http://localhost4000/">http://localhost4000</a></p><p>（6）清除缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清除 db.json和 public内的 web资源文件，删除 markdown文章后，出现 markdown文章和 web资源文章数量不一致时使用</span></span><br><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>（7）导出为Web资源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line"><span class="comment"># 全称是 hexo generate，这将会在hexo项目根目录生成一个`public`文件夹存放hexo转换后的web静态资源，部署为web项目时只需要将public/index.html设置为首页即可</span></span><br></pre></td></tr></table></figure><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p>疑似因为乞丐版Aidlux的限制，监视数量超过限制，偶尔出现无法启动hexo服务的情况，所以选择将hexo导出为web资源，通过nginx部署web项目。</p><p>（1）安装</p><p><strong>应用中心点击即可下载</strong></p><p>（2）配置</p><p><code>sites-available</code>存放每个项目的配置 ，<code>sites-enabled</code>存放的是每个配置的软连接。</p><p>我们只需要在<code>sites-available</code>新建自己的配置，再在<code>sites-enabled</code>生成该配置的软链接即可，nginx启动时依赖的是配置的软链接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复制 default默认配置文件，修改配置文件为 hexo项目专用</span></span><br><span class="line"><span class="built_in">cp</span> /etc/nginx/sites-available/default /etc/nginx/sites-available/hexo</span><br><span class="line">vim /etc/nginx/sites-available/hexo</span><br><span class="line"><span class="comment"># 配置hexo项目端口，web静态资源根目录，首页资源文件</span></span><br><span class="line">server &#123;</span><br><span class="line">        listen 4000 default_server;</span><br><span class="line">        listen [::]:4000 default_server;</span><br><span class="line">        root /usr/local/workspace/blog/public;</span><br><span class="line">        index index.html index.htm index.nginx-debian.html;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#为hexo项目配置生成软链接，ln -s 源文件 软链接快捷方式</span></span><br><span class="line"><span class="built_in">ln</span> -s /etc/nginx/sites-available/hexo /etc/nginx/sites-enabled/hexo</span><br><span class="line"><span class="comment">#可以删除不必要的软链接，只留下hexo项目的软链接，提高效率</span></span><br></pre></td></tr></table></figure><p>（3）启动与停止</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">nginx</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure><h3 id="SVN"><a href="#SVN" class="headerlink" title="SVN"></a>SVN</h3><p>（1）安装</p><p>（2）配置</p><p>（3）设置SVN自启动，详情见<code>环境变量和自启动autoSvn</code></p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><h3 id="环境变量和自启动"><a href="#环境变量和自启动" class="headerlink" title="环境变量和自启动"></a>环境变量和自启动</h3><p>Aidlux 1.2 版本之前在<code>/root/.bashrc</code>设置环境变量和自启动。但自启动设置过多时，终端启动效率低。</p><p>Alidux 1.2 版本开始，新增自启动配置<code>/root/.rc.local</code>优化终端启动速度，环境变量仍可在<code>/root/.bashrc</code>配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">vim /root/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment">#jdk evn</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/jdk1.8.0_311</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib</span><br><span class="line"><span class="comment">#autoSvn</span></span><br><span class="line">svnserve -d -r /usr/local/svn</span><br><span class="line"><span class="comment"># set maven environment</span></span><br><span class="line"><span class="built_in">export</span> MAVEN_HOME=/usr/local/apache-maven-3.8.2</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:<span class="variable">$&#123;MAVEN_HOME&#125;</span>/bin</span><br><span class="line"><span class="comment"># autoHexo //todo</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root;</span><br><span class="line"><span class="comment"># su demo;</span></span><br><span class="line"><span class="built_in">source</span> ./.f.sh</span><br><span class="line">./.e.sh</span><br><span class="line"><span class="built_in">cd</span> /home;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
