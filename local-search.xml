<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Elasticsearch入门</title>
      <link href="/2024/10/02/Elasticsearch%E5%85%A5%E9%97%A8/"/>
      <url>/2024/10/02/Elasticsearch%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Elasticsearch 是一个分布式搜索和分析引擎（以下简称 ES）。<br>为什么要使用 ES？要知道，在这之前，我们的搜索大部分是基于关系型数据库的 sql 查询。<br>因为 ES 支持 JSON 结构化存储，提供 restfulApi 存取，接近实时的查询速度。<br>高可用，系统无中断地执行功能的能力，代表了系统的可用性程度。<br>水平扩充，可以通过增加主机数量，来提升吞吐量。</p><h2 id="Elasticsearch-架构"><a href="#Elasticsearch-架构" class="headerlink" title="Elasticsearch 架构"></a>Elasticsearch 架构</h2><p><img src="/img/Elasticsearch%E5%85%A5%E9%97%A8/elasticSearch%E6%9E%B6%E6%9E%84.drawio.svg"></p><ul><li>Node<br>一个安装有 ES 的 server</li><li>Cluster<br>一群安装有 ES 的 server</li><li><code>ES.Field &lt;==&gt; sql.Column</code><br>Field 是 ES 存储的最小单位，相当于关系型数据库的 Column</li><li><code>ES.Document &lt;==&gt; sql.Record</code><br>多个 Field 组合成一个 Document，相当于关系型数据库的 Record，每一个 Document 都有一个唯一的 ID 作为区分</li><li><code>ES.Type &lt;==&gt; sql.Table</code><br>相当于关系型数据库的 Table，每个 Document 都被分在 Type 里</li><li><code>ES.Index &lt;==&gt;sql.Database</code><br>相当于关系型数据库的 Database，每个 Type 都被分在 Index 里</li><li>Shard<br>Index 数据的物理分片，Index 里的数据会被分成多个 Shard 分散在不同的 Node 里</li></ul><h2 id="谈谈-ES-的-index"><a href="#谈谈-ES-的-index" class="headerlink" title="谈谈 ES 的 index"></a>谈谈 ES 的 index</h2><p>ES 的 index 实际上只是一个或多个物理分片的逻辑分组，其中每个分片实际上是一个自包含 index。通过将 index 中的 document 分布在多个分片上，并将这些分片发布在多个 node 上，ES 可以确保冗余，这既可以防止硬件故障，又可以在将 node 添加到集群时增加查询容量。</p><h2 id="谈谈-index-的-shard"><a href="#谈谈-index-的-shard" class="headerlink" title="谈谈 index 的 shard"></a>谈谈 index 的 shard</h2><ul><li>Primary Shard<br>一个 index 里的 document 会被分配到多个 Primary Shard 上</li><li>Replica Shard<br>Primary Shard 的备份，Replica Shard 会被分配到与 Primary Shard 不同的 node 上。当 Primary Shard 挂掉的时候，Replica Shard 会自动升级成 Primary Shard。Replica Shard 可以提高查询请求的吞吐量</li></ul><h2 id="Shard-的数量设置"><a href="#Shard-的数量设置" class="headerlink" title="Shard 的数量设置"></a>Shard 的数量设置</h2><p>Primary Shard 的数量在 create index 后就不能修改。<br>Replica Shard 的数量可以动态调整。</p><h2 id="谈谈-Primary-Shard-里的-document-分配"><a href="#谈谈-Primary-Shard-里的-document-分配" class="headerlink" title="谈谈 Primary Shard 里的 document 分配"></a>谈谈 Primary Shard 里的 document 分配</h2><p>如何得知 document 要分配到哪个 Primary Shard？<br>shard &#x3D; hash{routing}% number_of_primary_shards<br>routing 默认是 document 的 id<br>ES 的 Hash 函数会导致 Primary Shard 的数量不能动态改变</p><h2 id="ES-Cluster-Health-集群健康"><a href="#ES-Cluster-Health-集群健康" class="headerlink" title="ES Cluster Health 集群健康"></a>ES Cluster Health 集群健康</h2><ul><li>GREEN<br>ALL primary and replica shards are active.</li><li>YELLOW<br>ALL primary shards are active, but not all replica shards are active.</li><li>RED<br>Not all primary shards are active.</li></ul><h2 id="distributed-document-store-（分布式-document-存储）"><a href="#distributed-document-store-（分布式-document-存储）" class="headerlink" title="distributed document store （分布式 document 存储）"></a>distributed document store （分布式 document 存储）</h2><p>ES 的 Hash 函数是固定的，所以每个 Node 都知道要把 document 的请求分配给哪个 Shard</p><h3 id="update-document"><a href="#update-document" class="headerlink" title="update document"></a>update document</h3><p><img src="/img/Elasticsearch%E5%85%A5%E9%97%A8/elasticSearch_update_document.drawio.svg"><br>user发送一个create&#x2F;delete index的请求给Node1。<br>Node1通过Document id判断出document分配在Shard0里。<br>Node1把请求转发给Node3.PrimaryShard0。<br>Node3.PrimaryShard0执行update document，然后并行发送请求去update non-Node3.ReplicaShards。<br>等到所有请求都完成，Node3响应给Node1，Node1再响应给到user。</p><h3 id="query-document"><a href="#query-document" class="headerlink" title="query document"></a>query document</h3><p><img src="/img/Elasticsearch%E5%85%A5%E9%97%A8/elasticSearch_query_document.drawio.svg"><br>user发送一个get请求给Node1。<br>Node1通过Document id判断出document分配在Shard0里。<br>Shard0有3个（Primary x1 + Replica x2），Node1通过轮询决定将请求转发给Node2。<br>Node2将document响应给Node1，Node1再响应给到user。</p><h2 id="待补充"><a href="#待补充" class="headerlink" title="待补充"></a>待补充</h2><p>ES分页查询问题<br>ES数据持久化过程</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MQ消息队列中间件</title>
      <link href="/2024/08/22/MQ%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
      <url>/2024/08/22/MQ%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>MQ 全称为 Message Queue, 消息队列</p><h2 id="MQ-消息队列中间件的应用场景"><a href="#MQ-消息队列中间件的应用场景" class="headerlink" title="MQ 消息队列中间件的应用场景"></a>MQ 消息队列中间件的应用场景</h2><p>为什么要使用 MQ 消息队列中间件？</p><ul><li>异步&#x2F;并行处理<br>有并发编程的味道了？，但这不是以往单独一个进程里的多线程异步并行，而是可以跨进程&#x2F;跨计算机的，众所周知，不同计算机的网络间进程间通信需要借助因特网。</li><li>应用解耦</li><li>流量削峰<br>在处理高并发的库存扣减时，<br>先用 redis 把热点数据库存数量存在内存，用带事务的 MQ 消息中间件，把库存依次写入数据库，减轻数据库的压力</li></ul><h2 id="JMS"><a href="#JMS" class="headerlink" title="JMS"></a>JMS</h2><p>和那些 JDBC, Servlet 一样，JMS 也是 Java 规范的其中之一，JMS(Java Messaging Service) ，是 Java 消息中间件的技术规范。<br>JMS 使你能够通过消息收发服务（有时称为消息中介程序或路由器）从一个 JMS 客户机向另一个 JML 客户机发送消息。消息是 JMS 中的一种类型对象，由两部分组成：报头和消息主体。报头由路由信息以及有关该消息的元数据组成。消息主体则携带着应用程序的数据或有效负载。</p><h2 id="Java-开发中常用的-MQ-中间件"><a href="#Java-开发中常用的-MQ-中间件" class="headerlink" title="Java 开发中常用的 MQ 中间件"></a>Java 开发中常用的 MQ 中间件</h2><p>这些 MQ 中间件是基于 JMS 规范实现了的，所以能够在 Java 开发中使用<br><img src="/img/MQ%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%B8%AD%E9%97%B4%E4%BB%B6/2024-08-22-23-12-39.png"><br>ActiveMQ 比较容易入门，那我们就用它来练练手吧</p><h2 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h2><p>基本的运行和停止和示例程序可以在这里查看详细文档 yourActiveMqRootPath&#x2F;docs&#x2F;user-guide.html<br>管理员网页面板端口 8161 admin&#x2F;admin</p><h3 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h3><h4 id="示例程序应用场景-tcp-openwire"><a href="#示例程序应用场景-tcp-openwire" class="headerlink" title="示例程序应用场景.tcp / openwire"></a><code>示例程序应用场景.tcp / openwire</code></h4><h4 id="示例程序应用场景-amqp"><a href="#示例程序应用场景-amqp" class="headerlink" title="示例程序应用场景.amqp"></a>示例程序应用场景.amqp</h4><h4 id="示例程序应用场景-mqtt"><a href="#示例程序应用场景-mqtt" class="headerlink" title="示例程序应用场景.mqtt"></a>示例程序应用场景.mqtt</h4><h4 id="示例程序应用场景-stomp"><a href="#示例程序应用场景-stomp" class="headerlink" title="示例程序应用场景.stomp"></a>示例程序应用场景.stomp</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>rsync入门</title>
      <link href="/2024/08/04/rsync%E5%85%A5%E9%97%A8/"/>
      <url>/2024/08/04/rsync%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>rsync 是一个常用的 Linux 应用程序，用于文件同步。</p><p>它可以在本地计算机与远程计算机之间，或者两个本地目录之间同步文件（但不支持两台远程计算机之间的同步）。它也可以当作文件复制工具，替代 cp 和 mv 命令。<br>它名称里面的 r 指的是 remote，rsync 其实就是”远程同步”（remote sync）的意思。与其他文件传输工具（如 FTP 或 scp）不同，rsync 的最大特点是会检查发送方和接收方已有的文件，仅传输有变动的部分（默认规则是文件大小或修改时间有变动）。</p><p>可以有效地在远程系统中复制和同步文件。<br>支持复制链接，设备，所有者，组和权限。<br>它比 scp(Secure Copy)更快，因为 rsync 使用远程更新协议，它只允许传输两组文件之间的差异。第一次，它将文件或目录的全部内容从源复制到目标，但从下一次开始，它只将已更改的块和字节复制到目标。<br>Rsync 在两端发送和接收数据时使用压缩和解压方法，因此消耗的带宽更少。</p><h2 id="第一个-rsync-命令"><a href="#第一个-rsync-命令" class="headerlink" title="第一个 rsync 命令"></a>第一个 rsync 命令</h2><p><code>apt install rsync</code><br>Grsync 是 rsync 的图形化界面工具，可以用来学习运行 rsync 的命令<br><code>apt install grsync</code><br><img src="/img/rsync%E5%85%A5%E9%97%A8/2024-08-04-22-06-26.png" alt="Grsync for Debian"><br>比如图片的第三步的按钮是预览，第四步的按钮才是不带-n 参数运行 rsync 的命令，真正意义上的执行<br>r,n,t,v,s<br>-r 表示递归，即包含子目录<br>-n 模拟命令执行的结果，并不真的执行命令<br>-t 保留修改时间<br>-v 将结果输出到终端<br>–progress 在传输过程中显示进度<br>-s 使用协议安全地发送参数</p><p>这样一来我们就得到了基于 rsync 的单台 Linux 内的复制粘贴命令行<br><code>rsync -r -t -v --progress -s /file /toNewPath</code><br>当然，更常用的是下面这条语句-a参数替代了-r，除了可以递归同步以外，还可以同步元信息（比如修改时间、权限等）。<br><code>rsync -av /file /toNewPath</code></p><h2 id="在-Windows-Git-Bash-上使用-rsync"><a href="#在-Windows-Git-Bash-上使用-rsync" class="headerlink" title="在 Windows Git Bash 上使用 rsync"></a>在 Windows Git Bash 上使用 rsync</h2><h3 id="安装-zstd"><a href="#安装-zstd" class="headerlink" title="安装 zstd"></a>安装 zstd</h3><p>zstd（Zstandard） 是 facebook 的一种压缩算法<br><a href="https://github.com/facebook/zstd/releases/download/v1.4.4/zstd-v1.4.4-win64.zip">https://github.com/facebook/zstd/releases/download/v1.4.4/zstd-v1.4.4-win64.zip</a><br>下载后解压，添加到 path 环境变量，方便后面随处使用<br>zstd.exe –help</p><h3 id="获取-rsync-exe"><a href="#获取-rsync-exe" class="headerlink" title="获取 rsync.exe"></a>获取 rsync.exe</h3><p><a href="https://repo.msys2.org/msys/x86_64/rsync-3.3.0-1-x86_64.pkg.tar.zst">https://repo.msys2.org/msys/x86_64/rsync-3.3.0-1-x86_64.pkg.tar.zst</a><br>从上述站点下载最新的 rsync 压缩文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> ~/Downloads</span><br><span class="line"><span class="built_in">mkdir</span> rsync</span><br><span class="line"><span class="built_in">mv</span> rsync-3.2.3-1-x86_64.pkg.tar.zst ./rsync</span><br><span class="line"><span class="built_in">cd</span> ./rsync</span><br><span class="line">zstd -d rsync-3.2.3-1-x86_64.pkg.tar.zst</span><br><span class="line">tar -xvf rsync-3.2.3-1-x86_64.pkg.tar</span><br></pre></td></tr></table></figure><p>解压后可以看到 rsync.exe 位于 ~&#x2F;Downloads&#x2F;rsync&#x2F;usr&#x2F;bin 目录中，那我们把 rsync.exe 复制到 git bash 里面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> ~/Downloads/rsync/usr/bin/rsync.exe C:\Program Files\Git\usr\bin</span><br></pre></td></tr></table></figure><p>尝试 rsync.exe –help，应该会有错误，你可能缺少了这些<br>msys-xxhash-0.8.0.dll<br>msys-zstd-1.dll<br>msys-crypto-3.dll<br>他们应该都可以从<a href="https://repo.msys2.org/msys/x86_64/">https://repo.msys2.org/msys/x86_64/</a> 得到<br><a href="https://repo.msys2.org/msys/x86_64/libxxhash-0.8.2-1-x86_64.pkg.tar.zst">https://repo.msys2.org/msys/x86_64/libxxhash-0.8.2-1-x86_64.pkg.tar.zst</a><br><a href="https://repo.msys2.org/msys/x86_64/libzstd-1.5.6-1-x86_64.pkg.tar.zst">https://repo.msys2.org/msys/x86_64/libzstd-1.5.6-1-x86_64.pkg.tar.zst</a></p><p>唯独 msys-crypto-3.dll 不在里面，所以 msys-crypto-3.dll 我是另外从 Redis-7.0.15-Windows-x64-with-Service 里面拿的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> ~/Downloads/libxxhash/usr/bin/msys-xxhash-0.dll C:\Program Files\Git\usr\bin</span><br><span class="line"><span class="built_in">mv</span> ~/Downloads/libzstd/usr/bin/msys-zstd-1.dll C:\Program Files\Git\usr\bin</span><br></pre></td></tr></table></figure><p>再次尝试 rsync.exe –help，应该没问题了<br>我们可以直接参考上面 Grsync 生成的 copy 命令试一试<br><code>rsync -r -t -v --progress -s /file /toNewPath</code><br>完美运行<br><img src="/img/rsync%E5%85%A5%E9%97%A8/2024-08-04-23-22-57.png"></p><h2 id="在-Windows-cwrsync-上使用-rsync"><a href="#在-Windows-cwrsync-上使用-rsync" class="headerlink" title="在 Windows cwrsync 上使用 rsync"></a>在 Windows cwrsync 上使用 rsync</h2><p>cwrsync 服务端是付费的，这里我们只使用 cwrsync 客户端。<br><a href="https://www.itefix.net/cwrsync/client/downloads">https://www.itefix.net/cwrsync/client/downloads</a><br>找到最新版本 cwrsync 客户端，下载解压，添加到 path 环境变量即可<br><code>rsync -r -t -v --progress -s /file /toNewPath</code><br>如果有错误，可能是和 Windows 系统的 ssh 冲突<br>可以简单粗暴修改环境变量时把 cwrsync 环境变量置顶<br><img src="/img/rsync%E5%85%A5%E9%97%A8/2024-08-09-22-00-04.png"></p><p>完美运行<br><img src="/img/rsync%E5%85%A5%E9%97%A8/2024-08-09-21-53-12.png"><br>可以看到 cwrsync 的命令行，个人觉得不如 windows-git-bash 的命令行优雅</p><h2 id="在不同计算机之间通过-rsync-复制文件"><a href="#在不同计算机之间通过-rsync-复制文件" class="headerlink" title="在不同计算机之间通过 rsync 复制文件"></a>在不同计算机之间通过 rsync 复制文件</h2><p><code>两台计算机都要有rsync环境</code><br><img src="/img/rsync%E5%85%A5%E9%97%A8/2024-08-06-22-00-50.png"></p><p>左边是用户正在输入命令的机器环境</p><ul><li>linux &lt;–&gt; linux</li><li>windows git-bash <del>OR cwrsync</del> &lt;–&gt; linux<br><code>这次我站windows-git-bash这边，cwrsync没有那么优雅</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## git-bash</span></span><br><span class="line"><span class="comment"># -a参数替代了-r，除了可以递归同步以外，还可以同步元信息（比如修改时间、权限等）。</span></span><br><span class="line">rsync.exe -av -e <span class="string">&#x27;ssh -p 22&#x27;</span> /g/Pictures/无中生有.png root@192.168.43.1:/root/qa2Rsync/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你ssh端口是默认的话可以去掉-e的参数</span></span><br><span class="line">rsync.exe -av /g/Pictures/无中生有.png root@192.168.43.1:/root/qa2Rsync/</span><br><span class="line"><span class="comment">## cwrsync</span></span><br><span class="line">rsync.exe -av -e <span class="string">&#x27;ssh -p 22&#x27;</span> cygdrive/G/Pictures/无中生有.png root@192.168.43.1:/root/qa2Rsync/</span><br></pre></td></tr></table></figure><p><img src="/img/rsync%E5%85%A5%E9%97%A8/2024-08-05-23-48-54.png"></p><ul><li><del>linux &lt;–&gt; windows git-bash</del>rsync 默认 ssh 连接，这种情况下尝试读取 linux 路径，但是读到的另一端是 windows 路径所以不可取</li></ul><h2 id="Windows-用户侧同步脚本编写"><a href="#Windows-用户侧同步脚本编写" class="headerlink" title="Windows 用户侧同步脚本编写"></a>Windows 用户侧同步脚本编写</h2><ul><li>git-bash<br>需要运行 git-bash 窗口，在 git-bash 的命令行内执行 rsync<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">start <span class="string">&quot;&quot;</span> <span class="string">&quot;F:\env\Git\git-bash.exe&quot;</span> -c <span class="string">&quot;echo &#x27;hello windows git-bash~~&#x27; ;bash&quot;</span></span></span><br><span class="line">start &quot;&quot; &quot;F:\env\Git\git-bash.exe&quot; -c &quot;&#x27;your rsync command&#x27; ;bash&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">末尾的 ;bash 可以让 git-bash 窗口不关闭</span></span><br></pre></td></tr></table></figure></li><li>cwrsync<br>可以直接在 Windows 命令行使用 rsync<br>但由于命令行不太优雅，我并不打算使用这个东西</li></ul><h2 id="增量备份"><a href="#增量备份" class="headerlink" title="增量备份"></a>增量备份</h2><p>用前面学到的命令默认就是增量备份<br><code>rsync -av /Path/ /BakToNewPath/</code></p><p>排除备份内容，允许source文件夹内有新增但不备份到target文件夹，<br>那么此时我们可以使用exclude参数，传入排除内容在source中的相对路径<br><code>rsync -av --exclude /excludeFile /file /BakToNewPath</code><br><code>rsync -av --exclude /excludeFolder/ /Path/ /BakToNewPath/</code><br>如果有多个exclude排除项时<br><code>rsync -av --exclude-from /exclude-obj.txt /Path/ /BakToNewPath/</code><br>vim exclude-obj.txt内容如下</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file1</span><br><span class="line">file2</span><br><span class="line">Folder1</span><br><span class="line">Folder2</span><br></pre></td></tr></table></figure><h2 id="基于-rsync-的文件备份解决方案"><a href="#基于-rsync-的文件备份解决方案" class="headerlink" title="基于 rsync 的文件备份解决方案"></a>基于 rsync 的文件备份解决方案</h2><ul><li>1t 固态硬盘 cache<br>待办的数据对象存储在此做缓存处理，热点数据的读写</li><li>4t 机械硬盘 archive<br>不经常使用的数据对象存储在此做归档处理<br>增量备份目的地<br>未来还会用到的<br>互联网上可能搜索不到的</li><li>4t 机械硬盘 archive.image.bak<br>archive 硬盘的镜像备份盘，个人的话可以每周做一次镜像备份</li></ul><h3 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h3><p>希望能结合待办清单软件维护这样的 cache 文件夹，<br>同时存在一些预 archive 文件夹，与下文 archive 中的文件夹壹壹映射</p><h3 id="archive"><a href="#archive" class="headerlink" title="archive"></a>archive</h3><p>将数据对象 archive 归档前，还是先在 cache 硬盘中通过文件类型&#x2F;用途&#x2F;其他类型 设置预 archive 的一些文件夹比较好，然后在 rsync 时将这些预 archive 的 include 包含进来，做增量备份<br>并将待办的 exclude 排除掉</p><h3 id="archive-文件夹列表–长期更新维护"><a href="#archive-文件夹列表–长期更新维护" class="headerlink" title="archive 文件夹列表–长期更新维护"></a>archive 文件夹列表–长期更新维护</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">books</span><br><span class="line">cert</span><br><span class="line">cm311<span class="number">-5</span>s<span class="operator">-</span>runtime</span><br><span class="line">data</span><br><span class="line">data.mysql</span><br><span class="line">data.mariadb</span><br><span class="line">data.postgresql</span><br><span class="line">devices</span><br><span class="line">devices.android_arm64</span><br><span class="line">devices.tv</span><br><span class="line">devices.vr</span><br><span class="line">devices.windows_amd64</span><br><span class="line">entity_touch</span><br><span class="line">font</span><br><span class="line">henry<span class="string">&#x27;s world</span></span><br><span class="line"><span class="string">img</span></span><br><span class="line"><span class="string">music</span></span><br><span class="line"><span class="string">todoCache</span></span><br><span class="line"><span class="string">todoCache.todo</span></span><br><span class="line"><span class="string">todoCache.cache</span></span><br><span class="line"><span class="string">video</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h3 id="archive-增量同步命令–长期更新维护"><a href="#archive-增量同步命令–长期更新维护" class="headerlink" title="archive 增量同步命令–长期更新维护"></a>archive 增量同步命令–长期更新维护</h3><p>for cm311-5s<br>1t ssd<br>4t non-ssd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 真是有趣sda1 sdb1是随机对应到物理插槽上的，猜测是先挂载到操作系统的命名为sda1</span></span><br><span class="line">rsync -av --exclude aTodoCache/ /storage/sda1/HenrySSD/ /storage/sdb1/HenryNonSSD</span><br><span class="line"></span><br><span class="line">rsync -av --exclude aTodoCache/ /storage/sdb1/HenrySSD/ /storage/sda1/HenryNonSSD</span><br></pre></td></tr></table></figure><h3 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h3><p>钱包是有限的，地皮是有限的，所以存储空间也是有限的</p><ul><li>压缩后存储</li><li>代码&#x2F;软件设计<br>比如 Java 是流行的软件运行时环境，可以把 Java 设置到公共的 user 目录下，需要 Java 的直接去取就可以了，没必要每个软件都存储一个 Java 运行环境</li></ul><h2 id="非常感谢"><a href="#非常感谢" class="headerlink" title="非常感谢"></a>非常感谢</h2><p>[How to use rsync on Git Bash] (<a href="https://shchae7.medium.com/how-to-use-rsync-on-git-bash-6c6bba6a03ca">https://shchae7.medium.com/how-to-use-rsync-on-git-bash-6c6bba6a03ca</a>)<br>[^1]: rsync 用法教程 阮一峰[<a href="https://www.ruanyifeng.com/blog/2020/08/rsync.html">https://www.ruanyifeng.com/blog/2020/08/rsync.html</a> ]</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker容器</title>
      <link href="/2024/07/29/docker%E5%AE%B9%E5%99%A8/"/>
      <url>/2024/07/29/docker%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="使用-docker-的理由"><a href="#使用-docker-的理由" class="headerlink" title="使用 docker 的理由"></a>使用 docker 的理由</h2><p>使用 docker 的理由简单来说就是两个</p><ul><li>使用 docker 进行应用的移植&#x2F;分发，</li><li>需要运行使用 docker 分发的应用</li></ul><p>Docker 是一种应用容器化技术。通过将应用程序和它的依赖一起打包成为一个可移植的容器，我们可以在不同环境上快速、可靠地运行相同的程序。</p><p>以上的描述可能略微有些抽象。简单来说，设想你需要跑一个别人发给你的代码，而此时你首先需要配置环境。然而，各种不同的硬件、操作系统、编译工具链使得在不同的地方配置环境极为复杂且花费时间，这一点想必各位同学在各种课程上深有体会。Docker 解决的正是这一问题：通过直接将环境与程序打包在一起分发这种既暴力又优雅的方式，只需要下载容器，就能在不同的环境上完全一致地运行程序，免去了配置环境的麻烦以及环境不同带来的运行差异。在软件工程等课程上，你将会大量应用本节课所学到的知识，来将你的应用在不同的环境上一致地部署。</p><p>通过学习本课程，你将能够利用 Docker 这一强大的工具来解决环境配置问题，并方便快速地分发你的应用。</p><h2 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>任务栏搜索功能，启用”适用于 Linux 的 Windows 子系统” + “虚拟机平台”<br>可以通过 http 请求下载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/microsoft/WSL/releases/download/2.2.4/Microsoft.WSL_2.2.4.0_x64_ARM64.msixbundle</span><br></pre></td></tr></table></figure><p>这样就等价于下面用<br>管理员权限打开命令提示符，安装 WSL2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br><span class="line">wsl --update --web-download</span><br></pre></td></tr></table></figure><p>下载 Windows 版本 Docker Desktop 安装包 双击安装即可。</p><p>可选: 如果想自己指定安装目录，可以使用命令行的方式 参数 <code>--installation-dir=D:\Docker</code>可以指定安装位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start /w &quot;&quot; &quot;Docker Desktop Installer.exe&quot; install --installation-dir=D:\Docker</span><br></pre></td></tr></table></figure><p>一般没问题的话，到这里就可以在命令行使用 docker 命令了，比如<code>docker --help</code><br><img src="/img/docker%E5%AE%B9%E5%99%A8/2024-07-29-22-48-28.png"></p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>如果你还没有安装Linux的话，建议使用AlpineOS这个Linux作为运行docker的操作系统</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>创建SSH密钥来连接Github或Gitlab</title>
      <link href="/2024/07/28/%E5%88%9B%E5%BB%BASSH%E5%AF%86%E9%92%A5%E6%9D%A5%E8%BF%9E%E6%8E%A5Github%E6%88%96Gitlab/"/>
      <url>/2024/07/28/%E5%88%9B%E5%BB%BASSH%E5%AF%86%E9%92%A5%E6%9D%A5%E8%BF%9E%E6%8E%A5Github%E6%88%96Gitlab/</url>
      
        <content type="html"><![CDATA[<p>当您通过 Github 或 Gitlab 使用 Git 时，您经常需要使用您的用户名和密码进行身份验证。SSH 密钥是一种替代方法，用于在每次与存储库交互时都无需提供上述凭据即可识别自己。您只需要与该服务共享您的公钥，私钥将一直存储在您的计算机中，因此当密钥匹配时，您可以完全访问您的资料。</p><p>例如，如果您尝试通过 SSH 克隆其中一个存储库，如下所示：<br>在 Windows 中，如果未正确配置任何 SSH 密钥，则会显示以下消息：<br>在本文中，我将向您解释如何轻松生成自己的 SSH 密钥来识别您的设备。</p><h2 id="安装-PuTTYGen"><a href="#安装-PuTTYGen" class="headerlink" title="安装 PuTTYGen"></a>安装 PuTTYGen</h2><p>要使用存储库进行 SSH 身份验证，您要做的第一件事是在系统中安装 PuTTYGen。此应用程序包含在官方网站上的PuTTY安装设置中。但是，如果您不想要整个 PuTTy 捆绑包，您也可以下载该文件。<code>puttygen.exe</code></p><p>PuTTYGen 是一个 RSA 和 DSA 密钥生成实用程序，将用于在 Windows 环境中创建我们的 SSH 密钥。</p><h2 id="生成-SSH-密钥"><a href="#生成-SSH-密钥" class="headerlink" title="生成 SSH 密钥"></a>生成 SSH 密钥</h2><p>启动 PuttyGen 二进制文件并通过单击“Generate”开始创建 SSH 密钥，之后，系统会要求您将鼠标移到空白区域以在您的密钥中生成一些随机性：<br><img src="/img/%E5%88%9B%E5%BB%BASSH%E5%AF%86%E9%92%A5%E6%9D%A5%E8%BF%9E%E6%8E%A5Github%E6%88%96Gitlab/2024-07-29-00-03-49.png"><br>此时移动鼠标后，将生成 SSH 密钥，您必须填写以下字段：</p><p><code>Key comment</code>：用于此键的名称，通常是您现在正在使用的计算机的名称。<br><code>Key passphrase</code>：这将是您每次需要解锁密钥时需要提供的密码。</p><p><img src="/img/%E5%88%9B%E5%BB%BASSH%E5%AF%86%E9%92%A5%E6%9D%A5%E8%BF%9E%E6%8E%A5Github%E6%88%96Gitlab/2024-07-29-00-05-31.png"></p><p>现在我们有了 SSH 密钥的密码和名称，您现在可以继续以 Windows 所需的格式保存。</p><h2 id="在用户目录中创建-ssh-文件夹"><a href="#在用户目录中创建-ssh-文件夹" class="headerlink" title="在用户目录中创建 .ssh 文件夹"></a>在用户目录中创建 .ssh 文件夹</h2><p>在当前用户的目录中创建 .ssh 文件夹。例如，在我的计算机上，它位于 。所以我在那里创建了.ssh文件夹（你可以获取带有环境变量的目录）：C:&#x2F;Users&#x2F;sdkca%USERPROFILE%<br><img src="/img/%E5%88%9B%E5%BB%BASSH%E5%AF%86%E9%92%A5%E6%9D%A5%E8%BF%9E%E6%8E%A5Github%E6%88%96Gitlab/2024-07-29-00-06-49.png"><br>您将把所有创建的文件存储在上述目录中。</p><h2 id="存储PuTTY私钥（PPK文件）"><a href="#存储PuTTY私钥（PPK文件）" class="headerlink" title="存储PuTTY私钥（PPK文件）"></a>存储PuTTY私钥（PPK文件）</h2><p>从我们现在生成的 SSH 密钥生成的第一个文件是带有扩展名的文件，您可以通过单击<code>&quot;Save private key&quot;</code>“保存私钥”来生成：<code>.ppk</code></p><p><img src="/img/%E5%88%9B%E5%BB%BASSH%E5%AF%86%E9%92%A5%E6%9D%A5%E8%BF%9E%E6%8E%A5Github%E6%88%96Gitlab/2024-07-29-00-07-41.png"></p><p>您可以提供一个自定义名称，在我们的例子中，我们将使用与注释“ryzen93950x.ppk”相同的名称，并将存储在前面用户目录的.ssh目录中。.ppk 文件的内容如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PuTTY-User-Key-File-2: ssh-rsa</span><br><span class="line">Encryption: aes256-cbc</span><br><span class="line">Comment: Ryzen 9 3950x</span><br><span class="line">Public-Lines: 6</span><br><span class="line">AAAAB3NzaC1yc2EAAAABJQAAAQEAhDo/PTt7Ag2q5sAeE3zKfeGGedMVKK9q8BsQ</span><br><span class="line">aYCES7HiE3wzTEp+jPAXDZuQmbhozZQM2whsQuqPmcqg+vkTS86eFkTVjjEeSyB0</span><br><span class="line">F1pWGq4jg/mvbZ0jSjlM5mjbY9cwPpog6HleaCDovNkcapdPm64+FN0F9it5hwY1</span><br><span class="line">sdzdSsqfxqzt8JlcwB8zKw71/ThE9fynQNar+utL2LrPPWS2bR4ZlI1WlQSWAkd2</span><br><span class="line">9z3vk78zxRyuL5wdQf9j7Ay42j7bwkTcjCucC0T0iDeK+KoKyMysvbQFp4SLYXQq</span><br><span class="line">xsPzU/BkEZmnqLxNzp6lShT6W1PcfNeVIH1DY1BsqtghaddHlQ==</span><br><span class="line">Private-Lines: 14</span><br><span class="line">ksW4kvFIMD4OqwgDYbEkhiB0l1uNsfj2uXw/lch/mHmaUSS08+2RHojc4GNDD2VG</span><br><span class="line">....</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><h2 id="存储授权密钥的-OpenSSH-公钥（id-rsa-pub-文件）"><a href="#存储授权密钥的-OpenSSH-公钥（id-rsa-pub-文件）" class="headerlink" title="存储授权密钥的 OpenSSH 公钥（id_rsa.pub 文件）"></a>存储授权密钥的 OpenSSH 公钥（id_rsa.pub 文件）</h2><p>现在，您需要在 PuTTYGen 应用程序（公钥）中间创建包含字符串的文件。该字符串用于服务器的authorized_keys文件，以便您可以访问它们：<code>id_rsa.pub</code><br><img src="/img/%E5%88%9B%E5%BB%BASSH%E5%AF%86%E9%92%A5%E6%9D%A5%E8%BF%9E%E6%8E%A5Github%E6%88%96Gitlab/2024-07-29-00-10-13.png"></p><p>复制内容并将其粘贴到用户目录的 .ssh 目录中的上述文件中。文件内容将如下所示：id_rsa.pub</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAhDo/PTt7Ag2q5sAeE3zKfeGGedMVKK9q8BsQaYCES7HiE3wzTEp+jPAXDZuQmbhozZQM2whsQuqPmcqg+vkTS86eFkTVjjEeSyB0F1pWGq4jg/mvbZ0jSjlM5mjbY9cwPpog6HleaCDovTROLOLOLOLO-DONTUSETHISKEY-USEYOUROWNKEYJlcwB8zKw71/ThE9fynQNar+utL2LrPPWS2bR4ZlI1WlQSWAkd29z3vk78zxRyuL5wdQf9j7Ay42j7bwkTcjCucC0T0iDeK+KoKyMysvbQFp4SLYXQqxsPzU/BkEZmnqLxNzp6lShT6W1PcfNeVIH1DY1BsqtghaddHlQ== Ryzen 9 3950x</span><br></pre></td></tr></table></figure><h2 id="存储-OpenSSH-密钥（id-rsa文件）"><a href="#存储-OpenSSH-密钥（id-rsa文件）" class="headerlink" title="存储 OpenSSH 密钥（id_rsa文件）"></a>存储 OpenSSH 密钥（id_rsa文件）</h2><p>最后，第三个文件将是您的身份文件，它将是 Open SSH 格式的 SSH 密钥。您需要将密钥转换为此格式，因为它是您在 Github 和 Gitlab 等工具上所需的格式。您可以通过单击PuTTYGen的<code>&quot;Conversions&quot;</code>“转换”选项卡，然后单击<code>&quot;Export OpenSSH key (force new file format)&quot;</code>“导出OpenSSH密钥（强制新文件格式）”来轻松执行此操作：<br><img src="/img/%E5%88%9B%E5%BB%BASSH%E5%AF%86%E9%92%A5%E6%9D%A5%E8%BF%9E%E6%8E%A5Github%E6%88%96Gitlab/2024-07-29-00-11-52.png"></p><p>注意：如果您不使用新的文件格式，它仍然可以工作，但是，您总是会发现警告“加载公钥”&#x2F;c&#x2F;Users&#x2F;USERNAME&#x2F;.ssh&#x2F;id_rsa“：格式无效”。</p><p>这将提示您在哪里保存文件，用作名称并将其存储在步骤#3中创建的.ssh目录中。此文件的内容应如下所示：<code>id_rsa</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">Proc-Type: 4,ENCRYPTED</span><br><span class="line">DEK-Info: DES-EDE3-CBC,920A7C839CE3CABE</span><br><span class="line"></span><br><span class="line">qWuTR1ARsILMzEGwhmr5SYFdu/MxsLKA3XTLy1dO4RYsvLqZOmloRvtZgy9VSNpg</span><br><span class="line">...............................</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完成上述所有步骤后，您将在 .ssh 目录中获得 3 个文件：<br><img src="/img/%E5%88%9B%E5%BB%BASSH%E5%AF%86%E9%92%A5%E6%9D%A5%E8%BF%9E%E6%8E%A5Github%E6%88%96Gitlab/2024-07-29-00-13-02.png"></p><h2 id="在-Github-或-Gitlab-中注册-SSH-密钥"><a href="#在-Github-或-Gitlab-中注册-SSH-密钥" class="headerlink" title="在 Github 或 Gitlab 中注册 SSH 密钥"></a>在 Github 或 Gitlab 中注册 SSH 密钥</h2><p>作为最后一步，您需要在您选择的 SSH 密钥中注册您的 OpenSSH 公钥：</p><ul><li>Gilab<br>登录到 Gitlab 并打开您的用户设置。在左侧菜单中，选择“SSH 密钥”选项并注册文件的值：<code>id_rsa.pub</code><br><img src="/img/%E5%88%9B%E5%BB%BASSH%E5%AF%86%E9%92%A5%E6%9D%A5%E8%BF%9E%E6%8E%A5Github%E6%88%96Gitlab/2024-07-29-00-14-06.png"></li><li>Github<br>登录到 Github 并通过右上角的下拉菜单打开您的用户个人设置。选择 SSH 和 GPG 密钥并注册您的密钥：<br><img src="/img/%E5%88%9B%E5%BB%BASSH%E5%AF%86%E9%92%A5%E6%9D%A5%E8%BF%9E%E6%8E%A5Github%E6%88%96Gitlab/2024-07-29-00-14-49.png"></li></ul><h2 id="使用-SSH-身份验证"><a href="#使用-SSH-身份验证" class="headerlink" title="使用 SSH 身份验证"></a>使用 SSH 身份验证</h2><p>现在，您已注册密钥，可以克隆存储库并对存储库进行更改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@gitlab.com:username/repository-name.git</span><br></pre></td></tr></table></figure><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p>由上面的章节可知，备份的时候我们只需要迁移.ssh文件夹里面的内容即可</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>新计算机网络</title>
      <link href="/2024/07/21/%E6%96%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2024/07/21/%E6%96%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="互联网-因特网-万维网"><a href="#互联网-因特网-万维网" class="headerlink" title="互联网 因特网 万维网"></a>互联网 因特网 万维网</h2><p>互联网、因特网、万维网三者的关系是：互联网包含因特网，因特网包含万维网，凡是能彼此通信的设备组成的网络就叫互联网。所以，即使仅有两台机器，不论用何种技术使其彼此通信，也叫互联网。国际标准的互联网写法是 Internet，因特网是互联网的一种。因特网可不是仅有两台机器组成的互联网，它是由上千万台设备组成的互联网。</p><p><strong>可能因特网是使用频率最高的，所以通常直接会把互联网 ≈ 因特网，即 internet ≈ Internet</strong></p><ul><li>互联网<br>互联互通.任何传输协议</li><li>因特网<br>互联互通.TCP &#x2F; IP 传输协议簇<br><code>说人话就是：首先是看自己电脑是否安装了 TCP/IP协议，其次看是否拥有一个公网地址</code></li><li>万维网<br>位于应用层的协议有很多，比如 FTP、HTTP、SMTP……。<code>但只要应用层使用的是HTTP协议，就称为万维网（World Wide Web）。</code></li></ul><h2 id="万维网通信"><a href="#万维网通信" class="headerlink" title="万维网通信"></a>万维网通信</h2><p><code>客户端</code>使用浏览器发送 HTTP 请求<br><code>服务端</code>处理来自客户端的 HTTP 请求后给客户端发送 HTTP 响应内容</p><p>万维网的通信，通常有客户端和服务端也就是两台主机，但实际上客户端和服务端可以是同一台主机</p><h3 id="一台主机——是客户端也是服务端"><a href="#一台主机——是客户端也是服务端" class="headerlink" title="一台主机——是客户端也是服务端"></a>一台主机——是客户端也是服务端</h3><p>通常最开始做 Web 应用开发的时候是这样的，在我的一台电脑用 nginx 服务器部署静态 web 应用，或者用 Tomcat 服务器部署动态 Web 应用，然后直接用浏览器客户端访问这些服务器</p><h3 id="两台主机——网线直连"><a href="#两台主机——网线直连" class="headerlink" title="两台主机——网线直连"></a>两台主机——网线直连</h3><p>这是一个无法继续拓展的万维网通信模型，所以比较冷门</p><h3 id="两台主机——连接同一个路由器"><a href="#两台主机——连接同一个路由器" class="headerlink" title="两台主机——连接同一个路由器"></a>两台主机——连接同一个路由器</h3><h3 id="两台主机——在不同的国家"><a href="#两台主机——在不同的国家" class="headerlink" title="两台主机——在不同的国家"></a>两台主机——在不同的国家</h3><h2 id="拥有公网的服务器——云服务器-or-VPS-or-个人物理机自建"><a href="#拥有公网的服务器——云服务器-or-VPS-or-个人物理机自建" class="headerlink" title="拥有公网的服务器——云服务器 or VPS or 个人物理机自建"></a>拥有公网的服务器——云服务器 or VPS or 个人物理机自建</h2><p>选择一个有公网的服务器做 HTTP 服务，然后尝试把自己的 html 部署上去</p><ul><li>server00 免费 VPS<br><a href="https://www.serv00.com/">https://www.serv00.com/</a></li><li>亚马逊云</li><li>甲骨文云</li><li>阿里云</li><li>腾讯云</li><li>华为云</li></ul><h3 id="个人物理机自建服务器"><a href="#个人物理机自建服务器" class="headerlink" title="个人物理机自建服务器"></a>个人物理机自建服务器</h3><p>需要从 ISP 那获取一条公网 IP，公网 IP 可以是动态的，但最好是静态的</p><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>时至今日，万维网通信需要升级为 HTTPS 才能安全方便地进行工作</p><p>通常会在诸如 nginx 的 HTTP 服务器内指定这两个文件 ca.key，ca.cert，那样就能够升级为支持 HTTPS 的服务器</p><p>虽然你可以使用自签名证书升级为支持 HTTPS 的服务器，但是这样在因特网传输过程中是普遍不被认可的。</p><p>所以，最好是先想办法得到一个域名然后，向 CA 机构申请证书。</p><p><a href="https://github.com/acmesh-official/acme.sh">可以使用 acme.sh</a><br>但即使是使用<code>acme.sh</code> 在构建 HTTPS 应用时同样会遇到 HTTPS 面临的挑战<br>下面会简要介绍下这些挑战，挑战的应对策略可以去看那些实现了自动 acme 协议的应用程序的文档<br><a href="https://github.com/acmesh-official/acme.sh/wiki">acme.sh 维基百科</a><br><a href="https://caddyserver.com/docs/automatic-https">caddy 自动 https 官方文档</a></p><h2 id="HTTPS-面临的挑战"><a href="#HTTPS-面临的挑战" class="headerlink" title="HTTPS 面临的挑战"></a>HTTPS 面临的挑战</h2><p>我们以另外一个 caddy 服务器应用为例，获取公开信任的 TLS 证书需要来自公开信任的第三方机构的验证。如今，此验证过程已通过 <a href="https://tools.ietf.org/html/rfc8555">ACME 协议</a> 自动化，并且可以通过以下三种方式（“挑战类型”）之一执行，如下所述。</p><p>前两种挑战类型在默认情况下是启用的。如果启用了多个挑战，Caddy 会随机选择一个，以避免意外地依赖于特定挑战。随着时间的推移，它会了解哪种挑战类型最成功，并将开始优先选择它，但如果需要，会回退到其他可用的挑战类型。</p><h3 id="HTTP-挑战"><a href="#HTTP-挑战" class="headerlink" title="HTTP 挑战"></a>HTTP 挑战</h3><p>HTTP 挑战会对候选主机名的 A&#x2F;AAAA 记录执行权威 DNS 查找，然后使用 HTTP 通过端口 80 请求临时加密资源。如果 CA 看到预期的资源，则会颁发证书。</p><p>此挑战要求端口 80 可外部访问。如果 Caddy 无法在端口 80 上监听，则来自端口 80 的数据包必须转发到 <a href="https://caddyserver.com/docs/json/apps/http/http_port/">Caddy 的 HTTP 端口</a>。</p><p>此挑战在默认情况下是启用的，不需要显式配置。</p><h3 id="TLS-ALPN-挑战"><a href="#TLS-ALPN-挑战" class="headerlink" title="TLS-ALPN 挑战"></a>TLS-ALPN 挑战</h3><p>TLS-ALPN 挑战会对候选主机名的 A&#x2F;AAAA 记录执行权威 DNS 查找，然后使用包含特殊 ServerName 和 ALPN 值的 TLS 握手通过端口 443 请求临时加密资源。如果 CA 看到预期的资源，则会颁发证书。</p><p>此挑战要求端口 443 可外部访问。如果 Caddy 无法在端口 443 上监听，则来自端口 443 的数据包必须转发到 <a href="https://caddyserver.com.cn/docs/json/apps/http/https_port/">Caddy 的 HTTPS 端口</a>。</p><p>此挑战在默认情况下是启用的，不需要显式配置。</p><h3 id="DNS-挑战"><a href="#DNS-挑战" class="headerlink" title="DNS 挑战"></a>DNS 挑战</h3><p>DNS 挑战会对候选主机名的 TXT 记录执行权威 DNS 查询，并查找具有特定值的特殊 TXT 记录。如果 CA 看到预期值，则会颁发证书。</p><p>此挑战不需要任何开放端口，并且请求证书的服务器不需要对外可访问。但是，DNS 挑战需要配置。Caddy 需要知道访问您域名 DNS 提供商的凭据，以便它可以设置（和清除）特殊的 TXT 记录。如果启用了 DNS 挑战，则默认情况下会禁用其他挑战。</p><p>由于 ACME CA 在查找用于挑战验证的 TXT 记录时遵循 DNS 标准，因此您可以使用 CNAME 记录将挑战的回答委托给其他 DNS 区域。这可以用于将 _acme-challenge 子域委托给另一个区域。如果您 的 DNS 提供商没有提供 API 或不受 Caddy 的某个 DNS 插件支持，这将特别有用。</p><p>DNS 提供商支持是社区共同努力的结果。 <a href="https://caddy.community/t/how-to-use-dns-provider-modules-in-caddy-2/8148">在我们的维基页面上了解如何为您的提供商启用 DNS 挑战。</a></p><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>现在大部分情况下，免费域名大多是子域名。</p><p>但也存在一些长得像子域名，但实际上它们是 public suffix list (PSL 公共后缀列表)，可以享受到主域名的一切功能</p><ul><li><a href="https://register.us.kg/">US.KG</a> 免费域名<br>xxx<code>.us.kg</code></li><li><a href="https://www.cloudns.net/">ClouDNS</a> 免费域名<br>xxx<code>.cloudns.be</code><br>xxx<code>.cloudns.ch</code></li><li><a href="https://nic.eu.org/">EU.org</a> 免费域名<br>xxx<code>.eu.org</code></li><li><a href="https://www.sitelutions.com/">sitelutions</a> 免费域名<br>xxx<code>.rr.nu</code></li></ul><h2 id="DNS-域名解析"><a href="#DNS-域名解析" class="headerlink" title="DNS 域名解析"></a>DNS 域名解析</h2><p>你的公网服务器有了公网 IP，一般把防火墙全关掉的情况下外界可以访问到服务器的公网 IP，但是公网 IP 数字不方便记忆，你需要可读性更高的域名，并且域名需要做域名解析才能映射到你的公网 IP。<br>如果是静态的就直接使用域名解析 DNS 即可<br>如果是动态的就需要使用动态域名解析 DDNS</p><ul><li><a href="https://dns.he.net/">Hurricane Electric</a> 免费域名解析</li><li><a href="https://www.cloudflare.com/">Cloudflare</a> 免费域名解析</li></ul><h2 id="动态域名解析"><a href="#动态域名解析" class="headerlink" title="动态域名解析"></a>动态域名解析</h2><p>一般的 DNS 域名解析可以实现：域名 -&gt; anyTime -&gt; IP 的映射<br>而动态域名解析可以实现的是：<br>域名 -&gt; time1 -&gt; first_IP<br>域名 -&gt; time2 -&gt; other_IP<br>域名 -&gt; time3 -&gt; otherOther_IP……</p><ul><li><a href="https://dns.he.net/docs.html">Hurricane Electric</a></li></ul><h2 id="反向代理-内网穿透"><a href="#反向代理-内网穿透" class="headerlink" title="反向代理.内网穿透"></a>反向代理.内网穿透</h2><p><a href="https://github.com/fatedier/frp">frp 反向代理.内网穿透</a><br>frp 是一种快速反向代理，允许您将位于 NAT 或防火墙后面的本地服务器公开给 Internet。目前支持 TCP 和 UDP，以及 HTTP 和 HTTPS 协议，支持通过域名将请求转发到内部服务。<br>frp 还提供 P2P 连接模式。<br><img src="/img/%E6%96%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2024-10-19-12-40-14.png"></p><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><ul><li><a href="https://www.cloudflare.com/">Cloudflare</a> 免费 CDN<br>点亮小黄云开启 CDN</li><li>[Gcore]</li></ul><h2 id="DNS-泄露"><a href="#DNS-泄露" class="headerlink" title="DNS 泄露"></a>DNS 泄露</h2><p><a href="https://ipleak.net/">https://ipleak.net</a></p><h2 id="WebRTC-泄露"><a href="#WebRTC-泄露" class="headerlink" title="WebRTC 泄露"></a>WebRTC 泄露</h2><p><a href="https://browserleaks.com/webrtc">https://browserleaks.com/webrtc</a></p><h2 id="浏览器指纹检测"><a href="#浏览器指纹检测" class="headerlink" title="浏览器指纹检测"></a>浏览器指纹检测</h2><p><a href="https://fingerprintjs.github.io/fingerprintjs/">https://fingerprintjs.github.io/fingerprintjs/</a></p><ul><li><p>浏览器指纹检测追踪可以用来防止服务器的应用程序被薅羊毛<br>服务器通过读取请求头或者使用 js 脚本，<br>获取到用户的 user-agent, 语言时区，屏幕分辨率，字体，canvas 等信息，随着浏览器 api 的不断升级，能够获取到的内容越来越多。<br>最后用这些信息中的一个或几个参数计算出一个唯一的哈希值，这个值就是用户电脑浏览器的指纹。</p></li><li><p>浏览器指纹检测追踪可以用来保护账号安全<br>cookie 可以维持登录状态，如果你的 cookie 被坏人复制了，那坏人就可以无需账号密码直接登录了。但如果服务器检测到了不同的浏览器指纹，就可以认为是在一台新设备上登录，此时就需要强制跳转到输入密码或验证码进行身份验证。</p></li><li><p>浏览器指纹是可以伪造的<br>cookie 是可以被盗取的<br>而 IP 地址，设备信息，指纹，嗯……这些东西都是有方法可以伪造的，<br>已存在的浏览器指纹伪造解决方案叫做：指纹浏览器</p></li></ul><h2 id="TLS-指纹"><a href="#TLS-指纹" class="headerlink" title="TLS 指纹"></a>TLS 指纹</h2><ul><li>客户端 TLS 指纹——JA3<br>通过 TLS 版本，加密方法，应用程序数据特征，来生成 TLS 指纹，携带在数据包中请求到服务端</li><li>服务端 TLS 指纹——JA3S<br>通过 TLS 版本，加密方法，服务端应用程序数据特征，来生成 TLS 指纹，携带在数据包中响应到客户端</li></ul><h2 id="与用户身份相关的东西"><a href="#与用户身份相关的东西" class="headerlink" title="与用户身份相关的东西"></a>与用户身份相关的东西</h2><ul><li>浏览器指纹</li><li>2FA</li><li>实名制的身份证，手机号，银行卡，信用卡信息</li></ul><h2 id="风控"><a href="#风控" class="headerlink" title="风控"></a>风控</h2><p><a href="https://scamalytics.com/">ip 风控查询 https://scamalytics.com</a></p><h2 id="网络空间测绘"><a href="#网络空间测绘" class="headerlink" title="网络空间测绘"></a>网络空间测绘</h2><h2 id="网络带宽叠加"><a href="#网络带宽叠加" class="headerlink" title="网络带宽叠加"></a>网络带宽叠加</h2><p>主要是为了提高下载速度的峰值，在下大文件时有奇效，当然如果你的带宽足够的话当我没说。</p><h3 id="Windows-侧网络带宽叠加"><a href="#Windows-侧网络带宽叠加" class="headerlink" title="Windows 侧网络带宽叠加"></a>Windows 侧网络带宽叠加</h3><p>原先峰值（WiFi——路由器）只有十几 Mbps</p><p>做了网络带宽叠加后峰值（WiFi——运营商网络路由器 + 以太网——安卓 USB 网络共享）可以达到二十多 Mbps<br><img src="/img/%E6%96%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2024-08-26-00-01-06.png"><br>使用命令<code>route print</code>可以查看网络接口对应的跃点数，我上面已经是修改好了的<br>在控制面板-&gt; 网络连接，把上网的网卡设置好接口跃点数即可<br><a href="https://learn.microsoft.com/zh-cn/troubleshoot/windows-server/networking/automatic-metric-for-ipv4-routes">Windows 网络接口跃点数设置参考配置点我</a><br><img src="/img/%E6%96%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2024-08-26-00-10-11.png"></p><p>但是出现了新的谷值，可能要做负载均衡，或者缺少其他配置。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>serv00虚拟主机</title>
      <link href="/2024/07/20/serv00%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA/"/>
      <url>/2024/07/20/serv00%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>Serv00</strong> 是一个提供免费虚拟主机的平台，其托管平台使用的是 <strong>FreeBSD</strong> 系统，而不是 Linux。每个账号有效期为 <strong>10年</strong>，<strong>超过三个月不登录 Panel 以及 SSH 则会被删除账号</strong>。以下是 Serv00 提供的服务概览：</p><p>存储空间：3 GB<br>每月流量：无限制<br>网站数量：100<br>MySQL 数据库：10 个<br>PostgreSQL 数据库：3 个<br>MongoDB 数据库：3 个<br>GIT&#x2F;SVN&#x2F;HG 仓库：3 个<br>TCP&#x2F;UDP 端口：3 个<br>PHP 解释器：3 个<br>系统进程：20 个<br>RAM：512MB<br>备份：7 天<br>服务器放置：欧盟<br>免费子域名：username.serv00.net<br>技术支持：只有论坛 SLA，不支持现代技术<br>SSH 访问：支持<br>SSH 隧道：不支持<br>远程数据库访问：不支持<br>固态硬盘：支持<br>没有广告：支持</p><h2 id="少啰嗦"><a href="#少啰嗦" class="headerlink" title="少啰嗦"></a>少啰嗦</h2><p>免费子域名：username.serv00.net<br>流量: 无限<br>CPU: amd64</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">sysctl hw.model hw.machine hw.ncpu</span></span><br><span class="line">hw.model: Intel(R) Xeon(R) Silver 4214R CPU @ 2.40GHz</span><br><span class="line">hw.machine: amd64</span><br><span class="line">hw.ncpu: 24</span><br></pre></td></tr></table></figure><p>RAM: 512 MB<br>硬盘: 3 GB<br>TCP&#x2F;UDP 端口: 3个</p><p>没时间的话可以玩玩，主要做流量的代理和转发，或者api接口、网站，如果指望什么服务都部署上去那不太现实，毕竟硬盘内存端口限制</p><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><p>SSH&#x2F;SFTP server address: s<code>X</code>.serv00.com</p><p>ip白名单，<a href="https://www.serv00.com/ip_unban/">https://www.serv00.com/ip_unban/</a></p><p><code>ping sX.serv00.com</code>会得到一个ip<br>好吧这个ip是连不上的</p><p>但是你可以用备用ip连接<br><code>ping cacheX.serv00.com</code>可以得到备用ip</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. sN.serv00.com 69（或其IP）+端口22（或80或443）</span><br><span class="line">2. webN.serv00.com 31（或其IP）+端口22</span><br><span class="line">3. cacheN.serv00.com 20（或其IP）+端口22</span><br><span class="line">4. panelN.serv00.com 24 +端口22</span><br><span class="line">5. USER.serv00.net 14 +端口22</span><br></pre></td></tr></table></figure><h2 id="web管理页面"><a href="#web管理页面" class="headerlink" title="web管理页面"></a>web管理页面</h2><p><a href="https://panelx.serv00.com/">https://panel<code>x</code>.serv00.com</a></p><h2 id="ttyd"><a href="#ttyd" class="headerlink" title="ttyd"></a>ttyd</h2><p>域名的ssh总是连不上，那样就不方便续过期时间了（ssh登录可以续过期时间）<br>通过ttyd在浏览器远程访问命令行，然后再通过ssh localhost，ssh自身来续过期时间</p><p>找不到适合FreeBSD的ttyd二进制文件，只能自己编译ttyd for FreeBSD<br><code>git clone https://github.com/tsl0922/ttyd.git</code><br>编译有报错，应该是少设置了个链接库，要修改CMakeLists.txt在里面添加上这行<br><code>set(CMAKE_EXE_LINKER_FLAGS &quot;$&#123;CMAKE_EXE_LINKER_FLAGS&#125; -pthread&quot;)</code></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">……</span><br><span class="line">set(CMAKE_EXE_LINKER_FLAGS &quot;$&#123;CMAKE_EXE_LINKER_FLAGS&#125; -pthread&quot;)</span><br><span class="line">……</span><br><span class="line">add_executable($&#123;PROJECT_NAME&#125; $&#123;SOURCE_FILES&#125;)</span><br><span class="line">……</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ttyd &amp;&amp; <span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make &amp;&amp; sudo make install &amp;&amp; <span class="built_in">mkdir</span> ~/ttyd</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> ttyd/build/ttyd ~/ttyd/</span><br><span class="line">~/ttyd/ttyd -p yourPort -c whoareyou:yourPassword -W bash</span><br></pre></td></tr></table></figure><p>事实上我们可以自定义index.html，<a href="https://github.com/henry5001/ResponsiveLayout4Ttyd">比如使用这个响应式页面作为index.html</a><br><code>~/ttyd/ttyd -p yourPort -I ~/ttyd/index.html -c whoareyou:yourPassword -W bash</code><br><img src="/img/serv00%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA/2024-10-20-00-29-48.png"></p><h2 id="双层反向代理"><a href="#双层反向代理" class="headerlink" title="双层反向代理"></a>双层反向代理</h2><p>默认经过的nginx反向代理会暴露服务器信息……，因为权限不足无法修改，只好再加一层caddy反向代理</p><p>控制台面板添加tpc端口11521<br>控制台面板添加域名nginx反向代理到11521(域名:443-&gt;:11521.caddy)<br>记得在控制台面板为域名申请ssl证书<br>然后也就是访问https域名直接反向代理到11521</p><p>caddy 设置监听11521反向代理到13306(:11521.caddy-&gt;:13306.ttyd)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        admin off</span><br><span class="line">        #http_port 13306</span><br><span class="line">        auto_https off</span><br><span class="line">        servers :11521 &#123;</span><br><span class="line">                protocols h1 h2</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">:11521 &#123;</span><br><span class="line">        tls /home/henrywong/domains/yourDomain/cert/cert.pem /home/henrywong/domains/chwx.ddns.net/cert/cert.key</span><br><span class="line">        route &#123;</span><br><span class="line">                forward_proxy &#123;</span><br><span class="line">                        basic_auth yourusername yourpassword</span><br><span class="line">                        hide_ip</span><br><span class="line">                        hide_via</span><br><span class="line">                        probe_resistance</span><br><span class="line">                &#125;</span><br><span class="line">                #file_server browse &#123;</span><br><span class="line">                #       root /home/henrywong/staticWebapp/app001</span><br><span class="line">                #&#125;</span><br><span class="line">                reverse_proxy :13306</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="/2024/07/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/07/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="非常感谢"><a href="#非常感谢" class="headerlink" title="非常感谢"></a>非常感谢</h2><p><a href="https://jyywiki.cn/">https://jyywiki.cn/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机系统基础</title>
      <link href="/2024/07/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/07/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>可以通过完成 PA0 ~ PA4 这些实验，了解计算机系统。</p><p><a href="https://nju-projectn.github.io/ics-pa-gitbook/ics2021/PA0.html">https://nju-projectn.github.io/ics-pa-gitbook/ics2021/PA0.html</a></p><h2 id="PA0-开发环境配置"><a href="#PA0-开发环境配置" class="headerlink" title="PA0: 开发环境配置"></a>PA0: 开发环境配置</h2><h3 id="操作系统安装"><a href="#操作系统安装" class="headerlink" title="操作系统安装"></a>操作系统安装</h3><p>需要一个 64 位的 GNU&#x2F;Linux 操作系统<br>你可以在虚拟机或者物理机上安装</p><p>备份系统 &#x2F; 文件<br>不要使用 root 用户登录操作系统，除非你真的需要，否则可能会破坏操作系统环境</p><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apt-get install build-essential    <span class="comment"># build-essential packages, include binary utilities, gcc, make, and so on</span></span><br><span class="line">apt-get install man                <span class="comment"># on-line reference manual</span></span><br><span class="line">apt-get install gcc-doc            <span class="comment"># on-line reference manual for gcc</span></span><br><span class="line">apt-get install gdb                <span class="comment"># GNU debugger</span></span><br><span class="line">apt-get install git                <span class="comment"># revision control system</span></span><br><span class="line">apt-get install libreadline-dev    <span class="comment"># a library used later</span></span><br><span class="line">apt-get install libsdl2-dev        <span class="comment"># a library used later</span></span><br><span class="line">apt-get install llvm               <span class="comment"># llvm project, which contains libraries used later</span></span><br></pre></td></tr></table></figure><p>安装中文输入法</p><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><p><code>apt-get install vim</code><br>学会 vim 的基本操作就已经可以大大提高开发效率. 还有各种插件来增强 vim 的功能, 比如可以在代码中变量跳转的<code>ctags</code>等等</p><h3 id="遇到问题请怎么办"><a href="#遇到问题请怎么办" class="headerlink" title="遇到问题请怎么办"></a>遇到问题请怎么办</h3><ul><li>STFW 搜索引擎</li><li>RTFM 阅读手册<br><code>man</code><br>RTFM 阅读手册是 STFW 搜索引擎的长辈, 在互联网还不是很流行的年代, 阅读手册是解决问题的一种有效方法. 这是因为手册包含了查找对象的所有信息, 关于查找对象的一切问题都可以在手册中找到答案.</li><li>RTFSC 阅读文档和源码<br>当你有了一定源码阅读能力，这个代码我知道是什么意思，但是为什么会写在这？这种问题也许将源码和文档结合可以得到答案。</li></ul><h3 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h3><p>写个”Hello World”程序, 然后写个 Makefile 来编译它, 并且看教程学习一下 GDB 命令行调试工具 的基本使用呢!</p><h3 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h3><p><code>apt-get install tmux</code></p><h3 id="提问的智慧"><a href="#提问的智慧" class="headerlink" title="提问的智慧"></a>提问的智慧</h3><ul><li>啥都不会<br>我遇到了什么问题，我可以主动做些什么来让对方更方便地帮助我诊断问题</li><li>略懂略懂<br>在问题中描述具体的现象以及你做过的尝试</li><li>很详细<br>我在 xxx 的时候遇到了 xxx 的错误. 这个错误可以通过以下步骤重现: (描述具体的现象) 1.我的系统版本是 xxx, 相关的工具版本是 xxx 2.我做了 xxx (必要的时候贴个图) 3.然后 xxx (必要的时候贴个图)<br>为了排查这个错误, 我进行了以下尝试: (说明我很希望可以解决问题, 真的没办法才提问的) 1.我做了 xxx, 出现了 xxx 的结果 (必要的时候贴个图) 2.我还做了 xxx, 出现了 xxx 的结果 (必要的时候贴个图)<br>最后问题还没有解决, 请问我还需要做哪些事情?</li></ul><h3 id="常用的命令行工具-记得要常用哦"><a href="#常用的命令行工具-记得要常用哦" class="headerlink" title="常用的命令行工具, 记得要常用哦"></a>常用的命令行工具, 记得要常用哦</h3><ul><li>文件管理 - cd, pwd, mkdir, rmdir, ls, cp, rm, mv, tar</li><li>文件检索 - cat, more, less, head, tail, file, find</li><li>输入输出控制 - 重定向, 管道, tee, xargs</li><li>文本处理 - vim, grep, awk, sed, sort, wc, uniq, cut, tr</li><li>正则表达式</li><li>系统监控 - jobs, ps, top, kill, free, dmesg, lsof</li></ul><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p><code>git clone -b 2021 https://github.com/NJU-ProjectN/ics-pa.git ics2021</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;201220000-Zhang San&quot; # your student ID and name</span><br><span class="line">git config --global user.email &quot;zhangsan@foo.com&quot;   # your email</span><br><span class="line">git config --global core.editor vim                 # your favorite editor</span><br><span class="line">git config --global color.ui true</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git branch -m master</span><br><span class="line">bash init.sh nemu</span><br><span class="line">bash init.sh abstract-machine</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment">#test</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$NEMU_HOME</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$AM_HOME</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$NEMU_HOME</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$AM_HOME</span></span><br></pre></td></tr></table></figure><h3 id="编译-NEMU"><a href="#编译-NEMU" class="headerlink" title="编译 NEMU"></a>编译 NEMU</h3><p>进入 nemu&#x2F; 目录，在第一次编译 NEMU 之前，应通过以下方式生成配置文档<br><code>make menuconfig</code><br>将弹出一个菜单。请勿修改任何内容。只需选择“Exit”和“Yes”即可保存新配置。之后，通过 <code>make</code> 编译项目</p><p>如果编译失败可以尝试<br><code>make clean</code><br><code>make</code></p><h2 id="PA1"><a href="#PA1" class="headerlink" title="PA1"></a>PA1</h2><h2 id="非常感谢"><a href="#非常感谢" class="headerlink" title="非常感谢"></a>非常感谢</h2><p>[^1]:南京大学 计算机科学与技术系 计算机系统基础 课程实验 2021 [<a href="https://nju-projectn.github.io/ics-pa-gitbook/ics2021/index.html]">https://nju-projectn.github.io/ics-pa-gitbook/ics2021/index.html]</a></p><p>[^2]:南京大学.王慧妍 [<a href="http://www.why.ink:8080/Main_Page]">http://www.why.ink:8080/Main_Page]</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cLang_C语言入门</title>
      <link href="/2024/06/30/cLang_C%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/"/>
      <url>/2024/06/30/cLang_C%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="C-语言开发环境"><a href="#C-语言开发环境" class="headerlink" title="C 语言开发环境"></a>C 语言开发环境</h2><h3 id="windows-or-linux"><a href="#windows-or-linux" class="headerlink" title="windows or linux"></a>windows or linux</h3><ul><li>cLang.windows.env<br>下载 WinLibs 然后解压<br><a href="https://winlibs.com/">https://winlibs.com/</a><br><a href="https://github.com/brechtsanders/winlibs_mingw/releases">https://github.com/brechtsanders/winlibs_mingw/releases</a><br>解压然后添加到系统环境变量 PATH<br>cLang\winlibs-x86_64-posix-seh-gcc-14.1.0-llvm-18.1.7-mingw-w64ucrt-12.0.0-r2\mingw64\bin<br>使用命令行<code>gcc -v</code>验证环境配置是否成功</li><li>cLang.linux.env<br><code>apt-get install build-essential</code></li></ul><h3 id="cLang-windows-WinLibs"><a href="#cLang-windows-WinLibs" class="headerlink" title="cLang.windows.WinLibs"></a>cLang.windows.WinLibs</h3><p><code>简而言之：WinLibs是Microsoft Windows的免费C和C++编译器。</code></p><p>GCC（GNU Compiler Collection）是一个免费的开源编译器，适用于 C 和 C++（以及其他语言，如 Objective-C，Fortran，D）。<br>MinGW-w64 是一个免费的开源 C 库，用于针对 Windows 32 位和 64 位平台。<br>这些组合产生了一个适用于 Windows 的免费 C&#x2F;C++ 编译器。</p><p>尽管 GCC 和 MinGW-w64 可以在其他平台（例如 Linux）上用于生成 Windows 可执行文档，但 WinLibs 项目只专注于构建在 Windows 上本机运行的版本。</p><p>此外，还添加了一些其他工具，包括：<br>GDB - GNU 工程调试器<br>GNU Binutils - 二进制工具的集合<br>GNU Make - 一种控制可执行文档和其他非源文档生成的工具<br>Yasm - Yasm 模块化汇编进程项目<br>NASM - 全网汇编进程<br>JWasm - 一个免费的 MASM 兼容汇编进程<br>LLVM&#x2F;Clang&#x2F;LLD&#x2F;LLDB - LLVM 编译器基础结构<br>这是一个独立的版本，这意味着此下载为 Windows 提供了完整的编译器环境。</p><p>将来，WinLibs 还计划发布许多使用该编译器构建的开源库和应用进程的二进制包。</p><h2 id="第一个-cLang-代码-amp-推荐的-IDE"><a href="#第一个-cLang-代码-amp-推荐的-IDE" class="headerlink" title="第一个 cLang 代码 &amp; 推荐的 IDE"></a>第一个 cLang 代码 &amp; 推荐的 IDE</h2><p>最快速的方法，就是使用 CLion 新建一个 cLang 的项目，帮你把 helloWorld 都写好了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//因为下面用到的printf()函数是已实现的，</span></span><br><span class="line"><span class="comment">//所以要先用include引入</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, World!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前主流的 cLang IDE 有两个：</p><ul><li>CLion</li><li>vsCode</li></ul><h3 id="建议通过-CLion-开始上手敲-cLang，最后研究如何过渡到-vsCode"><a href="#建议通过-CLion-开始上手敲-cLang，最后研究如何过渡到-vsCode" class="headerlink" title="建议通过 CLion 开始上手敲 cLang，最后研究如何过渡到 vsCode"></a>建议通过 CLion 开始上手敲 cLang，最后研究如何过渡到 vsCode</h3><p>CLion 是收费的，vsCode 是免费的<br>可以通过 CLion 开始上手敲 cLang，最后研究过渡到 vsCode 要解决什么问题</p><ul><li>集成开发环境配置</li><li>代码的格式化</li><li>代码的静态检查</li><li>代码的 run &#x2F; debug</li><li>git 的 gui 操作体验</li></ul><h3 id="增强-CLion-体验的插件"><a href="#增强-CLion-体验的插件" class="headerlink" title="增强 CLion 体验的插件"></a>增强 CLion 体验的插件</h3><p><code>SonarLint: 静态代码检查工具，可以在编译前就检查出代码是否有问题</code><br>Key Promoter X：快捷键提示<br>Indent Rainbow：彩虹缩进<br>Rainbow Brackets：彩虹括号<br>WakaTime：统计写代码的时间<br>IdeaVim：在 CLion 使用 Vim，如果你还不会 Vim，请先不要启用，否则会导致无法输入的问题</p><h3 id="过渡到-vsCode-需要的插件"><a href="#过渡到-vsCode-需要的插件" class="headerlink" title="过渡到 vsCode 需要的插件"></a>过渡到 vsCode 需要的插件</h3><p><code>C/C++ Extension Pack：C 语言扩展包</code><br><code>GitLens、Git History、Git Graph：Git GUI 扩展包</code><br>Code Runner：一键编译运行代码<br>indent-rainbow：彩虹缩进<br>Vim：在 VS Code 使用 Vim，如果你还不会 Vim，请先不要启用，否则会导致无法输入的问题</p><h3 id="code-server"><a href="#code-server" class="headerlink" title="code-server"></a>code-server</h3><p>clangd：代码提示<br>C&#x2F;C++ Extension Pack：生成项目配置，编译，运行</p><h2 id="在-IDE-运行-cLang-代码时发生了什么"><a href="#在-IDE-运行-cLang-代码时发生了什么" class="headerlink" title="在 IDE 运行 cLang 代码时发生了什么"></a>在 IDE 运行 cLang 代码时发生了什么</h2><p>简单来说 a.c 使用 gcc 编译出 a.out 可执行文件。<br>更细致一点，我们通常说的 cLang 编译其实包括了<code>预编译，编译，汇编，链接</code><br>gcc 一般不会给我们生成这些中间产物，但我们可以手动调整生成<br><code>a.c gcc -E</code> -&gt; a.i<br><code>a.c gcc -S</code> -&gt; a.s<br><code>a.c gcc -c</code> -&gt; a.o<br><img src="/img/cLang_C%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/2024-07-13-15-17-50.png"></p><p>当然，我是在 linux 环境下，所以编译出来的是 a.out<br><code>vim a.out</code>可以看到这是一个 ELF 类型的文件<br><code>file a.out</code>也可以</p><h3 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h3><p>#井号开头的是预编译指令，比如#include</p><ul><li>#include<br>#include 干的就是复制粘贴，比如很多系统的官方的依赖，我们只需要#include 即可使用，不需要重复造轮子</li></ul><p>一般情况下，<code>#include &lt;xxx&gt;</code>是搜索操作系统的依赖，<code>#include &quot;xxx&quot;</code>是搜索当前目录下的依赖</p><p>可以用<code>gcc --verbose a.c</code> 打开啰嗦模式查看的</p><ul><li>#define 宏<br>有些操作系统级别的宏，在不同机器可能会有不同的机器字长<br><code>gcc -m32 a.c</code>使用 32 位来编译</li></ul><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>cLang转成汇编语言，建议在不启用编译优化时尝试<br><img src="/img/cLang_C%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/2024-07-13-17-33-43.png" alt="左侧汇编，右侧cLang"><br><img src="/img/cLang_C%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/2024-07-13-17-35-01.png" alt="实际上我们可以改一下汇编语言"></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>将多个二进制目标代码拼接在一起<br><img src="/img/cLang_C%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/2024-07-13-17-28-20.png"></p><h2 id="交换两个变量"><a href="#交换两个变量" class="headerlink" title="交换两个变量"></a>交换两个变量</h2><p>原先内存中，a&#x3D;5,b&#x3D;6<br>期望结果：内存中 a&#x3D;6,b&#x3D;5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">5</span>, b=<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">a=a^b;</span><br><span class="line">b=a^b;</span><br><span class="line">a=a^b;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  0101=5</span></span><br><span class="line"><span class="comment">//  0110=6</span></span><br><span class="line"><span class="comment">//第一次a^b 异或运算得到</span></span><br><span class="line"><span class="comment">//  a=0011=3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  a = 0011 = 3</span></span><br><span class="line"><span class="comment">//  b = 0101 = 5</span></span><br><span class="line"><span class="comment">//  a = 0110 = 6</span></span><br></pre></td></tr></table></figure><p>这种解法，没有引入新的临时变量，在内存金贵的时代，这样做可以节省变量，进而节省内存<br>但很明显，这是通常来说这算不上是见名知意的代码，看你个人取舍了</p><h2 id="逆序"><a href="#逆序" class="headerlink" title="逆序"></a>逆序</h2><p>输入 123<br>输出 321</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// 需要求解长度是3的逆序，首先这是一个十进制数，</span></span><br><span class="line"><span class="comment">// 但是我们可以取出它每一位上的数字规律</span></span><br><span class="line"><span class="comment">// 1 = a/10/10%10</span></span><br><span class="line"><span class="comment">// 2 = a/10%10</span></span><br><span class="line"><span class="comment">// 3 = a%10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//最后交换123，321的顺序即可</span></span><br><span class="line"><span class="comment">//n进制数的，长度为k的逆序或许也是如此</span></span><br></pre></td></tr></table></figure><h2 id="非常感谢"><a href="#非常感谢" class="headerlink" title="非常感谢"></a>非常感谢</h2><p>[^1]:南京大学 C 语言程序设计基础 [<a href="https://docs.cpl.icu/]">https://docs.cpl.icu/]</a> </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于SpringDataJPA的设计</title>
      <link href="/2024/05/25/%E5%9F%BA%E4%BA%8ESpringDataJPA%E7%9A%84%E8%AE%BE%E8%AE%A1/"/>
      <url>/2024/05/25/%E5%9F%BA%E4%BA%8ESpringDataJPA%E7%9A%84%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>数据库.table &#x3D; JPA.Entity &#x3D; Java.对象</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>① 建立数据库 table 和字段，hw_user:{id,userName}<br>② 配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">henry_restapi</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">org.mariadb.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.name</span>=<span class="string">defaultDataSource</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mariadb://127.0.0.1:3306/yourDatabase?serverTimezone=UTC</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.jpa.database</span>=<span class="string">MYSQL</span></span><br><span class="line"><span class="attr">spring.jpa.show-sql</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.jpa.generate-ddl</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">spring.jpa.hibernate.ddl-auto</span>=<span class="string">none</span></span><br></pre></td></tr></table></figure><p>③ 开始 Java 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UserPo.java</span></span><br><span class="line"><span class="keyword">import</span> jakarta.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> jakarta.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> jakarta.persistence.Table;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Table(name = &quot;hw_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserPo</span> &#123;</span><br><span class="line">  <span class="meta">@Id</span></span><br><span class="line">  <span class="keyword">private</span> String id;</span><br><span class="line">  <span class="keyword">private</span> String userName;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UserPoMapper.java interface</span></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.Query;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;obj,id&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserPoMapper</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;UserPo, String&gt; &#123;</span><br><span class="line">    <span class="comment">//可以不写method，但是因为有需要还是写了</span></span><br><span class="line">  <span class="meta">@Query(value = &quot;select * from hw_user where user_name = (:userName)&quot;, nativeQuery = true)</span></span><br><span class="line">  Optional&lt;UserPo&gt; <span class="title function_">findByUserName</span><span class="params">(String userName)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UserService.java</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> UserPoMapper userPoMapper;</span><br><span class="line"></span><br><span class="line">  UserPo <span class="title function_">queryUsersByName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Optional&lt;UserPo&gt; userPoOpt = userPoMapper.findByUserName(<span class="string">&quot;henry&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> userPoOpt.orElse(<span class="literal">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  UserPo <span class="title function_">queryUsersById</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//这是SpringDataJpa自带的method，没有手写哦~</span></span><br><span class="line">    <span class="keyword">final</span> Optional&lt;UserPo&gt; userPoOpt = userPoMapper.findById(<span class="string">&quot;aafc7bd0150811ef9ecc54bf641102a1&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> userPoOpt.orElse(<span class="literal">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.hw_restapi.service;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"><span class="keyword">import</span> com.example.hw_restapi.pojo.UserPo;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Assertions;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserServiceTest</span> &#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="comment">//可以运行下Test的method测试下，如果数据库有henry的用户，那基本上就测试通过了</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">queryUsersByName</span><span class="params">()</span> &#123;</span><br><span class="line">    Assertions.assertEquals(<span class="string">&quot;henry&quot;</span>, userService.queryUsersByName().getUserName());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本节结束如果没问题的话，你应该掌握到使用 SpringDataJpa 来做对象关系映射<br>database.table &lt;&#x3D; &#x3D;&gt; SpringDataJpa.entity &lt;&#x3D; &#x3D;&gt;Java.Object</p><h2 id="entity-field"><a href="#entity-field" class="headerlink" title="entity.field"></a>entity.field</h2><p>好吧，其实在面向对象的开发过程中，我们需要操作对象中的属性，也就是<br>table.field &lt;&#x3D; &#x3D;&gt; entity.field &lt;&#x3D; &#x3D;&gt; javaObject.field</p><ul><li>general field<br>绝大部分情况下，这些 field 可以和编程语言中的类型自动映射，直接增删改查，没有问题：<br>table.varchar &lt;&#x3D; &#x3D;&gt; Java.String<br>table.text &lt;&#x3D; &#x3D;&gt; Java.String<br>table.numeric &lt;&#x3D; &#x3D;&gt; Java.Number……</li><li>codelist field<br>通常用来做用户界面的 dropDown 下拉菜单</li><li>date field<br>时间日期格式化，需要研究下数据库，前后端代码 api……</li><li>bigDecimal field<br>货币&#x2F;数字国际化，精确到几位小数，需要研究下数据库，前后端代码 api……</li><li>entity field<br>你的这个 field，它不是个 field 啊（你的这个 field，它是另外一个 entity）<br>一对一，一对多，多对多……</li></ul><h2 id="mapStruct"><a href="#mapStruct" class="headerlink" title="mapStruct"></a>mapStruct</h2><p>似乎直接的关联关系映射，使用jpa就已经得到了解决。但是，如果entity.A在关联时只希望取entity.B中的一部分字段（不取全部字段），最后关联起来展示给用户需要的前端视图，你肯定会想着这可以在jpa先做关联全部字段，然后在逻辑里把不需要的字段set null。实际上，这个前端视图可以抽象成一个可以被复用的视图对象，因为说不定在下次需求里就让你再重复这视图段set null逻辑，到时候你会想着要copy就好了，但是这种set null逻辑根据全局搜索是不好找的，所以我们开始用了mapStruct</p><h2 id="label-国际化多语言"><a href="#label-国际化多语言" class="headerlink" title="label 国际化多语言"></a>label 国际化多语言</h2><p>每个 field &#x2F; entity 都有一个唯一的绝对路径 path，通过 where path &amp; local 就能得到自定义切换语言<br>{<br>path: user.userName,<br>local: en_US,<br>label: username<br>}</p><p>{<br>path: user.userName,<br>local: zh_CN,<br>label: 用户名<br>}</p><h2 id="option-可选的"><a href="#option-可选的" class="headerlink" title="option 可选的"></a>option 可选的</h2><p>redis 缓存<br>mq 异步调用</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jellyfin流媒体服务</title>
      <link href="/2024/05/14/Jellyfin%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1/"/>
      <url>/2024/05/14/Jellyfin%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为什么需要 Jellyfin？</p><p>在没有 jellyfin 之前，我们可以通过硬盘或网络 I&#x2F;O 来读取音频视频媒体文件来观看，但是通常这些媒体文件列出来的都只有文件名，</p><p>使用 jellyfin 之后，可以分类管理这些媒体文件<br>添加自动化任务，爬取互联网上与该媒体相关的信息，字幕，生成媒体的封面，海报，简介，演员……</p><h2 id="我们开始管理媒体"><a href="#我们开始管理媒体" class="headerlink" title="我们开始管理媒体"></a>我们开始管理媒体</h2><h3 id="音乐-MV"><a href="#音乐-MV" class="headerlink" title="音乐 MV"></a>音乐 MV</h3><p><code>Content Type = 音乐视频</code></p><p>没有打算细分的话用这个类型就够了，音乐 MV 我个人不需要爬取元数据</p><h3 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h3><p>看新不看旧，珍藏好电影</p><h3 id="电视连续剧"><a href="#电视连续剧" class="headerlink" title="电视连续剧"></a>电视连续剧</h3><p>看新不看旧，珍藏好电视剧</p><h2 id="电影-x2F-电视剧-过滤规则"><a href="#电影-x2F-电视剧-过滤规则" class="headerlink" title="电影&#x2F;电视剧 过滤规则"></a>电影&#x2F;电视剧 过滤规则</h2><p><del>恐怖，惊悚</del></p><h2 id="字幕获取"><a href="#字幕获取" class="headerlink" title="字幕获取"></a>字幕获取</h2><p>中英双语 &#x2F; 中文<br>英文</p><h2 id="元数据爬取"><a href="#元数据爬取" class="headerlink" title="元数据爬取"></a>元数据爬取</h2><p>target：豆瓣，百度</p><p>封面<br>简介<br>演员</p><h2 id="diy-jellyfin-工作流"><a href="#diy-jellyfin-工作流" class="headerlink" title="diy jellyfin 工作流"></a>diy jellyfin 工作流</h2><p>diy 规则 filter -&gt; 通过 download 生产资源 -&gt; 使用 jellyfin 消费资源 -&gt; 最终手动 delete or archive</p><ul><li>rssHub<br>rssHub 来进行 filter，并抓取元数据 和 下载链接</li><li>database<br>一般通过 rssHub 抓到的新数据是会返回并存储在客户端上的。<br>我这里不打算使用客户端阅读 rssHub 的资讯，而是通过数据库来进行存储 rssHub 返回的数据</li><li>download rule<br>资源下载规则</li><li><ul><li>下载到网盘</li></ul></li><li><ul><li>下载到本地硬盘</li></ul></li><li>aria2<br>rsshub 映射到 aria2 进行资源下载</li><li>jellyfin<br>rss 到 jellyfin 的元数据映射</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="jellyfin"><a href="#jellyfin" class="headerlink" title="jellyfin"></a>jellyfin</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#工作目录</span></span><br><span class="line"><span class="built_in">mkdir</span> /opt/jellyfin</span><br><span class="line"><span class="built_in">cd</span> /opt/jellyfin</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取并解压软件包</span></span><br><span class="line">wget https://repo.jellyfin.org/?path=/server/linux/stable/combined/jellyfin_10.8.13_amd64.tar.gz</span><br><span class="line"></span><br><span class="line">tar -xvzf jellyfin_10.8.13_amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#软链接</span></span><br><span class="line"><span class="built_in">ln</span> -s jellyfin_10.8.13 jellyfin</span><br><span class="line"><span class="comment">#如果软件升级我们只需要修改这个软链接即可</span></span><br><span class="line"><span class="comment">#ln -s jellyfin_11.9.14 jellyfin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#子目录配置</span></span><br><span class="line"><span class="built_in">mkdir</span> data cache config <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h3 id="FFmpeg"><a href="#FFmpeg" class="headerlink" title="FFmpeg"></a>FFmpeg</h3><p><img src="/img/Jellyfin%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1/2024-05-14-20-40-45.png"><br><a href="https://repo.jellyfin.org/?path=/ffmpeg/debian/">点我去下载 jellyfin-ffmpeg</a>，这是 jellyfin 特供版 ffmpeg，对 jellyfin 做了专门的优化，如果可以，请优先使用特供版。<br><code>dpkg -i https://repo.jellyfin.org/files/ffmpeg/debian/latest-5.x/armhf/jellyfin-ffmpeg5_5.1.4-3-bullseye_armhf.deb</code><br>特供版 FFmpeg 安装时如果有任何 dependency errors，可以尝试使用<code>apt install -f</code>修复</p><h3 id="开始程序-和-启动项"><a href="#开始程序-和-启动项" class="headerlink" title="开始程序 和 启动项"></a>开始程序 和 启动项</h3><p><code>vim /opt/jellyfin/jellyfin.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">JELLYFINDIR=<span class="string">&quot;/opt/jellyfin&quot;</span></span><br><span class="line">FFMPEGDIR=<span class="string">&quot;/usr/share/jellyfin-ffmpeg&quot;</span></span><br><span class="line">f</span><br><span class="line"><span class="variable">$JELLYFINDIR</span>/jellyfin/jellyfin \</span><br><span class="line"> -d <span class="variable">$JELLYFINDIR</span>/data \</span><br><span class="line"> -C <span class="variable">$JELLYFINDIR</span>/cache \</span><br><span class="line"> -c <span class="variable">$JELLYFINDIR</span>/config \</span><br><span class="line"> -l <span class="variable">$JELLYFINDIR</span>/log \</span><br><span class="line"> --ffmpeg <span class="variable">$FFMPEGDIR</span>/ffmpeg</span><br></pre></td></tr></table></figure><p>jellyfin 启动<br><code>/opt/jellyfin/jellyfin.sh</code></p><p><a href="http://localhost:8096/">http://localhost:8096</a></p><h2 id="备份-迁移"><a href="#备份-迁移" class="headerlink" title="备份 迁移"></a>备份 迁移</h2><h2 id="最终"><a href="#最终" class="headerlink" title="最终"></a>最终</h2><p>累了……爬虫的限制太多了，靠个人是难以开发维护一套新的爬虫体系的</p><p>① 拿到可播放的视频资源 + 字幕<br>②jellyfin 播放</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安卓手机直供电入门</title>
      <link href="/2024/04/11/%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E7%9B%B4%E4%BE%9B%E7%94%B5%E5%85%A5%E9%97%A8/"/>
      <url>/2024/04/11/%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E7%9B%B4%E4%BE%9B%E7%94%B5%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不忍心浪费身边潜在的硬件&#x2F;软件资源<br>把闲置淘汰的安卓手机卸掉了电池，通过外部电源还能启动手机主板提供硬件&#x2F;软件服务，那是我所期望的结果</p><h2 id="电流和电路"><a href="#电流和电路" class="headerlink" title="电流和电路"></a>电流和电路</h2><h3 id="电荷-电荷量-库伦-C"><a href="#电荷-电荷量-库伦-C" class="headerlink" title="电荷 电荷量 库伦 C"></a>电荷 电荷量 库伦 C</h3><p>自然界只有两种电荷。人们把用丝绸摩擦过的玻璃棒带的电荷叫做正电荷（positive charge），用毛皮摩擦过的橡胶棒带的电荷叫做负电荷（negative charge）。同种电荷互相排斥，异种电荷互相吸引。物体所带电荷有多有少，电荷的多少叫做电荷量。为了方便起见，电荷量也可简称电荷。电荷量的单位是库仑（coulomb），简称库，符号是 C。</p><h2 id="电压-电阻"><a href="#电压-电阻" class="headerlink" title="电压 电阻"></a>电压 电阻</h2><h2 id="欧姆定律"><a href="#欧姆定律" class="headerlink" title="欧姆定律"></a>欧姆定律</h2><h2 id="电功率"><a href="#电功率" class="headerlink" title="电功率"></a>电功率</h2><h2 id="生活用电"><a href="#生活用电" class="headerlink" title="生活用电"></a>生活用电</h2><h2 id="电与磁"><a href="#电与磁" class="headerlink" title="电与磁"></a>电与磁</h2><h2 id="常用电子元器件的识别及焊接"><a href="#常用电子元器件的识别及焊接" class="headerlink" title="常用电子元器件的识别及焊接"></a>常用电子元器件的识别及焊接</h2><h3 id="电子元器件的分类"><a href="#电子元器件的分类" class="headerlink" title="电子元器件的分类"></a>电子元器件的分类</h3><p>通常将元器件分为有源元器件和无源元器件两大类。<br>有源元器件是指工作时，除了需输入信号，还必须有外加电源才可以正常工作的元器件，如晶体二极管、晶体三极管、MOS 场效应晶体管等。<br>无源元器件是指在电路中无须加电源即可在有信号时工作的元器件，如电阻器、电容器、电感器以及开关等。<br>习惯上称有源元器件为器件，称无源元器件为元件。</p><h3 id="电子元器件的认识"><a href="#电子元器件的认识" class="headerlink" title="电子元器件的认识"></a>电子元器件的认识</h3><h4 id="电阻器"><a href="#电阻器" class="headerlink" title="电阻器"></a>电阻器</h4><h4 id="电容器"><a href="#电容器" class="headerlink" title="电容器"></a>电容器</h4><h4 id="电感器"><a href="#电感器" class="headerlink" title="电感器"></a>电感器</h4><h4 id="晶体二极管"><a href="#晶体二极管" class="headerlink" title="晶体二极管"></a>晶体二极管</h4><h4 id="晶体三极管"><a href="#晶体三极管" class="headerlink" title="晶体三极管"></a>晶体三极管</h4><h3 id="电路与电路符号"><a href="#电路与电路符号" class="headerlink" title="电路与电路符号"></a>电路与电路符号</h3><h3 id="电路板焊接"><a href="#电路板焊接" class="headerlink" title="电路板焊接"></a>电路板焊接</h3><p>常见的焊接工具及辅助材料有电烙铁、锡丝、助焊剂、焊锡膏、<br>吸锡带、清洗剂等。<br><img src="/img/%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E7%9B%B4%E4%BE%9B%E7%94%B5%E5%85%A5%E9%97%A8/2024-04-11-02-13-24.png" alt="电烙铁"><br>电烙铁的主要用途是焊接元器件及导线，根据用途不同可分为大功率电烙铁和小功率电烙铁</p><p>锡丝由锡合金和助剂两部分组成。手工焊接配合使用锡丝与电烙铁，由电烙铁提供稳定持续的熔化热量，锡丝作为金属填充物添加到电子元器件的表面或缝隙中，完成焊接。</p><p>助焊剂具有保护作用，是一种阻止氧化反应的化学物质，在焊<br>接工艺中能帮助和促进焊接过程的完成。</p><p>焊锡膏是由焊锡粉、助焊剂以及其他的表面活性剂、触变剂等<br>加以混合形成的膏状混合物。</p><p>手工焊接是焊接技术中最常使用的焊接方法，也是电子产品装配与维修中的一项基本技能，适用于小批量或自动焊接有困难的应用场合。手工焊接的要求是焊接牢固，焊点光亮、圆滑、饱满。焊接的质量主要取决于焊接工具、焊料、焊剂和焊接技术。焊接过程可以分成五个步骤：准备施焊、加热焊件、送入锡丝、移开锡丝、移开电烙铁。</p><p><img src="/img/%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E7%9B%B4%E4%BE%9B%E7%94%B5%E5%85%A5%E9%97%A8/2024-04-11-02-17-58.png" alt="手工焊接操作示例"></p><p>（1）准备施焊。要求电烙铁头部干净，准备好电烙铁和锡丝。<br>（2）加热焊件。使用电烙铁加热焊件，并保持焊件均匀受热，电烙铁接触焊点。<br>（3）送入锡丝。达到熔化锡丝的温度后，把锡丝送入焊点，锡丝熔化并润湿焊点。<br>（4）移开锡丝。锡丝熔化至达到焊接要求后，将锡丝移开。<br>（5）移开电烙铁。焊点被完全润湿后，沿 45° 方向向上移开电烙铁。</p><p>电路板焊接技术呈现出向微电子焊接技术、无铅焊接技术这两个技术方向发展的趋势。有铅焊接技术有上百年的历史，具有较好的焊接可靠性和稳定性。随着环保要求的逐步提高，无铅焊接技术成为电子产业发展的一个必然选择。</p><h2 id="晶体管的基本原理及应用"><a href="#晶体管的基本原理及应用" class="headerlink" title="晶体管的基本原理及应用"></a>晶体管的基本原理及应用</h2><h3 id="晶体二极管-1"><a href="#晶体二极管-1" class="headerlink" title="晶体二极管"></a>晶体二极管</h3><h3 id="晶体三极管-1"><a href="#晶体三极管-1" class="headerlink" title="晶体三极管"></a>晶体三极管</h3><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>我们在日常生活中经常用到电源适配器，它的输入是交流 220 V 市电，输出为直流电，电压通常为 9 V、5 V 等。<br><img src="/img/%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E7%9B%B4%E4%BE%9B%E7%94%B5%E5%85%A5%E9%97%A8/2024-04-11-02-54-08.png" alt="从220 V市电到直流电的过程"><br>220 V 交流电压首先经过变压器转换为交流低压，<br>然后经整流电路输出单向脉动电压，再经过滤波电<br>路输出直流电压。整流电路可以采用如图 2-9 所示<br>的全波整流电路，滤波电路主要由滤波电容实现。<br><img src="/img/%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E7%9B%B4%E4%BE%9B%E7%94%B5%E5%85%A5%E9%97%A8/2024-04-11-03-01-39.png" alt="图2-9 全波整流电路"></p><h2 id="成功案例基本方法"><a href="#成功案例基本方法" class="headerlink" title="成功案例基本方法"></a>成功案例基本方法</h2><ul><li>方法一：DCDC 变压器（推荐，安全）<br>① 充电头 + 安卓数据线（取出线芯正负极）<br>② 电池电芯（取出电池保护板）<br>③DCDC 变压器，降压或升压，（通过变压器来变压到原装的电池电压）<br>④ 将数据线，接在变压器，再从变压器输出到电池电芯</li><li>方法二：直连电芯<br>① 充电头 + 安卓数据线（取线芯正负极）<br>② 电池电芯（取电池保护板）<br>③ 将数据线正负极，接在电池电芯正负极</li><li>疑惑案例<br>充电器 5V2A<br>电池 3.85-4.4V<br>我以为是要用 DCDC 变压器将 5V 的电压变压到电池电压 4.4V 以下，没想到直连 5V2A 供电到电池电芯也能，可能电池电芯也有降压作用？等有空测量过才知道……</li></ul><h2 id="非常感谢"><a href="#非常感谢" class="headerlink" title="非常感谢"></a>非常感谢</h2><p>[^1]: 义务教育教科书·物理九年级全一册[<a href="https://basic.smartedu.cn/">https://basic.smartedu.cn/</a> ]<br>[^2]: 普通高中教科书·通用技术 选择性必修 1 电子控制技术[<a href="https://basic.smartedu.cn/">https://basic.smartedu.cn/</a> ]</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>goLang入门</title>
      <link href="/2024/03/24/goLang%E5%85%A5%E9%97%A8/"/>
      <url>/2024/03/24/goLang%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不巧有些工具只能通过 goLang 编译来获得，那我就开始吧</p><h2 id="环境安装和-hello-word"><a href="#环境安装和-hello-word" class="headerlink" title="环境安装和 hello word"></a>环境安装和 hello word</h2><p><a href="https://mirrors.aliyun.com/golang/">https://mirrors.aliyun.com/golang/</a></p><h2 id="编译带依赖的-goLang-项目"><a href="#编译带依赖的-goLang-项目" class="headerlink" title="编译带依赖的 goLang 项目"></a>编译带依赖的 goLang 项目</h2><p><code>go install</code>从互联网上获取并安装依赖……<br><code>xcaddy build --with</code>xcaddy 从互联网上获取并安装依赖……</p><p>诸如此类的从互联网上获取依赖时，我们必须确保有正常连接，需要的话可以执行下面一段命令换成我们这边的源<br><code>go env -w GOPROXY=https://goproxy.cn</code><br>可选的其他地址<br>GOPROXY&#x3D;<a href="https://mirrors.cloud.tencent.com/go/">https://mirrors.cloud.tencent.com/go/</a><br>GOPROXY&#x3D;<a href="https://goproxy.cn/">https://goproxy.cn</a></p><p>依赖可能会尝试安装到如下环境变量对应的位置<br><code>$GOBIN </code><br><code>$HOME/go/bin</code><br><code>$GOROOT/bin</code><br><code>$GOTOOLDIR</code></p><h2 id="caddy"><a href="#caddy" class="headerlink" title="caddy"></a>caddy</h2><p>caddy 是类似于 nginx 的 Web 服务器和代理服务器</p><h2 id="xcaddy"><a href="#xcaddy" class="headerlink" title="xcaddy"></a>xcaddy</h2><p>xcaddy 是用来编译 caddy 的工具，那样就可以为 caddy 做自定义了</p><h2 id="naiveproxy"><a href="#naiveproxy" class="headerlink" title="naiveproxy"></a>naiveproxy</h2><p>naiveproxy，通过字节填充来模拟 Chrome 网络栈，配合 HTTPS 协议后可以在传输过程中保护个人隐私</p><h3 id="实现-naive-服务"><a href="#实现-naive-服务" class="headerlink" title="实现 naive 服务"></a>实现 naive 服务</h3><h4 id="naive-服务实现方法一：嵌入-caddy"><a href="#naive-服务实现方法一：嵌入-caddy" class="headerlink" title="naive 服务实现方法一：嵌入 caddy"></a>naive 服务实现方法一：嵌入 caddy</h4><p>可以通过 xcaddy 和 naiveproxy，编译出带 naive 功能的 caddy<br><code>xcaddy build --with github.com/caddyserver/forwardproxy@caddy2=github.com/klzgrad/forwardproxy@naive</code><br>编译成功后还要定义 caddy 的配置<code>Caddyfile</code>&#x2F;Caddyfile.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  http_port <span class="number">1180</span></span><br><span class="line">  https_port <span class="number">1443</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">:</span><span class="number">8022</span> <span class="punctuation">&#123;</span></span><br><span class="line">    tls C<span class="punctuation">:</span>\Users\henry\cert\ca.crtC<span class="punctuation">:</span>\Users\henry\cert\ca.key</span><br><span class="line">    route <span class="punctuation">&#123;</span></span><br><span class="line">        forward_proxy <span class="punctuation">&#123;</span></span><br><span class="line">            basic_auth yourUserName yourPassword</span><br><span class="line">            hide_ip</span><br><span class="line">            hide_via</span><br><span class="line">            probe_resistance</span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">        reverse_proxy https<span class="punctuation">:</span><span class="comment">//henry5001.github.io &#123;</span></span><br><span class="line">            header_up Host  <span class="punctuation">&#123;</span>upstream_hostport<span class="punctuation">&#125;</span></span><br><span class="line">            header_up X-Forwarded-Host  <span class="punctuation">&#123;</span>host<span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>caddy run --config yourCfgPath/Caddyfile.json</code><br>or only input<code>caddy run</code> auto match and use currentPath’s Caddyfile</p><h4 id="naive-服务实现方法二：运行-naive-amp-amp-运行-caddy"><a href="#naive-服务实现方法二：运行-naive-amp-amp-运行-caddy" class="headerlink" title="naive 服务实现方法二：运行 naive &amp;&amp; 运行 caddy"></a>naive 服务实现方法二：运行 naive &amp;&amp; 运行 caddy</h4><p>naive 侦听端口为 8080，这是 Caddy 将传递经过身份验证的数据流量<br><code>config.json</code>for naive</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;listen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://127.0.0.1:8080&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;padding&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>Caddyfile</code>Caddyfile.json for caddy</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">yourDomain<span class="punctuation">:</span><span class="number">8022</span> <span class="punctuation">&#123;</span></span><br><span class="line">    tls C<span class="punctuation">:</span>\Users\henry\cert\ca.crtC<span class="punctuation">:</span>\Users\henry\cert\ca.key</span><br><span class="line">    log stdout</span><br><span class="line">    errors stderr</span><br><span class="line">    root /var/www/html</span><br><span class="line"></span><br><span class="line">    forwardproxy <span class="punctuation">&#123;</span></span><br><span class="line">        basicauth yourUserName yourPassword</span><br><span class="line">        hide_ip</span><br><span class="line">        hide_via</span><br><span class="line">        probe_resistance</span><br><span class="line">        upstream http<span class="punctuation">:</span><span class="comment">//127.0.0.1:8080</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="naive-客户端方法一：运行客户端-naive-amp-amp-连接到客户端-naive"><a href="#naive-客户端方法一：运行客户端-naive-amp-amp-连接到客户端-naive" class="headerlink" title="naive 客户端方法一：运行客户端 naive &amp;&amp; 连接到客户端 naive"></a>naive 客户端方法一：运行客户端 naive &amp;&amp; 连接到客户端 naive</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;listen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;socks://127.0.0.1:1080&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;proxy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://yourUserName:yourPassword@youCaddyServerHost:port&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;padding&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;log&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>naive</code>启动 naive 客户端，可以配置 log 查看连接情况</p><p>然后在需要时连接到客户端 naive<br>socks:&#x2F;&#x2F;127.0.0.1:1080<br><a href="http://127.0.0.1:1080/">http://127.0.0.1:1080</a><br>即可享用</p><p>配置文件 config.json 中，默认使用 HTTP2(TCP)协议连接服务器，可改为 quic 来使用 QUIC(UDP)协议<br>把客户端文件从 https,改为 quic 就行</p><h3 id="域名-可信任的证书-你的服务程序"><a href="#域名-可信任的证书-你的服务程序" class="headerlink" title="域名 + 可信任的证书 + 你的服务程序"></a>域名 + 可信任的证书 + 你的服务程序</h3><h2 id="naive-服务实战"><a href="#naive-服务实战" class="headerlink" title="naive 服务实战"></a>naive 服务实战</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">:</span><span class="number">2443</span><span class="punctuation">,</span> chwe.ddns.net<span class="punctuation">:</span><span class="number">2443</span> <span class="punctuation">&#123;</span></span><br><span class="line">tls /root/caddy-work/cert/ca.cert /root/caddy-work/key/ca.key</span><br><span class="line">route <span class="punctuation">&#123;</span></span><br><span class="line">forward_proxy <span class="punctuation">&#123;</span></span><br><span class="line">basic_auth henry core@<span class="number">123</span></span><br><span class="line">hide_ip</span><br><span class="line">hide_via</span><br><span class="line">probe_resistance</span><br><span class="line">upstream http<span class="punctuation">:</span><span class="comment">//127.0.0.1:1080</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">file_server <span class="punctuation">&#123;</span></span><br><span class="line">root /root/caddy-work/webapp/app001</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="goLang-和-Java-谁是未来呢？"><a href="#goLang-和-Java-谁是未来呢？" class="headerlink" title="goLang 和 Java 谁是未来呢？"></a>goLang 和 Java 谁是未来呢？</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Oracle VM VirtualBox</title>
      <link href="/2024/03/22/Oracle-VM-VirtualBox/"/>
      <url>/2024/03/22/Oracle-VM-VirtualBox/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>常常苦恼于当前一台物理机无法满足需求吗，来看看虚拟机是怎么满足你的需求的</p><h3 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h3><p>CPU，内存，硬盘，网卡</p><p>某些应用程序和主机的一对一关系<br>缺少一个另外的操作系统软件</p><h2 id="虚拟机干了什么"><a href="#虚拟机干了什么" class="headerlink" title="虚拟机干了什么"></a>虚拟机干了什么</h2><p>虚拟机像是寄生虫，会瓜分物理机上的硬件资源，这篇文章主要围绕 CPU 和网卡这两个硬件资源，走进虚拟机设置的 CPU 和网络部分</p><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="物理机网络环境"><a href="#物理机网络环境" class="headerlink" title="物理机网络环境"></a>物理机网络环境</h3><p>物理机 192.168.31.222 + 路由器 192.168.31.1</p><h3 id="虚拟机常用的网络模式"><a href="#虚拟机常用的网络模式" class="headerlink" title="虚拟机常用的网络模式"></a>虚拟机常用的网络模式</h3><p>虚拟机中一个网络模式对应一张网卡，可以一台虚拟机添加多张网卡配置多种网络模式共存的并集；确保虚拟机静态 ip、dns、网关的正确设置；网关内的虚机 hostname、Mac 地址不能重复；如果无特殊需求，一般要先关闭虚拟机的防火墙再测试虚拟机中的网络，否则即使是逻辑上能通信的网络模式也会被防火墙 block 住。<br>我主要记录了（物理机 对 虚机），（虚机 对 虚机）是否能通信</p><ul><li><p>网络地址转换（NAT）</p></li><li><ul><li>（物理机 对 虚机）<br>路由器 192.168.31.1<br><strong>物理机 192.168.31.222 网关 192.168.31.1</strong><br><strong>虚拟机 10.0.2.15 网关 10.0.2.2</strong><br>网关不一样，新的私有地址，无法通信<br>又因为是 NAT 生成的，所以参考家宽 ip，可以访问外部物理机，不能被外部物理机访问</li></ul></li><li><ul><li>（虚机 对 虚机）<br><strong>虚拟机 10.0.2.15 网关 10.0.2.2</strong><br><strong>虚拟机 10.0.2.16 网关 10.0.2.2</strong><br>在同一个网关，可以互相通信</li></ul></li><li><p>桥接<br>路由器 192.168.31.1<br><strong>物理机 192.168.31.222 网关 192.168.31.1</strong><br><strong>虚拟机 192.168.31.223 网关 192.168.31.1</strong><br><strong>虚拟机 192.168.31.224 网关 192.168.31.1</strong><br>（物理机 对 虚机）&amp;&amp; （虚机 对 虚机）畅通无阻，但是桥接会占用路由器分配的 ip</p></li><li><p>仅主机<br><strong>物理机 192.168.31.222 网关 192.168.31.1</strong><br><strong>虚拟机 192.168.224.1 网关 N&#x2F;A</strong></p></li><li><p>区段<br>设置多个虚机使用同一个区段，也就是同一个网关。<br>比如我设置区段 0，那么区段 0 内的虚拟机都可以通信，但是只能设置静态 ip，因为没有 dhcp 服务器</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>电子邮箱入门</title>
      <link href="/2024/03/17/%E7%94%B5%E5%AD%90%E9%82%AE%E7%AE%B1%E5%85%A5%E9%97%A8/"/>
      <url>/2024/03/17/%E7%94%B5%E5%AD%90%E9%82%AE%E7%AE%B1%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>以搭建个人邮件服务器，实现 notification 邮件发送模块为目的</p><h2 id="电子邮箱通信原理"><a href="#电子邮箱通信原理" class="headerlink" title="电子邮箱通信原理"></a>电子邮箱通信原理</h2><p>一个电子邮件系统应具有下图所示的三个主要组成构件，这就是邮件客户端(用户代理)、邮件服务器，以及邮件发送协议（如 SMTP）和邮件读取协议（如 POP3）。<br><img src="/img/%E7%94%B5%E5%AD%90%E9%82%AE%E7%AE%B1%E5%85%A5%E9%97%A8/2024-03-17-14-32-10.png"></p><h3 id="邮件服务器"><a href="#邮件服务器" class="headerlink" title="邮件服务器"></a>邮件服务器</h3><p>邮件服务器需要使用两种不同的协议。</p><ul><li>SMTP 协议<br>一种协议用于客户端向邮件服务器发送邮件或在邮件服务器之间发送邮件，如：SMTP。</li><li>邮局协议 POP3<br>而另一种协议用于客户端从邮件服务器读取邮件，如：POP3。</li></ul><h3 id="邮件客户端"><a href="#邮件客户端" class="headerlink" title="邮件客户端"></a>邮件客户端</h3><p>在用中文讲电子邮件时，用户代理(User Agent)一般又称为电子邮件客户端软件，邮件客户端在大多数情况下它就是运行在用户设备中的一个程序，是用户与电子邮件系统的接口，邮件客户端至少要实现 4 个功能：攥写，显示，处理，<code>通信</code></p><h3 id="电子邮件的发信"><a href="#电子邮件的发信" class="headerlink" title="电子邮件的发信"></a>电子邮件的发信</h3><p>SMTP 发送方服务器收到客户端发来的邮件后，就把邮件临时存放在邮件缓存队列中，等待发送到接收方的邮件服务器。</p><p>发送方邮件服务器的 SMTP 客户与接收方邮件服务器的 SMTP 服务器建立 TCP 连接，然后就把邮件缓存队列中的邮件依次发送出去。请注意， 邮件不会在互联网中的某个中间邮件服务器落地。 如果 SMTP 客户还有一些邮件要发送到同一个邮件服务器，那么可以在原来已建立的 TCP 连接上重复发送。如果 SMTP 客户无法和 SMTP 服务器建立 TCP 连接（例如，接收方服务器过负荷或出了故障），那么要发送的邮件就会继续保存在发送方的邮件服务器中，并在稍后一段时间再进行新的尝试。如果 SMTP 客户超过了规定的时间还不能把邮件发送出去，那么发送邮件服务器就把这种情况通知客户端。</p><p>运行在接收方邮件服务器中的 SMTP 服务器进程收到邮件后，把邮件放入收件人的用户邮箱中，等待收件人进行读取。邮件发送完毕后， SMTP 客户应发送 QUIT 命令。 SMTP 服务器返回的信息是“221（服务关闭）”，表示 SMTP 同意释放 TCP 连接。邮件传送的全部过程即结束。</p><h3 id="电子邮件的收信"><a href="#电子邮件的收信" class="headerlink" title="电子邮件的收信"></a>电子邮件的收信</h3><p>收件人在打算收信时，就运行计算机中的邮件客户端，使用 POP3（或 IMAP）协议读取发送给自己的邮件。请注意，在上图中， POP3 服务器和 POP3 客户之间的箭头表示的是邮件传送的方向。但它们之间的通信是由 POP3 客户发起的。</p><p>如果是使用 IMAP，在使用 IMAP 时，在用户的计算机上运行 IMAP 客户程序，然后与接收方的邮件服务器上的 IMAP 服务器程序建立 TCP 连接。用户在自己的计算机上就可以操纵邮件服务器的邮箱，就像在本地操纵一样， 因此 IMAP 是一个联机协议。当用户计算机上的 IMAP 客户程序打开 IMAP 服务器的邮箱时，用户就可看到邮件的首部。若用户需要打开某个邮件，则该邮件才传到用户的计算机上。用户可以根据需要为自己的邮箱创建便于分类管理的层次式的邮箱文件夹，并且能够将存放的邮件从某一个文件夹中移动到另一个文件夹中。用户也可按某种条件对邮件进行查找。在用户未发出删除邮件的命令之前， IMAP 服务器邮箱中的邮件一直保存着。<br><img src="/img/%E7%94%B5%E5%AD%90%E9%82%AE%E7%AE%B1%E5%85%A5%E9%97%A8/2024-03-17-16-32-44.png"></p><h3 id="MIME"><a href="#MIME" class="headerlink" title="MIME"></a>MIME</h3><p>MIME 并没有改动或取代 SMTP。 MIME 的意图是继续使用原来的邮件格式，但增加了邮件主体的结构，并定义了传送非 ASCII 码的编码规则。<br><img src="/img/%E7%94%B5%E5%AD%90%E9%82%AE%E7%AE%B1%E5%85%A5%E9%97%A8/2024-03-17-15-32-53.png"></p><h4 id="可以标准化发送二进制文件了"><a href="#可以标准化发送二进制文件了" class="headerlink" title="可以标准化发送二进制文件了"></a>可以标准化发送二进制文件了</h4><p>SMTP 不能传送可执行文件或其他的二进制对象。人们曾试图将二进制文件转换为 SMTP 使用的 ASCII 文本，例如流行的 UNIX UUencode&#x2F;UUdecode 方案，但这些均未形成正式标准或事实上的标准。但是现在，MIME 就是标准。</p><h4 id="可以内容编码"><a href="#可以内容编码" class="headerlink" title="可以内容编码"></a>可以内容编码</h4><ul><li>base64 实现压缩长度<br>对于任意的二进制文件，可用 base64 编码。这种编码方法是先把二进制代码划分为一个个 24 位长的单元，然后把每一个 24 位单元划分为 4 个 6 位组。每一个 6 位组按以下方法转换成 ASCII 码。 6 位的二进制代码共有 64 种不同的值，从 0 到 63。用 A 表示 0，用 B 表示 1，等等。 26 个大写字母排列完毕后， 接下去再排 26 个小写字母，再后面是 10 个数字，最后用“ +” 表示 62，而用“ &#x2F;” 表示 63。再用两个连在一起的等号“ &#x3D;&#x3D;”和一个等号“&#x3D;”分别表示最后一组的代码只有 8 位或 16 位。回车和换行都忽略，它们可在任何地方插入。<br>下面是一个 base64 编码的例子：<br><img src="/img/%E7%94%B5%E5%AD%90%E9%82%AE%E7%AE%B1%E5%85%A5%E9%97%A8/2024-03-17-15-44-55.png"></li><li>quoted-printable 实现多语言<br>quoted-printable，这种编码方法适用于所传送的数据中只有少量的非 ASCII 码，例如汉字。这种编码方法的要点就是对于所有可打印的 ASCII 码，除特殊字符等号“&#x3D;”外， 都不改变。等号“&#x3D;”和不可打印的 ASCII 码以及非 ASCII 码的数据的编码方法是：先将每个字节的二进制代码用两个十六进制数字表示，然后在前面再加上一个等号“&#x3D;”。例如，汉字的“系统”的二进制编码是： 11001111 10110101 11001101 10110011（共有 32 位，但这四个字节都不是 ASCII 码），其十六进制数字表示为： CFB5CDB3。用 quoted-printable 编码表示为： &#x3D;CF&#x3D;B5&#x3D;CD&#x3D;B3，这 12 个字符都是可打印的 ASCII 字符，它们的二进制编码 ① 需要 96 位，和原来的 32 位相比，开销达 200%。而等号“&#x3D;”的二进制代码为 00111101，即十六进制的 3D，因此等号“&#x3D;”的 quoted-printable 编码为“&#x3D;3D”。</li><li>ASCII 码<br>最简单的编码就是 7 位 ASCII 码，而每行不能超过 1000 个字符。 MIME 对这种由 ASCII 码构成的邮件主体不进行任何转换。</li></ul><h4 id="可以标准化多媒体邮件"><a href="#可以标准化多媒体邮件" class="headerlink" title="可以标准化多媒体邮件"></a>可以标准化多媒体邮件</h4><p><code>MIME类型，也被称为媒体类型，用于表示HTTP传输的内容的类型</code><br>MIME 标准规定 Content-Type 说明必须含有两个标识符，即内容类型(type)和子类型(subtype)，中间用“&#x2F;”分开。<br><img src="/img/%E7%94%B5%E5%AD%90%E9%82%AE%E7%AE%B1%E5%85%A5%E9%97%A8/2024-03-17-16-06-47.png"></p><p>文本，图像，音频，视频，模型，应用，报文，多部分……</p><p>实在是太多了，都是内容类型和子类型元素构成的数组……<br>text 文本&#x3D;{html,css……}<br>image 图像&#x3D;{gif,jpeg……}</p><p>子类型的数目还在不断地增加……</p><h3 id="基于浏览器的邮件客户端"><a href="#基于浏览器的邮件客户端" class="headerlink" title="基于浏览器的邮件客户端"></a>基于浏览器的邮件客户端</h3><p>我们知道，用户在浏览器中浏览各种信息时需要使用 HTTP 协议。因此，在浏览器和互联网上的邮件服务器之间传送邮件时，仍然使用 HTTP 协议。但是在各邮件服务器之间传送邮件时，则仍然使用 SMTP 协议。</p><h2 id="以-James-为例搭建邮件服务器"><a href="#以-James-为例搭建邮件服务器" class="headerlink" title="以 James 为例搭建邮件服务器"></a>以 James 为例搭建邮件服务器</h2><p>SMTP.port&#x3D;25<br>IMAP.port&#x3D;143</p><h3 id="James-命令行"><a href="#James-命令行" class="headerlink" title="James 命令行"></a>James 命令行</h3><p><code>james-cli.bat -h 127.0.0.1 -p 9999 adddomain my_org.com </code></p><p><code> james-cli.bat -h 127.0.0.1 -p 9999 AddUser test1@my_org.com Password12345</code></p><h3 id="邮件客户端-1"><a href="#邮件客户端-1" class="headerlink" title="邮件客户端"></a>邮件客户端</h3><p>主邮箱登录类型 IMAP<code>test1@my_org.com</code><br>想收取子邮箱的话可以 POP 挂载其他邮箱<code>163 qq ……</code></p><h2 id="祝贺你学会了电子邮件，开始发出一封邮件吧"><a href="#祝贺你学会了电子邮件，开始发出一封邮件吧" class="headerlink" title="祝贺你学会了电子邮件，开始发出一封邮件吧"></a>祝贺你学会了电子邮件，开始发出一封邮件吧</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from</span><br><span class="line">to</span><br><span class="line">cc</span><br><span class="line">subject</span><br><span class="line">content</span><br><span class="line">signature</span><br><span class="line">attachment</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Angular入门</title>
      <link href="/2024/03/03/Angular%E5%85%A5%E9%97%A8/"/>
      <url>/2024/03/03/Angular%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>公司用啥我用啥，今天我用 Angular<br>先修知识点 nodejs，npm，typescript<br>选修知识点 webpack，babel</p><h2 id="Angular-背景"><a href="#Angular-背景" class="headerlink" title="Angular 背景"></a>Angular 背景</h2><p>Angularjs 和 Angular 不是同一个东西<br>现在一般都是使用 Angular 了<br>基于 TypeScript、RxJS、Immutable.js</p><p>Angular1.0≈Angularjs<br>Angular2.0 or AngularLatest&#x3D;重做</p><p>从 2.0 开始能够支持 TypeScript&#x2F;JavaScript&#x2F;Dart</p><h2 id="Angular-安装-amp-环境配置-amp-HelloWorld"><a href="#Angular-安装-amp-环境配置-amp-HelloWorld" class="headerlink" title="Angular 安装 &amp; 环境配置 &amp; HelloWorld"></a>Angular 安装 &amp; 环境配置 &amp; HelloWorld</h2><p>确保你已经有了 nodejs、npm<br><code>npm install -g @angular/cli</code>安装<br><code>ng new myApp</code>新建一个 angular 项目<br><code>cd myApp</code>进入 angular 项目<br><code>npm install</code>安装依赖<br><code>ng server</code>运行服务<br><code>ng server --open</code>运行服务，然后自动打开默认浏览器访问服务</p><h2 id="angular-项目-src-目录简介"><a href="#angular-项目-src-目录简介" class="headerlink" title="angular 项目 src 目录简介"></a>angular 项目 src 目录简介</h2><p>styles.css 全局样式<br>polyfills.ts 浏览器兼容性<br>assets 静态资源文件夹<br>app 我们开发的组件全在这里</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>可以通过命令来创建组件<code>ng generate component xxx</code><br>xxx.component.html<br>xxx.component.css<br>xxx.component.ts</p><h3 id="定义组件"><a href="#定义组件" class="headerlink" title="定义组件"></a>定义组件</h3><p>通过在@Component 注解装饰器来描述组件的元数据</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//vim xxx.component.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@angular/core&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组件/装饰器</span></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&quot;app-root&quot;</span>, <span class="comment">//xxx组件用什么标签渲染</span></span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&quot;./xxx.component.html&quot;</span>, <span class="comment">//xxx组件的模板</span></span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&quot;./xxx.component.css&quot;</span>], <span class="comment">//xxx组件用到的样式</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//或者组件可以没有模板, 也可以没有样式</span></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&quot;app-root&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//如果不需要文件的话，模板和样式可以用ES6模板字符串</span></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&quot;app-root&quot;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">`&lt;span&gt;&#123;&#123;title&#125;&#125;&lt;/span&gt;`</span>, <span class="comment">//xxx组件的模板</span></span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">`span:&#123;color: red&#125;`</span>], <span class="comment">//xxx组件用到的样式</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span> = <span class="string">&quot;this is title&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用组件"><a href="#引用组件" class="headerlink" title="引用组件"></a>引用组件</h3><p>每个 Angular 项目都至少有一个根模块<code>app.module.ts</code>，所有的小组件都必须在这里先引用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//vim app.module.ts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导入项目内自己编写的组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./xxx.component&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">    <span class="attr">declarations</span>:[<span class="title class_">AppComponent</span>],<span class="comment">//导入自己写的组件</span></span><br><span class="line">    <span class="attr">imports</span>:[<span class="title class_">BrowserModule</span>],<span class="comment">//导入第三方组件</span></span><br><span class="line">    <span class="attr">providers</span>:[],</span><br><span class="line">    <span class="attr">bootstrap</span>:[<span class="title class_">AppComponent</span>]<span class="comment">//根组件</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript入门</title>
      <link href="/2024/03/02/TypeScript%E5%85%A5%E9%97%A8/"/>
      <url>/2024/03/02/TypeScript%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-amp-环境配置-amp-HelloWorld"><a href="#安装-amp-环境配置-amp-HelloWorld" class="headerlink" title="安装 &amp; 环境配置 &amp; HelloWorld"></a>安装 &amp; 环境配置 &amp; HelloWorld</h2><p>全局安装<code>npm install -g typescript</code><br>测试代码</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vim xxx.ts</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;helloHenry&quot;</span>);</span><br></pre></td></tr></table></figure><p>编译<code>tsc xxx.ts</code><br>编译得到 xxx.js</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="变量数据类型检查"><a href="#变量数据类型检查" class="headerlink" title="变量数据类型检查"></a>变量数据类型检查</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//javascript</span></span><br><span class="line"><span class="keyword">let</span> age;</span><br><span class="line">age = <span class="number">10</span>;</span><br><span class="line">age = <span class="string">&quot;ten&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//typescript</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">age = <span class="number">10</span>;</span><br><span class="line">age = <span class="string">&quot;ten&quot;</span>; <span class="comment">//编译会报错，因为违反了变量的类型约束</span></span><br></pre></td></tr></table></figure><h3 id="首次初始化赋值即可确定变量数据类型"><a href="#首次初始化赋值即可确定变量数据类型" class="headerlink" title="首次初始化赋值即可确定变量数据类型"></a>首次初始化赋值即可确定变量数据类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//typescript</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">9</span>;</span><br><span class="line">age = <span class="number">10</span>;</span><br><span class="line">age = <span class="string">&quot;ten&quot;</span>; <span class="comment">//编译会报错，因为违反了变量的类型约束</span></span><br></pre></td></tr></table></figure><h3 id="函数参数的数据类型"><a href="#函数参数的数据类型" class="headerlink" title="函数参数的数据类型"></a>函数参数的数据类型</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//javascript</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">4</span>, <span class="number">6</span>); <span class="comment">//10</span></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>, <span class="string">&quot;0&quot;</span>); <span class="comment">//&quot;10&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//typescript</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">4</span>, <span class="number">6</span>); <span class="comment">//10</span></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>, <span class="string">&quot;0&quot;</span>); <span class="comment">//编译会报错，因为违反了变量的类型约束</span></span><br></pre></td></tr></table></figure><h3 id="字面量的最终变量-x2F-多个最终赋值"><a href="#字面量的最终变量-x2F-多个最终赋值" class="headerlink" title="字面量的最终变量 &#x2F; 多个最终赋值"></a>字面量的最终变量 &#x2F; 多个最终赋值</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//typescript</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="number">10</span>; <span class="comment">//最终变量</span></span><br><span class="line">age = <span class="number">18</span>; <span class="comment">//age已是最终变量，无法修改</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//typescript</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">userName</span>: <span class="string">&quot;henry&quot;</span> | <span class="string">&quot;gary&quot;</span>; <span class="comment">//字面量</span></span><br><span class="line">userName = <span class="string">&quot;gary&quot;</span>;</span><br><span class="line">userName = <span class="string">&quot;other&quot;</span>; <span class="comment">//编译会报错，只能是字面量类型之一</span></span><br><span class="line">userName = <span class="string">&quot;henry&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="类型起别名"><a href="#类型起别名" class="headerlink" title="类型起别名"></a>类型起别名</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">userName</span>: <span class="string">&quot;henry&quot;</span> | <span class="string">&quot;gary&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> diyType = userName;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">newUserName</span>: diyType;</span><br><span class="line">newUserName = <span class="string">&quot;gary&quot;</span>;</span><br><span class="line">newUserName = <span class="string">&quot;other&quot;</span>; <span class="comment">//编译会报错，只能是字面量类型</span></span><br><span class="line">newUserName = <span class="string">&quot;henry&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="回到-js-变量类型-any-不建议使用"><a href="#回到-js-变量类型-any-不建议使用" class="headerlink" title="回到 js 变量类型 any 不建议使用"></a><del>回到 js 变量类型 any</del> 不建议使用</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//typescript</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">any</span>;</span><br><span class="line"><span class="keyword">let</span> str;</span><br></pre></td></tr></table></figure><h3 id="unknown-可触发赋值前的类型检查"><a href="#unknown-可触发赋值前的类型检查" class="headerlink" title="unknown 可触发赋值前的类型检查"></a>unknown 可触发赋值前的类型检查</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//typescript</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">p</span>: <span class="built_in">unknown</span>;</span><br><span class="line">p = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">pv2</span>: <span class="built_in">string</span>;</span><br><span class="line">pv2 = <span class="string">&quot;三点一四&quot;</span>;</span><br><span class="line"></span><br><span class="line">pv2 = p; <span class="comment">//编译会报错，因为违反了变量的类型约束</span></span><br></pre></td></tr></table></figure><p>如果你要传递 unknown 类型的数据，要先做类型判断，或者类型断言</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//typescript</span></span><br><span class="line"><span class="comment">//类型判断</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> p === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">  pv2 = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类型断言</span></span><br><span class="line">pv2 = p <span class="keyword">as</span> <span class="built_in">string</span>;</span><br><span class="line">pv2 = &lt;<span class="built_in">string</span>&gt;p;</span><br></pre></td></tr></table></figure><h3 id="函数的返回值的数据类型"><a href="#函数的返回值的数据类型" class="headerlink" title="函数的返回值的数据类型"></a>函数的返回值的数据类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">result</span>: <span class="built_in">number</span> = <span class="title function_">sum</span>(<span class="number">4</span>, <span class="number">6</span>); <span class="comment">//10</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">result_v2</span>: <span class="built_in">string</span> = <span class="title function_">sum</span>(<span class="number">4</span>, <span class="number">6</span>); <span class="comment">//编译会报错，因为违反了变量的类型约束</span></span><br></pre></td></tr></table></figure><h4 id="函数多个返回值"><a href="#函数多个返回值" class="headerlink" title="函数多个返回值"></a>函数多个返回值</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span> | <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> ((a <span class="keyword">as</span> <span class="built_in">number</span>) || (b <span class="keyword">as</span> <span class="built_in">number</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ((a <span class="keyword">as</span> <span class="built_in">string</span>) || (b <span class="keyword">as</span> <span class="built_in">string</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> a.<span class="title function_">toString</span>() + b.<span class="title function_">toString</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数-void-返回值："><a href="#函数-void-返回值：" class="headerlink" title="函数 void 返回值："></a>函数 void 返回值：</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//typescript</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="comment">//return undefined;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数-never-返回值："><a href="#函数-never-返回值：" class="headerlink" title="函数 never 返回值："></a>函数 never 返回值：</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//typescript</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>): <span class="built_in">never</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">object</span>;</span><br><span class="line">a = &#123;&#125;;</span><br><span class="line">a = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br></pre></td></tr></table></figure><p>上面这样子赋值和 JavaScript 没有本质区别<br>实际上我们可以用来限制对象中属性的个数顺序和类型，参考后面部分</p><h3 id="实体类对象类型"><a href="#实体类对象类型" class="headerlink" title="实体类对象类型"></a>实体类对象类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-----实体类对象start-----</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: &#123;<span class="attr">name</span>: <span class="built_in">string</span>&#125;;</span><br><span class="line">b = &#123;<span class="attr">name</span>: <span class="string">&#x27;henry&#x27;</span>，<span class="attr">age</span>: <span class="number">10</span>&#125;;<span class="comment">//编译会报错，因为违反了对象属性的数据类型约束</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">j</span>: &#123;<span class="attr">name</span>:<span class="built_in">string</span>&#125; &amp; &#123;<span class="attr">age</span>:<span class="built_in">number</span>&#125;;<span class="comment">//也可以这样来限制实体类对象的数据类型</span></span><br><span class="line">j = &#123;<span class="attr">name</span>:<span class="string">&#x27;henry&#x27;</span>,<span class="attr">age</span>: <span class="number">10</span>&#125;;</span><br><span class="line"><span class="comment">//-----实体类对象end-----</span></span><br></pre></td></tr></table></figure><h3 id="函数对象类型约束"><a href="#函数对象类型约束" class="headerlink" title="函数对象类型约束"></a>函数对象类型约束</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-----函数对象start-----</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f</span>: <span class="function">(<span class="params">s: <span class="built_in">number</span>, d: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line">d = <span class="keyword">function</span> (<span class="params">n1, n2</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">d = <span class="keyword">function</span> (<span class="params">n1: <span class="built_in">string</span>, n2: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="comment">//编译会报错，违反了函数对象的数据类型约束</span></span><br><span class="line">  <span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//-----函数对象end-----</span></span><br></pre></td></tr></table></figure><h3 id="对象有可选非必填属性"><a href="#对象有可选非必填属性" class="headerlink" title="对象有可选非必填属性"></a>对象有可选非必填属性</h3><ul><li>对象有可选非必填属性</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>; reName?: <span class="built_in">string</span> &#125;;</span><br><span class="line">b = &#123; <span class="attr">name</span>: <span class="string">&quot;henry&quot;</span> &#125;; <span class="comment">//缺少问号?结尾的可选属性，是允许的</span></span><br></pre></td></tr></table></figure><ul><li>对象有<code>任意个数的</code>可选非必填属性</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>; [<span class="attr">attributeName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125;;</span><br><span class="line">b = &#123; <span class="attr">name</span>: <span class="string">&quot;Henry&quot;</span>, <span class="attr">bestFriend</span>: <span class="string">&quot;Kira&quot;</span>, <span class="attr">bestFriendAge</span>: <span class="number">18</span> &#125;;</span><br></pre></td></tr></table></figure><ul><li>对象有<code>任意个数的，指定类型的</code>可选非必填属性</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>; [<span class="attr">attributeName</span>: <span class="built_in">string</span>]: <span class="built_in">string</span> &#125;;</span><br><span class="line">b = &#123; <span class="attr">name</span>: <span class="string">&quot;Henry&quot;</span>, <span class="attr">bestFriend</span>: <span class="string">&quot;Kira&quot;</span>, <span class="attr">bestFriendAge</span>: <span class="number">10</span> &#125;; <span class="comment">//编译会报错，因为违反了对象属性的数据类型约束</span></span><br><span class="line">b = &#123; <span class="attr">name</span>: <span class="string">&quot;Henry&quot;</span>, <span class="attr">bestFriend</span>: <span class="string">&quot;Kira&quot;</span>, <span class="attr">bestFriendAge</span>: <span class="string">&quot;ten&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><h2 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//typescript</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">nameSplit</span>: <span class="built_in">string</span>[];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">nameSplitErr</span>: <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line">nameSplit = [<span class="string">&quot;h&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="string">&quot;y&quot;</span>];</span><br><span class="line">nameSplitErr = [<span class="string">&quot;h&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="number">5</span>]; <span class="comment">//编译会报错，因为违反了数组的数据类型约束</span></span><br></pre></td></tr></table></figure><h2 id="元组类型"><a href="#元组类型" class="headerlink" title="元组类型"></a>元组类型</h2><p>固定了长度，和元素数据类型的数组，长度不会太长，太长还是用数组吧</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">u</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">u = [<span class="string">&quot;henry&quot;</span>, <span class="number">10</span>];</span><br><span class="line">u = [<span class="string">&quot;henry&quot;</span>, <span class="string">&quot;ten&quot;</span>]; <span class="comment">//编译会报错，因为违反了元组的数据类型约束</span></span><br></pre></td></tr></table></figure><h2 id="enum-枚举类型"><a href="#enum-枚举类型" class="headerlink" title="enum 枚举类型"></a>enum 枚举类型</h2><p>后端通常会存储 codeList &#x2F; dataList 形式的数据在数据库，并且为了安全性通常在数据传递或用这些数据判断时只会用编码值 code，但是直接用 code 去做判断，非常影响代码的可读性。<br><code>反正使用enum最终编译器可以编译成code来做判断，又提升了可读性，为什么不用呢？</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Gender</span>&#123;</span><br><span class="line">    <span class="title class_">Man</span> = <span class="number">1</span>;<span class="comment">//Gender.code = 1</span></span><br><span class="line">    <span class="title class_">Women</span> = <span class="number">0</span>;<span class="comment">//Gender.code = 0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//--------------------------------</span></span><br><span class="line"><span class="keyword">let</span> u = &#123;<span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">gender</span>: <span class="title class_">Gender</span>&#125;</span><br><span class="line">u = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;henry&#x27;</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="title class_">Gender</span>.<span class="property">Man</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (u.<span class="property">gender</span> === <span class="number">1</span>) <span class="keyword">return</span> <span class="string">&#x27;做男人应该干的事情&#x27;</span>;<span class="comment">//可读性极差</span></span><br><span class="line"><span class="keyword">if</span> (u.<span class="property">gender</span> === <span class="title class_">Gender</span>.<span class="property">Man</span>) <span class="keyword">return</span> <span class="string">&#x27;做男人应该干的事情&#x27;</span>;<span class="comment">//提升了可读性</span></span><br></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="泛型修饰函数"><a href="#泛型修饰函数" class="headerlink" title="泛型修饰函数"></a>泛型修饰函数</h3><p><code>function fnName &lt;参数或返回值的数据类型&gt; (参数数据类型) : 返回值数据类型</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> fn1&lt;T&gt;(<span class="attr">a</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> fn2&lt;T, K&gt;(<span class="attr">a</span>: T, <span class="attr">b</span>: K): T &#123;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn2</span>(<span class="number">123</span>, <span class="string">&quot;hello&quot;</span>); <span class="comment">//因为这些类型是可由编译检查的，可以不写尖括号</span></span><br><span class="line">fn2&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt;(<span class="number">123</span>, <span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure><p>我们通常用来指定更小范围的不确定类型<br><code>function fnName&lt;泛型 extends 接口/类&gt; (参数数据类型) : 返回值数据类型</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">WaitImpl</span> &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//T extends WaitImpl 表示泛型T必须是WaitImpl的子类 或者是 实现了WaitImpl的类</span></span><br><span class="line"><span class="keyword">function</span> fn3&lt;T <span class="keyword">extends</span> <span class="title class_">WaitImpl</span>&gt;(<span class="attr">a</span>: T): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn3</span>(<span class="string">&quot;hi all&quot;</span>); <span class="comment">//string对象有length属性，算是实现了WaitImpl</span></span><br><span class="line"><span class="comment">//fn3(333);//number对象没有length属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//fn3( &#123;name:&#x27;henry&#x27;&#125; );//对象没有length属性</span></span><br><span class="line"><span class="comment">//fn3( &#123;length:&#x27;ten&#x27;&#125; );//对象的length属性不是number类型</span></span><br><span class="line"><span class="title function_">fn3</span>(&#123; <span class="attr">length</span>: <span class="number">10</span> &#125;); <span class="comment">//对象的length属性是number类型</span></span><br></pre></td></tr></table></figure><h3 id="泛型修饰类"><a href="#泛型修饰类" class="headerlink" title="泛型修饰类"></a>泛型修饰类</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Goods</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">price</span>: T;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">price: T</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//例如多语言的一百万精确到两位小数</span></span><br><span class="line"><span class="keyword">const</span> goodsDe = <span class="keyword">new</span> <span class="title class_">Goods</span>&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;1.000.000,00&quot;</span>); <span class="comment">//de_DE_German</span></span><br><span class="line"><span class="keyword">const</span> goodsUs = <span class="keyword">new</span> <span class="title class_">Goods</span>&lt;<span class="built_in">number</span>&gt;(<span class="string">&quot;1,000,000.00&quot;</span>); <span class="comment">//en_US_English</span></span><br></pre></td></tr></table></figure><h2 id="编译项目相关"><a href="#编译项目相关" class="headerlink" title="编译项目相关"></a>编译项目相关</h2><p><code>tsc xxx.ts</code>非常自信，编译运行，一气呵成，不再维护<br><code>tsc -w xxx.ts</code>watch 监视文件的变化，即时编译</p><h3 id="tsconfig-json-配置文件"><a href="#tsconfig-json-配置文件" class="headerlink" title="tsconfig.json 配置文件"></a>tsconfig.json 配置文件</h3><p>*<em>文件夹，</em>文件</p><ul><li>include<br>包含哪些要编译的，</li><li>exclude<br>排除哪些不要编译的，默认值：node_modules, bower_components, jspm_packages</li><li>compilerOptions</li><li><ul><li>target<br>指定要编译成的 ES 版本，可选值：es3, es6, es2015, es2016, es2017, es2018, es2019, es2020， esnext</li></ul></li><li><ul><li>module<br>编译时的模块化规范，可选择：es2016, commonjs</li></ul></li><li><ul><li>lib<br>如果代码在 nodejs 运行，没有浏览器 lib，但是代码又写了浏览器的 lib，就可能要导入一些 lib，document.getElementById();</li></ul></li><li><ul><li>outDir<br>编译后输出的目录，约定是.&#x2F;dist</li></ul></li><li><ul><li>outFile<br>合并为一个文件，.&#x2F;dist&#x2F;app.js</li></ul></li><li><ul><li>allowJs<br>是否需要编译 js，默认 false</li></ul></li><li><ul><li>checkJs<br>是否检查 js 的语法规范，默认 true</li></ul></li><li><ul><li>removeComments<br>是否在编译后移除注释</li></ul></li><li><ul><li>noEmit<br>不生成编译后的文件，如果你只是用来做语法规范检查的话</li></ul></li><li><ul><li>noEmitOnError<br>如果编译失败，不生成编译后的文件</li></ul></li><li><ul><li><strong>strict</strong><br>严格检查的总开关</li></ul></li><li><ul><li>alwaysStrict<br>编译后的文件是否使用严格模式，默认 false</li></ul></li><li><ul><li>noImplicitAny<br>不允许隐式声明的 any 类型，必须手动声明 any 类型</li></ul></li><li><ul><li>noImplicitThis<br>不允许不明确类型的 this，必须指定 this 的类型</li></ul></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"><span class="variable language_">this</span>: Window</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><ul><li>strictNullChecks<br>检查出可能为空但没有处理的值</li></ul></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>);</span><br><span class="line">box1.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;hello box1&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//box1可能会取到空的，所以要做判断</span></span><br><span class="line"><span class="comment">//这样子判断，更简单</span></span><br><span class="line">box1?.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;hello box1&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (box1 !== <span class="literal">null</span>) &#123;</span><br><span class="line">  box1.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;hello box1&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打包工具-webpack"><a href="#打包工具-webpack" class="headerlink" title="打包工具 webpack"></a>打包工具 webpack</h3><p>管理项目编译&#x2F;打包 后的语法规范和浏览器的兼容性</p><p>目前是初级开发阶段，项目打包工具和配置文件这块都是组长领导决定的，可以先不看</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="类-class"><a href="#类-class" class="headerlink" title="类 class"></a>类 class</h3><p>属性需要通过 new 实例才能访问<br>static 静态属性可以直接通过类名访问</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&quot;henry&quot;</span>;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">18</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="attr">gender</span>: <span class="built_in">string</span> = <span class="string">&quot;man&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello Person from sayHello&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">sSayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello Person from sSayHello&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> per = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(per); <span class="comment">//&#123;name:&#x27;henry&#x27;,age:18,gender:&#x27;man&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(per.<span class="property">name</span>, per.<span class="property">age</span>); <span class="comment">//henry,18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">gender</span>); <span class="comment">//&#x27;man&#x27;</span></span><br><span class="line"></span><br><span class="line">per.<span class="property">name</span> = <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(per.<span class="property">name</span>); <span class="comment">//whoami</span></span><br><span class="line"></span><br><span class="line">per.<span class="property">age</span> = <span class="number">19</span>; <span class="comment">//readonly修饰的属性不能被修改，祝我我永远18岁</span></span><br><span class="line"></span><br><span class="line">per.<span class="title function_">sayHello</span>();</span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">sSayHello</span>();</span><br></pre></td></tr></table></figure><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>通过构造函数给属性赋值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="comment">//this表示当前实例</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//通过this表示当前调用这个方法的对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;小白&quot;</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> dog2 = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;小红&quot;</span>, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">dog2.<span class="title function_">say</span>(); <span class="comment">//小红</span></span><br></pre></td></tr></table></figure><h3 id="访问权限修饰符"><a href="#访问权限修饰符" class="headerlink" title="访问权限修饰符"></a>访问权限修饰符</h3><p>public, protected, private</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>用 private 来声明属性私有化，<br>通过声明 get、set 函数来操作私有属性，在函数内存取属性前做判断</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//构造函数赋值属性</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//默认public函数赋值属性</span></span><br><span class="line">  <span class="title function_">setAge</span>(<span class="params">ageV: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> ageV === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">age</span> = ageV;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> per = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;henry&quot;</span>, <span class="number">20</span>);</span><br><span class="line">per.<span class="title function_">setAge</span>(<span class="number">18</span>);</span><br><span class="line">per.<span class="property">getAge</span>;</span><br><span class="line"><span class="comment">//可以简写成下面的方式</span></span><br><span class="line">per.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">per.<span class="property">age</span>;</span><br></pre></td></tr></table></figure><p>构造函数定义属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>, <span class="keyword">public</span> age: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">  per = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;henry&quot;</span>, <span class="number">18</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="儿子继承父亲-和-重写父亲方法"><a href="#儿子继承父亲-和-重写父亲方法" class="headerlink" title="儿子继承父亲 和 重写父亲方法"></a>儿子继承父亲 和 重写父亲方法</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//为了不和前面Dog类的定义冲突，我们可以把另一个新的Dog类写在立即执行函数中</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">initAnimal</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有动物出世了&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">aRun</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;动物运动&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Dog</span> extend <span class="title class_">Animal</span>&#123;</span><br><span class="line">        <span class="attr">age</span>:<span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">age:<span class="built_in">number</span>,name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">            <span class="variable language_">super</span>(name);<span class="comment">//new实例化子类时，name是在父类中初始化的，所以需要super()调一边父亲constructor来给name赋值</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重写了父亲的aRun方法</span></span><br><span class="line">        <span class="title function_">aRun</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">super</span>.<span class="title function_">initAnimal</span>();<span class="comment">//选择性调用父亲的行为</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;狗在跑&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Fish</span> extend <span class="title class_">Animal</span>&#123;</span><br><span class="line">        <span class="attr">age</span>:<span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">age:<span class="built_in">number</span>,name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">            <span class="variable language_">super</span>(name);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重写了父亲的aRun方法</span></span><br><span class="line">        <span class="title function_">aRun</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;小鱼儿出世了&#x27;</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;鱼在游&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="number">3</span>,<span class="string">&#x27;小白&#x27;</span>);</span><br><span class="line">    dog.<span class="title function_">aRun</span>();</span><br><span class="line">    <span class="comment">//有动物出世了</span></span><br><span class="line">    <span class="comment">//狗在跑</span></span><br><span class="line"></span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>上面的 Animal 是抽象的，可以拆分为 Dog、Fish 这些实现<br>所以我们通常会把抽象的作为抽象类，我们不直接使用抽象类对象，而是通过其他类继承来完成这个抽象的具体实现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//abstract抽象类</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">initAnimal</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有动物出世了&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//抽象方法</span></span><br><span class="line">        <span class="keyword">abstract</span> <span class="title function_">aRun</span>(): <span class="built_in">void</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Dog</span> extend <span class="title class_">Animal</span>&#123;</span><br><span class="line">        <span class="attr">age</span>:<span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">age:<span class="built_in">number</span>,name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">            <span class="variable language_">super</span>(name);<span class="comment">//new实例化子类时，name是在父类中初始化的，所以需要super()调一边父亲constructor来给name赋值</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实现了父亲的aRun方法</span></span><br><span class="line">        <span class="title function_">aRun</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">super</span>.<span class="title function_">initAnimal</span>();<span class="comment">//选择性调用父亲的行为</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;狗在跑&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p><code>interface</code><br>只能写没有被赋值的属性<br>只能写没有代码块的默认抽象方法<br>等待具体的实现类来<code>implements</code>实现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">    <span class="title function_">init</span>():<span class="built_in">void</span>;<span class="comment">//被繁殖</span></span><br><span class="line">    <span class="title function_">grow</span>():<span class="built_in">void</span>;<span class="comment">//生长发育</span></span><br><span class="line">    <span class="title function_">breed</span>():<span class="built_in">void</span>;<span class="comment">//繁殖</span></span><br><span class="line">    <span class="title function_">destroy</span>():<span class="built_in">void</span>;<span class="comment">//销毁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vscode和code-server</title>
      <link href="/2023/11/04/vscode%E5%92%8Ccode-server/"/>
      <url>/2023/11/04/vscode%E5%92%8Ccode-server/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>vscode 和 code-server 都是目前很流行的代码编辑器<br>首先我是个使用 idea 的 Java 后端开发，然后需要用 vscode 或 code-server 写文档或者 Web 前端的东西，那么可以通过这篇文章的配置减少学习成本，快捷键和使用习惯这方面的。<br>下面我将从应用场景来切入各种配置，这都适用于 vscode 和 code-server。</p><h2 id="Profiles-vscode-for-anything"><a href="#Profiles-vscode-for-anything" class="headerlink" title="Profiles (vscode for anything)"></a>Profiles (vscode for anything)</h2><p>目前，直接使用最新版的vscode，可以使用Profiles功能<br>可以先勾选使用默认 -&gt; 导出配置文件<br><img src="/img/vscode%E5%92%8Ccode-server/2024-08-08-23-02-34.png"><br>这样我们就获得了一份基于默认的Profile模板<br><img src="/img/vscode%E5%92%8Ccode-server/2024-08-08-23-05-51.png"><br>然后可以打开导出的文件，修改name的value，比如我上面修改name的value为henry5001.profile.notepad，然后导入配置文件即可，在使用时可以按需在vscode窗口里切换Profile</p><ul><li>带Idea快捷键的文本编辑器<br>嗯……，还是不够见名知意，又编辑配置文件修改了一下名字<br>henry5001.profile.notepad.ideaKeyMap<br>主要是sublime未激活，有新版本下载弹窗不舒服。<br><img src="/img/vscode%E5%92%8Ccode-server/2024-08-08-23-13-49.png"><br>不同的Profile可以使用不同的主题，那样在窗口切换的时候有鲜明的对比<br><img src="/img/vscode%E5%92%8Ccode-server/2024-08-08-23-18-29.png"></li></ul><h2 id="git-版本管理"><a href="#git-版本管理" class="headerlink" title="git 版本管理"></a>git 版本管理</h2><p>默认的 vscode &#x2F; code-server<br>没有基于版本的行级对比<br>没有提交树图像</p><ul><li>Git History<br>特别是版本行级对比，相当于 IDEA -&gt; git -&gt; show history for selection<br><img src="/img/vscode%E5%92%8Ccode-server/2024-07-09-00-20-42.png"></li><li>Git Graph<br><img src="/img/vscode%E5%92%8Ccode-server/2024-07-09-00-22-38.png"></li><li><del>GitLens</del><br>我可能暂时用不到，广告太多了</li><li>gitignore<br>这个暂时没需求</li></ul><h2 id="code-style-代码样式"><a href="#code-style-代码样式" class="headerlink" title="code style 代码样式"></a>code style 代码样式</h2><p>先安装下面几个插件然后再配置 User &#x2F; settings.json</p><ul><li>Prettier - Code formatter<br>格式美化代码</li><li>ESLint<br>静态扫描</li><li><del>Code Spell Checker</del><br>单词拼写检查</li><li><code>settings.json</code></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;source.fixAll.eslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;explicit&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;source.fixAll.markdownlint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;explicit&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;[typescript]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;source.fixAll.eslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;explicit&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;[javascript]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;source.fixAll.eslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;explicit&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;[html]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;[scss]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;[json]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;[jsonc]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;typescript.updateImportsOnFileMove.enabled&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;workbench.colorCustomizations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;[javascript][typescript]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;source.fixAll.eslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;explicit&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>安装 <strong>IntelliJ IDEA Keybindings</strong> 插件<br>减少人脑快捷键记忆和回忆的线程切换开销<br><img src="/img/vscode%E5%92%8Ccode-server/2023-11-04-14-56-17.png"></p><h2 id="编写文档-MD-markdown-和插入图片"><a href="#编写文档-MD-markdown-和插入图片" class="headerlink" title="编写文档 MD markdown 和插入图片"></a>编写文档 MD markdown 和插入图片</h2><h3 id="for-vscode"><a href="#for-vscode" class="headerlink" title="for vscode"></a>for vscode</h3><p>我大部分时候只是用来记录文字和图片</p><p>nodejs<br>hexo<br>cd hexo-workspace<br>hexo init<br>hexo new hello-world.md</p><p>hello-world.md 就是我要编辑的那份文档<br><img src="/img/vscode%E5%92%8Ccode-server/2023-11-04-15-11-32.png" alt="hexo目录结构"><br>可以看到上面图片中的 source 目录下有 _posts 和 img 这两个文件夹，通过 hexo new xxx.md 出来的所有的 md 文件都放在_posts 里，img 是我新建的文件夹</p><p>但是在编辑文档前我们要先安装 <strong>Markdown Preview Enhanced</strong> 插件，显示更好的预览效果<br>可以设置预览的背景色，显示图片，显示导航大纲<br><img src="/img/vscode%E5%92%8Ccode-server/2023-11-04-15-20-04.png"><br>虽然插件带有了图片插入的功能，但是插入图片设置在当前 MD 文章目录下的&#x2F;assets 文件夹内</p><p>但是这样的图片路径配置会在 hexo 编译成 html 时出现问题，图片不应该放在_posts 目录里</p><p>所以我引入了另外一个插件 <strong>Paste Image</strong><br><img src="/img/vscode%E5%92%8Ccode-server/2023-11-04-15-41-11.png"></p><p><img src="/img/vscode%E5%92%8Ccode-server/2023-11-04-15-56-39.png"><br>可以看到这样配置后，即可在把图片放在 img 内的如下路径，这样编译 html 时也是输出成这样的结构，看起来不会乱。</p><h3 id="for-code-server"><a href="#for-code-server" class="headerlink" title="for code-server"></a>for code-server</h3><p>Markdown Preview Enhanced 和 Paste Image 在 code-server 中是运行起来有问题的<br>我们只需要配置粘贴的图片路径即可<code>自带的插件Markdown</code>，复制图片到粘贴板，然后 CTRL+V 即可粘贴图片到文档中</p><p><code>Ctrl + ,</code> 打开设置界面<br>在设置的文本框中输入<code>markdown.copy</code></p><p>路径的配置参考下图或插件文档<br><img src="/img/vscode%E5%92%8Ccode-server/2023-11-04-17-24-13.png"><br><code>*.md</code><br><code>$&#123;documentWorkspaceFolder&#125;/img/$&#123;documentBaseName&#125;/$&#123;fileName&#125;</code></p><p>其实 vscode 也可以参考 code-server 的配置，但是这个官方插件配置目前粘贴生成的图片文件名我不是很满意，如果图片名称是中文将会被做 URL 编码处理再加入 MD 源码，想改修改某处的图片感觉很不放心，MD 源码的图片文件名是被编码后的，但文件夹显示的又是未编码的，在修改时总会犹豫一下。</p><h2 id="画图-drawio"><a href="#画图-drawio" class="headerlink" title="画图 drawio"></a>画图 drawio</h2><p>安装 <strong>Draw.io Integration</strong> 插件<br><img src="/img/vscode%E5%92%8Ccode-server/2023-11-04-15-24-26.png"><br>在画图完成后<br>将文件保存为为 filename.drawio.svg 的 svg 格式，既可以直接插入网页预览，又可以再次编辑</p><h2 id="Web-前端开发"><a href="#Web-前端开发" class="headerlink" title="Web 前端开发"></a>Web 前端开发</h2><p>老实说这部分在工作后接触很少，如果只是写简单的 html，用其他的 sublime + emmet 插件就已经很快了，<br>等我有空再更新这块吧</p><h2 id="code-server-额外配置-https"><a href="#code-server-额外配置-https" class="headerlink" title="code-server 额外配置 https"></a>code-server 额外配置 https</h2><p>访问其他主机的 code-server 最好是使用 https 协议，否则会因不安全的上下文导致部分插件停止工作，<br>尝试自签名证书实现 https 协议<br><code>cd /root/.config/code-server</code></p><p>生成 ca.key 和 ca.crt<br><code>openssl ecparam -genkey -name prime256v1 -out ca.key</code><br><code>openssl req -new -x509 -days 36500 -key ca.key -out ca.crt -subj &quot;/CN=localhost&quot;</code></p><p>配置 https<br><code>vim /root/.config/code-server/config.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置或添加如下配置</span></span><br><span class="line"><span class="attr">cert:</span> <span class="string">/root/.config/code-server/ca.crt</span></span><br><span class="line"><span class="attr">cert-key:</span> <span class="string">/root/.config/code-server/ca.key</span></span><br></pre></td></tr></table></figure><p>Edge 和 chrome 对自签名的已信任证书还是不信任，所以<code>客户端需要用Firefox浏览器访问code-server</code><br><img src="/img/vscode%E5%92%8Ccode-server/2023-11-04-16-11-26.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VR虚拟现实</title>
      <link href="/2023/09/17/VR%E8%99%9A%E6%8B%9F%E7%8E%B0%E5%AE%9E/"/>
      <url>/2023/09/17/VR%E8%99%9A%E6%8B%9F%E7%8E%B0%E5%AE%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="入坑原因"><a href="#入坑原因" class="headerlink" title="入坑原因"></a>入坑原因</h2><p>爱奇艺<br><code>奇遇VR Dream pro打卡全额返</code><br>logo 和名字与爱奇艺比就是一个模子里刻出来的<br>就连注册登录活动短信提醒都是用的爱奇艺那边提供的接口服务，后面打卡活动暴雷了，承诺的完成打卡全额返不再有，有限责任公司，爱奇艺也和这个子公司撇清关系全身而退，那钱到底去哪了呢？</p><p>大公司（信誉好，出事后甩锅子公司） -&gt; 子公司（背锅） -&gt; 网购平台（甩锅子公司）</p><p>这种模式就是无本万利的擦边的骚操作吗</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">从你付款的那一刻起，你就输了。</span><br><span class="line">———— 缅甸北部首席执行官</span><br></pre></td></tr></table></figure><h2 id="奇遇-vr-初体验"><a href="#奇遇-vr-初体验" class="headerlink" title="奇遇 vr 初体验"></a>奇遇 vr 初体验</h2><p>上面骂完，那就开始讲讲这个奇遇 vr 初恋的体验</p><h3 id="游戏-all-in-one-sports"><a href="#游戏-all-in-one-sports" class="headerlink" title="游戏 all in one sports"></a>游戏 all in one sports</h3><p>感觉机器内玩 all in one sports 这款游戏就够了<br>里面包含了：投篮，网球，羽毛球，桌球，乒乓球，射箭，飞镖，保龄球，拳击，棒球，高尔夫<br><code>其中我最喜欢玩 投篮，网球，桌球，乒乓球，拳击</code></p><ul><li>投篮<br>我在现实生活是不敢碰篮球的，因为小时候被篮球弄到一次伤得不轻，<br>如果你喜欢投篮的快感，那可以试一试</li><li>网球<br>运动量可大可小，会自动跟随球的移动，你基本上只需要挥拍击球</li><li>羽毛球<br>以为和网球类似，没想到羽毛球要更费劲，要更用力的挥拍，运动量比网球的大</li><li>桌球<br>这个我不好说</li><li>乒乓球<br>击球规则和网球羽毛球类似，桌面场地小，节奏比较快，比羽毛球运动量大些</li><li>拳击<br>这个运动量超大，基本上就是攻守兼备</li></ul><h3 id="串流-pc-端游戏"><a href="#串流-pc-端游戏" class="headerlink" title="串流 pc 端游戏"></a>串流 pc 端游戏</h3><p>串流 pc 端游戏，在头显中观看，vrchart，VR 女友……<br>主要是这玩意头显串流插着电都能掉电到关机，续航尿崩……</p><h3 id="观影"><a href="#观影" class="headerlink" title="观影"></a>观影</h3><p>画面的大小和位置也就是 app 打开后在立体空间上的位置，是可以任意调整的。</p><p>内置的播放器可以将画面调整为曲面屏，但只能观看本机存储和 SMB 协议的内容<br>可以安装 nplayer，VLA 播放来自 webdav 网盘的视频，但那样貌似就少了曲面屏的体验。</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>启动困难，头显手柄耳机三要素，还可能需要一定的空间；可我光是平时在手机连蓝牙耳机就够头疼的了</p><p>VR 还是和现实生活的力学反馈有点不同，玩久了怕影响现实生活，你能想象我只是用球拍接住了球就能把球打回去吗</p><p>续航尿崩，串流 pc 游戏都能掉电到关机，如果有直供电的当我没说……</p><p>vr 视频资源较少，可以看到想同时满足这些条件并不容易</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(video &amp;&amp; 4kHD &amp;&amp; 3d &amp;&amp; vr &amp;&amp; myType &amp;&amp; myContent)&#123;</span><br><span class="line">    用户真正想看的……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="省流，给我带来了什么好处"><a href="#省流，给我带来了什么好处" class="headerlink" title="省流，给我带来了什么好处"></a>省流，给我带来了什么好处</h4><ul><li>虚拟的大屏幕<br>当个 50 寸大屏幕视频播放器即可，不占现实的空间<br>建议拷好视频进去后离线播放视频，躺在床上看天花板上的曲面屏美滋滋<br>如果不支持文件或网盘协议就上第三方播放器 nplayer，VLC<br>50 寸大屏幕远程 pc 桌面，你是真的 pc 爱好者呀，建议弄远程 VNC 时服务器桌面分辨率设置 1366x768</li><li>室内运动<br>包含了一些有趣的运动量大的游戏</li></ul><h2 id="vr-头显盒子"><a href="#vr-头显盒子" class="headerlink" title="vr 头显盒子"></a>vr 头显盒子</h2><p>需要安装 ivry.apk</p><p>我的理解是：<br>手机 + ivry + 头显盒子 &#x3D; vr 头显</p><p>这似乎解决了头显垃圾配置续航尿崩的问题</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaEE平台技术</title>
      <link href="/2023/08/12/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/"/>
      <url>/2023/08/12/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaEE-的历史渊源"><a href="#JavaEE-的历史渊源" class="headerlink" title="JavaEE 的历史渊源"></a>JavaEE 的历史渊源</h2><p>JavaEE 和 Spring 的规范相互影响，相互发展……</p><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><h3 id="Web-基础"><a href="#Web-基础" class="headerlink" title="Web 基础"></a>Web 基础</h3><p>Http 协议，一次请求一次响应，一问一答，不问不答<br>Https 协议，对请求和响应的内容加密</p><p>任何协议都分有包头 Head 和正文 Body 的部分<br>Head<br>Body 中通常放的是 JSON 格式的内容<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-08-12-20-07-37.png" alt="通过Fiddler工具查看URL的Header"></p><p>Http 响应状态码</p><p>200&#x2F;201 完成<br>400 请求语法错误<br>401 请求未经授权，需要登录，但你没登录<br>403 已登录授权，但没有权限<br>404 URL 错误，找不到资源</p><p>500 开头的错误通常是服务器本身的问题<br>500 服务器崩了<br>503 服务器阻塞</p><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><p>Spring 中 Servlet Stack 的所有技术都是基于 Servlet 规范实现的</p><h4 id="Servlet-规范"><a href="#Servlet-规范" class="headerlink" title="Servlet 规范"></a>Servlet 规范</h4><p>最开始是用来做服务器的表现层，<br>把服务器分成了容器和组件两个部分，<code>Servlet容器</code>通常是 Tomcat 或者 Jetty，<code>Servlet组件(Servlet)</code>就是我们用 Java 写的代码</p><p>比如下图浏览器先请求到 Servlet 容器，容器再根据 Http Request 去运行指定的 Servlet，比如这里请求的是是访问数据库，再产生 Http Response 送回给浏览器。<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-08-12-20-37-54.png"></p><h4 id="如何实现-Servlet-规范"><a href="#如何实现-Servlet-规范" class="headerlink" title="如何实现 Servlet 规范"></a>如何实现 Servlet 规范</h4><p><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-08-12-21-00-56.png"><br>javax.servlet.Servlet 的<code>service(ServletRequest，ServletResponse)</code>这个 method 的参数是不包含 Http 的，Servlet 或许还可以在其他网络协议上实现，但事实是 30 年过去了，Servlet 也没有在其他网络协议上去实现。</p><p><code>javax.servlet.Servlet</code>包中的接口和基类，你去基础或者实现这些接口和基类，就是在它的规范下去写代码，那么你就是符合 Servlet 规范的。<br>只要我们写代码时遵循了 JavaEE 的规范，我们把代码放到任意一个符合 JavaEE 规范的容器中，都是可以跑起来的。</p><h3 id="Tomcat-并发原理"><a href="#Tomcat-并发原理" class="headerlink" title="Tomcat 并发原理"></a>Tomcat 并发原理</h3><p>作为服务端要短时间内响应来自客户端的多个请求，存在有不同的客户端会同时发过来很多的 HTTP 的 Request，在 Servlet 的容器中，针对每一个 HTTP 的 Request ，都会起一个线程去调 Serverlet 对象的 Service 的方法。<br>Servlet 对象是单例的，不要在 Servlet 对象中定义可修改的全局变量，这将带来线程安全问题。</p><p>线程是共享 Java 虚拟机的内存空间的，在 Java 虚拟机里头，不同的线程是有线程栈，不同的线程它的局域变量全是分开的，分别保存在自己的线程站里头，这里也会带来另外一个调优的问题，如果当线程很多的时候，线程栈的空间也会很大，所以你要适当调整线程栈的大小，才能容纳更多的线程<br>，不是说你简单的把线程调到一万，它就能够跑的，调到一万后线程栈不够了，它也跑不了。</p><h4 id="Tomcat-中这些线程的生命周期"><a href="#Tomcat-中这些线程的生命周期" class="headerlink" title="Tomcat 中这些线程的生命周期"></a>Tomcat 中这些线程的生命周期</h4><p><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-08-13-20-58-00.png"></p><ul><li>read<br>因为 Http 协议传输是不可靠的，总有 TCP&#x2F;IP 丢包重发或者别的意外，最后完整拼成完整的 Http request（包含 Head 和 Body），read 就是完整读完 Http request 的过程。</li><li>decode<br>把网络协议的 Http request 数据变成 Java 的 HttpServletRequest 对象</li><li>compute<br>拿到 HttpServletRequest 对象，创建 HttpServletResponse 对象，通过<code>我们的业务逻辑并产生结果</code></li><li>encode<br>将产生的结果，变成 Http Response 协议的数据</li><li>send<br>把 Http Response 协议的数据传回给客户端</li></ul><h4 id="Tomcat-性能调优"><a href="#Tomcat-性能调优" class="headerlink" title="Tomcat 性能调优"></a>Tomcat 性能调优</h4><p>在设计多线程软件时，实际上是没有办法无限制的增加线程的，<br>主机的内存和 CPU 是有限的<br>如果增加的线程数量太多，CPU 会时间片轮转时，把大量时间花在轮转上面，这并不是一个高效的软件设计</p><p>我们应该根据一台物理机器的实际状况，它有多少内存，它的 CPU 的计算能力，再结合我们任务的这样一个情况，去制定一个线程池。</p><p>线程池是什么呢,就是我们在上头最多允许你跑多少个线程,如果多于这个线程的话,那怎么办呢,那就让它去等待,如果在多于等待的时长呢,我就拒绝,这就是线程池的概念,有了这个线程池以后,我们实际上是预先创建了若干个线程,放到线程池里头,因为孵化线程是需要,消耗时间的,要用代码来消耗时间的,比如说内存中间开一些空间等等,所以我们把线程事先孵化出来,把它放到线程池里头,当请求过来的时候,我们是从线程池里头拉空闲的线程,拿出来,直接去用的,这样可以加快它的响应时间,而且可以管理,整个服务器上头,对于内存和 CPU 的消耗,不会出现说它的请求多了,它的内存不够,它的服务器崩溃的这样的一种情况,因为它用线程池卡住了它软件的上限。</p><h5 id="Servlet-Stack-所关心的参数"><a href="#Servlet-Stack-所关心的参数" class="headerlink" title="Servlet Stack 所关心的参数"></a>Servlet Stack 所关心的参数</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#默认值和解释如下</span><br><span class="line"></span><br><span class="line">#①最大工作线程数（上限由内存和CPU决定）</span><br><span class="line">server.tomcat.max-threads=200</span><br><span class="line">#③最大连接数（连接数=工作线程数+等待队列）</span><br><span class="line">server.tomcat.max-connections=10000</span><br><span class="line">#②等待队列长度（超过工作线程数后就进入这个等待队列）</span><br><span class="line">server.tomcat.accept-count=100</span><br><span class="line"></span><br><span class="line">#最小工作空闲线程数（线程池启动时有10个线程，超过10个就要孵化线程</span><br><span class="line">#假设工作线程达到上限200（最大工作线程数）但后面压力下来了，会把孵化的线程释放掉，释放内存空间，</span><br><span class="line">#少于10个请求它就一直保持10个线程在里头）</span><br><span class="line">server.tomcat.min-spare-threads=10</span><br><span class="line"></span><br><span class="line">#最多可以同时处理300个请求，200工作线程数，100等待队列长度</span><br><span class="line">#超过最多可以同时处理时就拒绝服务</span><br></pre></td></tr></table></figure><h5 id="I-x2F-O-密集型还是计算密集型"><a href="#I-x2F-O-密集型还是计算密集型" class="headerlink" title="I&#x2F;O 密集型还是计算密集型"></a>I&#x2F;O 密集型还是计算密集型</h5><ul><li>I&#x2F;O 密集型<br>在 read 和 send 的过程中花费较多的时间<br>I&#x2F;O 会占用内存开销，如果你内存足够大，你可以尽量多开线程，max-threads 可以开很高，对 CPU 压力不大，只要内存够你就尽量开到顶</li><li>计算密集型<br>在 compute 的过程中花费较多的时间<br>计算会占用 CPU 资源，如果 CPU 算的过来，可以慢慢加 max-threads<br>如果算不过来，升级 CPU，再加 max-threads</li></ul><table><thead><tr><th>指标\工作模式 3 选 1</th><th>BIO</th><th><strong><code>NIO</code></strong></th><th>APR</th></tr></thead><tbody><tr><td>-</td><td>阻塞 IO</td><td>异步 IO</td><td>异步 IO</td></tr><tr><td><strong>实现方式</strong></td><td>Java</td><td>Java</td><td>原生库</td></tr><tr><td><strong>I&#x2F;O 速度</strong></td><td>会慢</td><td>快</td><td>更快</td></tr><tr><td><strong>实现难度</strong></td><td>简单</td><td>普通</td><td>困难</td></tr></tbody></table><ul><li>BIO<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-08-13-16-33-46.png"><br>在 BIO 中，线程有部分时间被消耗在 read 和 send 的过程，占用线程资源不能及时释放<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-08-13-16-37-45.png"></li><li>NIO<br>Tomcat 的 8 版本之后默认是使用 NIO<br>在 NIO 中，read 和 send 的过程被交给 NioChannel 排队处理，由一个独立的线程 Poller 来处理，在做 decode 和 encode 的时候只需要根据排队的轮询结果，直接去 buffer 队列取即可。<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-08-13-16-52-52.png"><br>避免了每个线程在 read 和 send 过程中的 I&#x2F;O 阻塞，因为线程池中的线程不再去做 read 和 send。<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-08-13-16-47-36.png"></li><li>APR<br>Java 字节码的运行效率是低于原生库的，APR 是利用的 Apache 的 Http 原生库来实现的异步 IO，这意味着你要额外先安装 Apache 的原生库，再装 Tomcat 才能跑出 APR 模式</li></ul><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><p>Maven 可以管理 jar 包，还可以用来编译代码，执行代码，打包、部署、测试……<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-08-13-21-40-14.png"><br><code>~/.m2/repository</code>我们的 jar 包默认会下载到这个位置<br>一般会将默认的远程中央仓库地址修改为国内阿里云镜像仓库，简单粗暴的方法是把.m2 删掉</p><p>Maven 的使用划分为三个点，生命周期、阶段、插件以及插件的目标</p><h4 id="Maven-的生命周期"><a href="#Maven-的生命周期" class="headerlink" title="Maven 的生命周期"></a>Maven 的生命周期</h4><p>Maven 的生命周期有三点 clean、default、site，它们没有执行的先后顺序要求，但是生命周期内部的每个阶段是按顺序执行的</p><ul><li>clean<br>项目构建前的清理工作<br>删除原先编译打包的 class 和 jar 文件<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-08-13-22-12-54.png"></li><li>default<br>可以编译、测试、打包、安装部署到远程 maven 仓库……<br>按阶段的顺序执行，如果某一阶段出错就中断，后面的阶段不会再运行了<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-08-13-22-14-18.png"></li><li>site<br>生成项目的测试报告<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-08-13-22-16-48.png"></li></ul><h4 id="Maven-插件"><a href="#Maven-插件" class="headerlink" title="Maven 插件"></a>Maven 插件</h4><p>上面简单列举了生命周期和内部的 phase 阶段，每个 phase 阶段干什么，是由插件决定的，可以是官方的，也可以是第三方的，只要把插件绑定到对应的 phase 上即可</p><p>往往一个插件是可以干很多事情的，goal 插件目标<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-08-13-22-30-12.png"></p><p>每一个 phase 阶段默认就已经与内置插件的 goal 插件目标绑定了<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-08-13-22-36-01.png"><br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-08-13-22-36-36.png"></p><h4 id="Maven-父子继承关系"><a href="#Maven-父子继承关系" class="headerlink" title="Maven 父子继承关系"></a>Maven 父子继承关系</h4><p>比如这里有 my-app 和 my-webapp 两个子模块<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-08-13-23-02-49.png"><br>使用 show effective pom 可以看到最终在子模块生效的 pom 是什么<br>父 pom 还能管理所有子 pom 的 version</p><h4 id="Maven-项目跑起来"><a href="#Maven-项目跑起来" class="headerlink" title="Maven 项目跑起来"></a>Maven 项目跑起来</h4><p>除了传统的通过 idea 中 Run&#x2F;Debug Configurations 添加 Tomcat，然后通过 idea 编译、打包到 Tomcat 运行，还可以通过 maven 的 plugin 插件，tomcat 插件，在 plugins 运行，由 maven 编译、打包到 maven 中的 tomcat 插件中运行。</p><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>我们希望我们的软件模块是可以弹性部署的。可以根据实际负载情况，增加或减少部署。<br>而且对于软件来说，软件的运行环境是有意义的。</p><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h3 id="软件模块化"><a href="#软件模块化" class="headerlink" title="软件模块化"></a>软件模块化</h3><p>除了单纯的按功能划分（商品，用户模块……）还可以分层划分<br>比如我们分为两层，当然还需要加入控制器层 Api 在中间进行转换</p><ul><li>视图层(面向功能)</li><li>模型层(面向对象)<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-08-13-12-24-09.png"></li></ul><p>目前主流的在 SpringWeb 应用中的划分<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-08-13-12-08-32.png"><br><code>部署的时候尽量拆分成下面这样子几台主机， 方便后续的更新维护，做性能监控，性能调优 提高系统的整体性能</code><br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-08-13-13-04-49.png"></p><h3 id="控制反转"><a href="#控制反转" class="headerlink" title="控制反转"></a>控制反转</h3><p>我们在学编程时说的 Spring 大部分时候指的是，最一开始就存在的核心的部分，就是我们所说的 IOC 和 AOP 的部分<br>可以看到在 Spring5.0 中，其实你可以看到，其他的框架基本上全部都变了，被分成了两半，一半是 Reactive Stack，一半是 Servlet Stack，但是它的核心框架，就是我们所说的 IOC 和 AOP 这一块还有最外层的 SpringBoot 的部分在这两个栈上头还是一样的。<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-08-14-23-27-56.png" alt="Spring5.0"></p><p>在对象中创建对象，比如在对象 A 中创建对象 B，这说明对象 A 和对象 B 存在耦合</p><ul><li>构造函数</li><li>set 方法</li></ul><h3 id="SpringBean-对象"><a href="#SpringBean-对象" class="headerlink" title="SpringBean 对象"></a>SpringBean 对象</h3><p>SpringBean 对象的生命周期</p><ul><li><code>Singleton</code><br>像之前写的 Servlet 那样是单例的……只此唯一这一个对象</li><li>Prototype<br>每次使用都会生成新的对象，内存一下就爆了</li><li>Request<br>每次 Http 请求都会生成新的对象<br>高并发下，内存一下就爆了</li><li>Session<br>每个 Session 都会生成新的对象<br>客户端多时，服务器内存一下就爆了</li><li>Application<br>在 ServletContext 范围内生成唯一的 Bean 对象<br>但是现在已经极少在 servlet 情况下写代码了，所以我们只用第一种 Singleton</li></ul><h4 id="实现-SpringBean-对象"><a href="#实现-SpringBean-对象" class="headerlink" title="实现 SpringBean 对象"></a>实现 SpringBean 对象</h4><ul><li>方法一：注解实现 SpringBean 对象<br>@Component<br>@Service<br>@Controller<br>@Repository<br>这四个注解功能都是一样的，用于创建 bean 实例。下面只给出<code>@Component</code>的例子</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(&quot;Singletion&quot;)</span> <span class="comment">//默认是Singletion，所以可以不写Scope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Toyota</span> <span class="keyword">implements</span> <span class="title class_">Car</span>&#123;</span><br><span class="line">    <span class="comment">//Bean.type=Toyota</span></span><br><span class="line">    <span class="comment">//Bean.name=toyota</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法二：代码实现 SpringBean 对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Scope(&quot;Singletion&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">haval</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Haval</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Bean.type=Car</span></span><br><span class="line">    <span class="comment">//Bean.name=haval</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法三：<del>XML</del></li></ul><h3 id="Spring-容器"><a href="#Spring-容器" class="headerlink" title="Spring 容器"></a>Spring 容器</h3><p>Spring 容器有一个 ApplicationContext，它是 BeanFactory 的子类，所以我问它就可以知道容器里头一切的事情，我也可以通过它去操作容器本身没做的事情，比如说我想让它去 Load 一个什么东西，都可以通过这个 ApplicationContext 去完成的，当然我们基本上来说都是让容器干这些活，我们自己很少有需求去这么做。</p><h4 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h4><p>Spring 容器提供了一个@Autowrite 注解，去把对象和对象之间的耦合关联起来，@Autowrite 是用来绑依赖注入的<br>依赖注入只能通过两种方式注入，一种是通过 constructor 函数，一种是通过 set 函数。所以@Autowrite 一般来说都是用在构造函数的前面和 set 方法的前面。</p><ul><li>注解建 SpringBean 时<code>构造函数依赖注入</code><br>对于方法的参数，直接从容器中间去找 Bean 对象再注入进去，如果找不到就是空值。<br>Car 是一个父类，Toyota 是继承 Car 的，Haval 也是继承 Car 的，现在构造函数的参数类型写的是 Car，它在容器中去找的话会找到两个实例符合这个类型，一个是 toyota，另一个是 haval，查询结果不止一个，那@Autowrite 绑的是哪个呢？绑的是跟变量名相同的名称的那个，也就是 toyota。<br>所以我们的 toyota 的变量名不是随便写的，它是用变量名去对那个对象名称。<br><code>Toyota toyota -&gt; Car toyota</code>还涉及了多态类型转换</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Boss_constructor</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Car car;</span><br><span class="line">    <span class="keyword">private</span> Office office;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowrite</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Boss_constructor</span><span class="params">(Car toyota, Office office)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.car = toyota;</span><br><span class="line">        <span class="built_in">this</span>.office=office;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码建 SpringBean 时<code>构造函数依赖注入</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Autowrite</span></span><br><span class="line"><span class="keyword">public</span> Boss <span class="title function_">boss</span><span class="params">(Toyota car, Office office)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Boss</span>(car, office);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>set函数依赖注入</code><br>set 函数依赖注入主要是解决了循环依赖的问题<br>set 是在构造之后的，先把 ABC 分别构造出来，再分别设 ABC 的 set 函数，因为不构造就设 set 函数会 null.set 导致 NullPointException<br>我们在如何情况下，都应该极力避免对象之间循环依赖，如果非要用那只能在 set 注入的基础上添加@Lazy，@Lazy 的方式其实是延迟加载。</li></ul><p>依赖注入标准化规范，早期在类的属性上直接@Autowrite 是错误的，依赖注入只应该从构造函数和 set 函数进来，而不应该从类的属性上进来，从属性上进来就会违背了对象的封装性。</p><h4 id="SpringBean-在容器中的生命周期"><a href="#SpringBean-在容器中的生命周期" class="headerlink" title="SpringBean 在容器中的生命周期"></a>SpringBean 在容器中的生命周期</h4><p><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-08-19-05-16-30.png"></p><h5 id="容器级生命周期接口"><a href="#容器级生命周期接口" class="headerlink" title="容器级生命周期接口"></a>容器级生命周期接口</h5><p>容器级生命周期接口就是你把个接口去实现后，<code>对所有的Bean都有效，一般很少使用</code>，因为我们在容器中是有很多个 Bean 对象的。</p><h5 id="Bean-级生命周期接口"><a href="#Bean-级生命周期接口" class="headerlink" title="Bean 级生命周期接口"></a>Bean 级生命周期接口</h5><p>只影响一个 Bean 的接口</p><h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><ul><li><p>改变了运维部署方式<br>没有 SpringBoot 之前，我们通常是把基于 Spring 的 JavaEE 应用打成一个 war 包，然后在物理机上装一个 tomcat 把这个 war 包部署上去。<br>在 SpringBoot 中，内嵌 Tomcat，全部打成一个 jar 包，直接 java -jar 就可以跑起来，这样一来 SpringBoot 配上 Docker 更是珠联璧合</p></li><li><p>Jar 包的统一版本管理和配置信息<br>我们写程序通常会引入 jar 包，这些 jar 包来自不同的组织或个人，尽管 maven 的 dependency 可以帮我们从 remote repository 取 jar 包，当 jar 包很多时，dependence 还是不少的，而且还会面临 jar 包的版本问题。<br>SpringBoot 把我们可能用到的那些 jar 包，根据常用的应用场景，包成一个个的 Starter。<br>Web 开发，有 Starter；测试，有 Starter。<br>并且 SpringBoot 帮我们做了 jar 包的版本管理和默认配置，所以我们通常只需要引入对应的 Starter 即可，Starter 中的版本号跟随 pom 中<code>&lt;parent&gt;</code>的版本号，如果需要自定义配置就去编辑 application.yaml，或者老的 properties。<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-08-19-18-19-41.png"><br>除了 application 配置文件以外，还有 JVM 参数，操作系统环境变量，java 命令行启动项，都能影响 Spring 环境，进而影响 SpringBean 对象<br>通过使用@Value 注解，把那些 Spring 环境，注入到 Bean 对象的属性中去<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-08-19-20-11-40.png"></p></li><li><p>运维监控<br>SpringBoot 跑出来的应用，其实都有监控，通过 restfulApi 返回 JSON 格式的监控数据<br>我们会用第三方的工具（如 Nacos）去读监控的信息，以图表的方式显示出来</p></li><li><p>对 SpringBean 的扫描<br>对 SpringBean 的扫描可以使用 scanBasePackages</p></li><li><p>@Value 注入<br>把配置信息注入到 Bean 对象的属性</p></li></ul><h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><p>通过注解使得 Java 的类变成控制器，这个控制器不需要实现任何接口，是一个 POJO<br>DispatchServlet 是 SpringMVC 已经做好的 Servlet 对象，会存在于 Servlet 容器中间，所有客户端发过来的请求都首先通过 DispatchServlet，然后分发给控制器，处理 HTTP response 返回给前端<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-08-19-23-44-51.png"></p><h3 id="restfulApi"><a href="#restfulApi" class="headerlink" title="restfulApi"></a>restfulApi</h3><p>restfulApi 使用 JSON 来进行数据交互，JSON 是完全独立于编程语言的一种格式，JSON 是便于人类理解和机器解析生成的</p><p>SpringMVC 是可以支持 restfulApi 的，在前后端分离的情况下，如果 Controller 只负责返回 JSON 数据的话，SpringMVC 就变成这样子<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-08-19-23-49-47.png"></p><h3 id="合法性检查-validation"><a href="#合法性检查-validation" class="headerlink" title="合法性检查 validation"></a>合法性检查 validation</h3><p><code>javax.validation</code></p><h3 id="跨域访问"><a href="#跨域访问" class="headerlink" title="跨域访问"></a>跨域访问</h3><h2 id="Mysql-原理"><a href="#Mysql-原理" class="headerlink" title="Mysql 原理"></a>Mysql 原理</h2><p>从原理了解 MySQL 在高负载，大并发场景下的性能瓶颈在何处</p><h3 id="InnoDB-存储"><a href="#InnoDB-存储" class="headerlink" title="InnoDB 存储"></a>InnoDB 存储</h3><p>在说 Mysql 存储结构的时候，其实 Mysql 是把它分成两部分的，一部分是物理存储(存储在操作系统的文件系统上)，另一部分是逻辑存储。我们来讲讲逻辑结构。<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-11-18-13-13-32.png"><br>Mysql 数据库最基本的逻辑结构就是数据表 TABLE，所有数据都在 TABLE 中，称为 Tablespace，我们存储的数据实际上是存在了 Tablespace 里面的三个段里头，我们可以看到三个 Segment</p><p>每一个 Segment 里面是有若干个 Extent 的，存储数据时扩增的基本单位是 Extent</p><p>一个 Extent 是 1M 兆，一个 page 是 16k，所以默认情况下一个 Extent 里面有 64 个 Page，当然你也可以去改 page 的 size 变成 16±n k。</p><ul><li>Leaf node segment<br>存储我们常用的数据表的记录</li><li>Non-Leaf node segment<br>存储索引（主索引，从索引）</li><li>Rollback segment<br>存储事务的回滚的数据，它要维持不同的事务有一个独立的视图，记录了事务过程中的所有的过程，才能做到需要时回滚事务</li></ul><p>在最初设计时其实是以 page 为单位的，当数据表的数据非常少小于 1M 兆的时候，Segment 里面是没有 Extent 的，只有 30 个 page，30 个 page 填满总共 1M 兆后才会生成一个 Extent</p><p>以 page 为单位是为了遵循传统的磁盘结构，传统的机械硬盘内是一个圆形的磁碟结构，它会有磁臂，它会有磁道一圈一圈的，你要用 Mysql 去读一条记录时磁臂要像秒针那样转动到相应的位置，再把磁臂所指的那块位置读到内存中，Mysql 就是直接把磁臂所指的那块位置默认是 16k 也就是 1 个 page 读到内存中，再从内存中查找记录，即使你要查的数据是小于 16k 的也是这么工作的。</p><p>但是我们一般不会去改这个 size（固态硬盘没有寻道时间就可以把 page 设置成很小）</p><h4 id="page-页"><a href="#page-页" class="headerlink" title="page 页"></a>page 页</h4><p>主键是非空且唯一的，但是这些主键插入的顺序与主键的大小是无关的，简单来说就是它们可以是非自增的（r1,r3,r2）</p><p>Mysql 使用了单向链表来维持主键从小到大排序的顺序结构</p><h5 id="page-directory-页目录"><a href="#page-directory-页目录" class="headerlink" title="page directory 页目录"></a>page directory 页目录</h5><p>page directory 记录了主键值从小到大排序的顺序结构<br>[主键值 1，主键 1 在 page 中的地址；主键值 2，主键 2 在 page 中的地址] （如下图所示）<br>Mysql 把 page 读到内存后，就可以拿到 page directory，然后通过二分法来查找这些从小到大排序的主键值<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-11-18-14-05-26.png"><br>我们不能说为了提高二分计算的速度就盲目地把 page 的 size 设置的很小，page 存的记录就很少，比如让一个 page directory 只存一个主键（一个 page 只存一个 row），那样每次从硬盘读到内存的记录就很少，那样可能就要多次去磁盘寻道读数据到内存中，而且如果是机械硬盘的话就可能就会增加磁盘的寻道时间（固态硬盘没有寻道时间）</p><p>删除的空间如何重用<br>重用的问题会有碎片化</p><h3 id="InnoDB-索引"><a href="#InnoDB-索引" class="headerlink" title="InnoDB 索引"></a>InnoDB 索引</h3><h4 id="B-树索引"><a href="#B-树索引" class="headerlink" title="B+树索引"></a>B+树索引</h4><p>在逻辑上，每个 page 又会存在双向链表，便于合并和拆分<br>在此基础上还有一个 B+树索引</p><p>当插入或删除数据时，可能会引起 B+树索引的合并和拆分，page 的合并和拆分</p><p>B+树的主键索引，从磁盘找到最终这个叶子节点就是值得我们所说的 page，把 page Load 到内存里头，再通过 page directory 的二分法去找到那条记录</p><ul><li>主键索引怎么用</li><li><ul><li>主键自增插入可以避免拆分效率高</li></ul></li><li><ul><li>我们在系统运行时从不删数据，我们所有的数据都只标注逻辑删除而不是物理删除</li></ul></li><li><ul><li>当然总有一天因为数据太多要删除掉，那就必须挑个好日子对系统停机维护，把标注逻辑删除的数据都移到别的地方去，或者把该删的东西删掉，这样就能减少索引链表因为合并和拆分给系统运行时带来的负面效果</li></ul></li></ul><h4 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h4><p>先去哈希索引找有没有这个主键在哈希索引里头，不在就说明内存中的 page 没有这条记录，然后就去做 B+树索引</p><h4 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h4><p>前面介绍的 B+树索引和哈希索引都是在主键索引的基础上讲的，其实它们在辅助索引中也有生效。</p><h4 id="辅助索引"><a href="#辅助索引" class="headerlink" title="辅助索引"></a>辅助索引</h4><p>前面介绍的 B+树索引和哈希索引都是在主键索引的基础上讲的，其实它们在辅助索引中也有生效。</p><ul><li>辅助索引比主键索引慢<br>辅助索引为什么比主键索引慢？因为它有两次查询过程，一次是在辅助索引的这条树上去找到它的主键 ID，然后再到主键索引去找才能找到数据。</li><li>辅助索引缺点不可避免<br>其实辅助索引具有主键索引所有的缺点，而且还不能避免插入数据时造成的拆分问题，因为不能做自增。</li><li>辅助索引应该怎么用</li><li><ul><li>插入的缺点没办法避免，删除的缺点可以参考 B+树，挑个好日子再停机删除。</li></ul></li><li><ul><li>尽量减少辅助索引的个数，可能仅仅只在外键上去做辅助索引。</li></ul></li><li><ul><li>比如在电子商城系统中，要查商品的名称是什么，但是我们不能建辅助索引，把所有的商品名称全部抽到一个全文的搜索引擎里头去，不要用关系数据库去做这样的一个事情。</li></ul></li><li><ul><li>还有些要拿系统的数据来做统计，只能把数据抽到数据仓库中去，我这系统不做这个辅助索引，我全部抽到数据仓库里去做。</li></ul></li></ul><h3 id="InnoDB-的事务"><a href="#InnoDB-的事务" class="headerlink" title="InnoDB 的事务"></a>InnoDB 的事务</h3><p>前面聊的存储和索引是有关大负载的，下面聊的主要是跟高并发有关，大负载是很多的用户来访问，但是它不是访问的同一条数据，高并发就是有很多的用户同时来访问同一条的数据，同样要去改它，大负载能扛过去不见得高并发也能扛过去。</p><p>高并发的问题如果在关系数据库上头我们会用事务来保证并发结果在逻辑上是正确的<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-11-18-17-16-31.png"><br>Mysql 数据库默认的事务隔离级别是 REPEATABLE READ，要实现 REPEATABLE READ 最简单的方式就是加锁，Mysql 其实实现了两种锁，共享锁和排他锁，其实就是读锁和写锁<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-11-18-16-48-52.png"><br>你在读的时候加一个共享锁，其他人在读的时候都去加共享锁，没问题，这是兼容的<br>你在写的时候加一个排他锁，加了排他锁以后所有的锁都不能加了，所以别人读也不能读，写也不能写，要等你干完活释放锁了才能去读、才能去写</p><p>Mysql 的 REPEATABLE READ 应该结合另一篇数据库事务的文章[软件设计师王勇 2021 版观看笔记_数据库并发控制](####加锁_解决并发问题)</p><h3 id="Mysql-的-MVCC"><a href="#Mysql-的-MVCC" class="headerlink" title="Mysql 的 MVCC"></a>Mysql 的 MVCC</h3><p>MVCC 其实并没有对那条记录读的时候加共享锁，而是在读的那一刻做了一个快照，所以别人可以任意去改</p><p>如果你默认依赖 Mysql 的 MVCC 去实现库存的扣减的话，其实是有问题的，我们是不能那么做的</p><p>正确的做法应该是使用 redis，结合带事务的消息队列中间件 MQ，把库存量依次写回数据库</p><h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><p><code>MyBatis是用来做面向对象和面向关系的映射的。</code>它的起源是因为我们在后端系统的代码逻辑是面向对象的，这些对象一般在使用时会 Load 到内存中，但是对象多起来的时候无法将所有对象都 Load 到内存里头建立关联关系，所以需要存到外存上去，对某些数据来说最成熟的存储方式就是关系型数据库。</p><p>OR Mapping 这类工具所做的，就是对象模型和关系模型之间的映射，我们的数据是在关系数据库里的，但是我们程序跑起来的时候，并不是用的关系数据库里的数据，我们要用的是对象，所以这样一个模型会负责把我们要用的对象从数据库里捞出来，变成对象供我们程序使用，我们用完这些对象以后，比如我们改动了对象的值，需要把它存回数据库里去，不仅仅存对象的值，还要同时更改对象关联关系所涉及的值。</p><p>市面上主要存在两种 ORM 工具，一种是全自动的，一种是半自动的。</p><h3 id="对比-Mybatis-和-Hibernate"><a href="#对比-Mybatis-和-Hibernate" class="headerlink" title="对比 Mybatis 和 Hibernate"></a>对比 Mybatis 和 Hibernate</h3><p>Mybatis 是半自动框架，Mybatis 更灵活<br>Hibernate 全自动框架，一个对象对应一个类对应一张表。<br>当系统在 ORM 碰到木桶短板效应时，Hibernate 做手动优化比较麻烦。</p><h3 id="对象关系模型映射"><a href="#对象关系模型映射" class="headerlink" title="对象关系模型映射"></a>对象关系模型映射</h3><p>对象模型和关系模型之所以能映射，是因为他们存在一定的相似性。<br>对象模型：对象：属性，方法，关系，N&#x2F;A<br>关系模型： 表：字段，N&#x2F;A，关系，字段</p><p>面向对象的类可以派生出很多对象，类中定义的属性在不同对象上面的值可以是不一样的，<br>面向关系的表可以存很多记录，表中的字段在不同记录上可以是不同的值。</p><p>所以你会发现这样天然的对应关系<br>表 ⇄ 类，记录 ⇄ 对象，字段 ⇄ 属性</p><h4 id="对象的-ID-属性即数据库主键字段"><a href="#对象的-ID-属性即数据库主键字段" class="headerlink" title="对象的 ID 属性即数据库主键字段"></a>对象的 ID 属性即数据库主键字段</h4><p>ORM 所解决的问题是，我们无法把所有的对象全部放到内存里头，如果所有对象都放到内存里头，标识一个对象的唯一标记是对象地址，在面向对象中你去比两个对象它相不相等，不是比两个对象的属性想不想等，比的是它在内存中的地址是不是相等，但是我们没法把所有对象都放到内存里头，内存会爆，我们怎么判断一个对象和另外一个对象是相等的呢，特别是我们要判断这个对象和数据库里的某个对象是否对应，就是个对象和数据库里的某条记录是否对应，我们依赖的是我们指定的一个属性，这个属性我们通常叫做 ID，这个 ID 在数据库里通常就是主键，在类里头通常是一个长整型的属性，我们用这个属性去标识在面向对象模型中一个对象和数据库里的一个对象一条记录的对应关系。</p><p>所以 ID 这个属性就是用来唯一标识这些对象的，比较两个对象是不是一样的，不再是比较它们在内存地址里是不是一样的，而是比较它们的属性 ID 是不是一样的，如果属性 ID 是一样的，那我们就认为这两个对象是一样的，如果这个对象存在数据库里，就在数据库里找字段名是 ID 的这条记录应该保持一致。</p><p><code>用对象属性ID在数据库里作为主键来保持它们两者的映射关系</code></p><table><thead><tr><th>面向对象模型</th><th>面向关系模型</th></tr></thead><tbody><tr><td>类</td><td>表</td></tr><tr><td>对象</td><td>记录</td></tr><tr><td>属性</td><td>字段</td></tr><tr><td>对象属性 ID</td><td>主键</td></tr><tr><td><code>关联关系</code></td><td>外键</td></tr><tr><td><code>继承关系</code></td><td>不支持</td></tr><tr><td>方法</td><td>不支持</td></tr></tbody></table><h4 id="关联关系-和-继承关系"><a href="#关联关系-和-继承关系" class="headerlink" title="关联关系 和 继承关系"></a>关联关系 和 继承关系</h4><p>面向对象模型最厉害的地方是对象的关联关系和继承关系，如果你单纯就是类、属性、方法的话，是玩不出一些优秀的操作的。</p><h5 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h5><p>用外键可以天然的表示<br>数据库两条记录之间的关系可以用外键去表述，两个对象之间的关联关系，无论是一对一的、一对多的、多对一的、多对多的，都可以在数据库中去用外键去表示出来。</p><ul><li>一对一的关联关系<br>一般地先有订单，才有快递单，所以用户在使用时总是先去找订单，那我们可以这样设计在查订单表的同时包括一个快递单外键，再通过快递单外键关联到快递单的表，实现在快递单中做一次主键查询。<br>实际上 订单到快递单 和 快递单到订单 都是一对一的，是双向的一对一。<br>但是因为从快递单到订单是非主键查询，效率较低，不推荐这样子设计。<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-09-09-15-54-01.png"></li><li>一对多 &#x2F; 多对一的关联关系<br>可以加一张中间表，也可以不加中间表，<br>不过还是第一种没有中间表的查询在一对多和多对一的情况下，就无论哪个方向上的查询速度都是最快的<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-09-09-17-36-02.png"></li><li>多对多的关联关系<br>多对多就必须要用中间表，<br>比如下面这里学生表和课程表就是多对多的<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-09-09-17-32-18.png"></li></ul><h5 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h5><p><code>继承父类的属性和行为，然后会在继承的基础上有多态。</code><br>行为也就是 method，一般定义在 Java 代码中，所以我们这里只讨论属性和多态</p><p><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-08-29-22-48-14.png"><br><code>首先我们来说说数据库在处理继承关系时属性怎么处理，两种处理方式。</code></p><ul><li>处理方式一：用数据库里的一张表<br>把上面继承关系图中所有的属性，都放在这张表中，作为表的字段，并且新增两个字段：对象的 ID，和对象的类型 desc</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> obj(</span><br><span class="line">    id,<span class="keyword">desc</span>,</span><br><span class="line">    numPassengers,numWheels,make,model,</span><br><span class="line">    acceleratorType,boringFactor,coolFactor);</span><br></pre></td></tr></table></figure><p>如果对象不包含该属性，则在表中填充 NULL<br>比如我们可以看到第一条记录中 COUPE 类型的对象中存在为 0 的属性 BORINGFACTOR，但是其他类型的对象则不存在 BORINGFACTOR 属性，所以在该属性填充了 NULL<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-08-29-22-57-57.png" alt="表的大部分字段如图所示"><br>在编程时，假如我们需要从数据库实例化一个 Car 对象，我们可以先把这一条记录先从数据库全部查出来，然后丢弃掉那些不属于 Car 对象的属性，用 Java 的反射机制去根据 DISC 字段判断实例化成 Car 对象。</p><p><code>多态</code><br>我们可以在 RoadVehicle 定义一个还没有实现的方法，在 Motorcycle, Coupe, Roadster 三个叶子结点去做实现。</p><p>在写代码时，先把查出来的这些叶子结点类型的对象放到一个 RoadVehicle 类型的集合里。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">List&lt;RoadVehicle&gt; dynamicList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>()&lt;???&gt;;</span><br><span class="line"><span class="comment">//get(0)可以获取到叶子结点的多种类型，todoImpl是在叶子结点中不同@Override方法的具体实现</span></span><br><span class="line">dynamicList.get(<span class="number">0</span>).todoImpl();</span><br></pre></td></tr></table></figure><ul><li>处理方式二：用数据库里的多张表<br>查数据库的时候要把多张表联起来<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-09-09-15-24-10.png"></li></ul><h2 id="Spring-的-AOP"><a href="#Spring-的-AOP" class="headerlink" title="Spring 的 AOP"></a>Spring 的 AOP</h2><h3 id="AOP-解决了什么问题"><a href="#AOP-解决了什么问题" class="headerlink" title="AOP 解决了什么问题"></a>AOP 解决了什么问题</h3><p>后端可能会在 Controller 层 set 一些返回状态码<br>比如下面这个 Controller 里的<code>retObj = setStatus(null,e);</code><br>但是如果你有很多个 Controller 呢……？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">userLogin</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;retObj=……&#125;</span><br><span class="line">    <span class="keyword">catch</span>&#123;</span><br><span class="line">        retObj = setStatus(<span class="literal">null</span>,e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> retObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">queryGoods</span><span class="params">(<span class="meta">@RequestBody</span> Goods goods)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;retObj=……&#125;</span><br><span class="line">    <span class="keyword">catch</span>&#123;</span><br><span class="line">        retObj = setStatus(<span class="literal">null</span>,e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> retObj;</span><br><span class="line">&#125;</span><br><span class="line">……</span><br></pre></td></tr></table></figure><h3 id="AOP-是什么"><a href="#AOP-是什么" class="headerlink" title="AOP 是什么"></a>AOP 是什么</h3><p><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-09-12-23-13-13.png"><br>当然，也可以用于单个 Controller<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-09-12-23-14-51.png"><br>只需要找到 Join Point，定义 Advice 在何时插入。</p><p>Spring AOP 在编译或执行的时候插入进去的，在 Spring 框架中主要是在运行的时候加进去的，因为我们不想引入新的编程语言，你如果想在编译时加进去意味着你要加入一种新的编程语言，确实有叫做 AspectJ，但是我们不想引入新的编程语言，所以我们采用了在运行的时候加进去的方式。</p><p>为什么 Spring 框架能在运行的时候把这些东西加进去呢，这是有前提的，只能在调 Spring Bean 对象的方法的之前和之后，你可以插入一些东西。</p><p>为什么我们可以在 Spring 框架运行的时候，插入一些东西呢，因为 Spring 在实例化 Bean 对象的时候是夹带了私货的，它不会把这个对象简单的实例化出来给你，而是在外面又包了一层东西，我们通常说它给你的是一个代理对象，而不是一个真正的对象，这用到了设计模式中说到的代理模式，也会用到 GRASP 模式中的多态和间接的原则。</p><p>因为它是由 Spring 框架来完成的，只能在运行的时候来做切入插入，所以它只能在执行的前后去切进来，大家在用的时候根据这点来分析就好了，你就能知道哪些问题是可以通过 Spring AOP 去解决的。</p><h3 id="point-cut"><a href="#point-cut" class="headerlink" title="point cut"></a>point cut</h3><p><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-09-19-23-04-23.png"><br>常用的是第三个和第四个，execution 和 annotation</p><ul><li>execution<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-09-19-23-10-48.png"><br>……goodsdemo.controller 包下面任意子包的任意一个类的任意一个方法任意一个参数，都对得上，都是我们会要切上去的点<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-09-19-23-12-40.png"><br><code>within</code>只在 concert 包里才切入</li><li>annotation<br>我要切的地方打个注解打个标签，凡是用这个注解打了标签的地方我就切上去。</li></ul><h3 id="advice"><a href="#advice" class="headerlink" title="advice"></a>advice</h3><p>最常用的是 Around<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-09-20-00-00-56.png"></p><h3 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h3><p>导入 AOP 的 start 包<br>Aspect 类级别注解<br>advice 方法级别注解</p><h4 id="AOP-的实际代码案例"><a href="#AOP-的实际代码案例" class="headerlink" title="AOP 的实际代码案例"></a>AOP 的实际代码案例</h4><p>建议看源码<br>validation 合法性检查<br>pageSize 和异常处理<br>JWT</p><h2 id="Spring-应用的测试"><a href="#Spring-应用的测试" class="headerlink" title="Spring 应用的测试"></a>Spring 应用的测试</h2><h3 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h3><p>静态代码扫描插件，在 IDEA 和 eclipse 里头都有<br>动态测试，JUnit，jacoco 测试</p><p>白盒测试肯定是需要程序员自己做的，要确保你的代码逻辑没问题，你的代码都有跑到。</p><h4 id="白盒测试———实战-纯-Java-代码"><a href="#白盒测试———实战-纯-Java-代码" class="headerlink" title="白盒测试———实战_纯 Java 代码"></a>白盒测试———实战_纯 Java 代码</h4><p>我们找到项目里的这个方法<code>util.Common.cloneObj();</code><br>纯 Java 的，没有一点点 Spring 框架的痕迹，那我们就用纯 Java 的方式来测它<br>可以采用 JUnit 来测试<br>[软件测试 junit 小节](/2022/06/28/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/###junit)<br>据说新的<code>assertThat</code>还支持 stream 流式断言预期</p><p>引入 spring 测试的 start 包就引入了这些断言方式，爱用哪种用哪种，主要是为了对代码输出的结果做预期。</p><h4 id="白盒测试———实战-Spring-环境"><a href="#白盒测试———实战-Spring-环境" class="headerlink" title="白盒测试———实战_Spring 环境"></a>白盒测试———实战_Spring 环境</h4><p>和纯 Java 代码不同的是，这些在 Spring 框架上所写的代码，比如<code>@Repository @Service @Controller</code>这些，它就不像纯 Java 代码在测试时直接 new()或者直接调它就可以，它的这些对象是由 Spring 实例化出来的，还会涉及到 IOC 注射，AOP 切入，我们在测试这些东西的时候当然希望 Spring 框架所有的特性都要保留一并测试。</p><p>所以我们在 Spring 框架中做的是切片测试，但是 JUnit 是无法保留 Spring 环境的特性的，为了引入 Spring 环境我们需要<code>@SpringBootTest</code>指明环境的入口<br><code>@SpringBootTest(classes = SpringApplication.class)</code><br>main 函数不仅仅是启动我们的应用，还包括了默认的配置定义和扫描包，从这个类入手，能把 Spring 框架环境里头的所有信息全部给它扫描把它读取出来，是我们整个 SpringBoot 应用的入口。</p><p><code>@SpringBootTest</code>的类可以使用所有 Spring 框架中间的注解，因为你已经有 Spring 环境了嘛</p><p>设计测试代码的原则：测试代码是可以重复运行的，不会修改环境的数据</p><ul><li>对数据库增删改限制<br>正常在 Spring 框架中间，方法开始，事务开始，方法结束，commit 事务<br>但是如果在 Spring 框架的测试类上加上<code>@Transactional</code>，所有的方法都会在事务里跑，方法开始，事务开始，方法结束 rollback 事务<br>这样一来利用事务的隔离性，就可以多个测试用例就可以同时并行执行<br>值得注意的是 redis 是不支持事务的，该方法对 redis 无效。</li><li>Spring Mockito<br><code>@MockBean</code>来注入属性,模拟 Spring Bean 对象<br>然后<code>Mockito.when()</code>，怎么感觉在另外一篇有讲到过<br>[软件测试 Spring Mock 小节](/2022/06/28/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/###Spring-Mock 自测单元)<br>不能 mock 静态方法，不能 mock private 方法，不能 mock final class</li><li>Spring MockMVC<br>Controll 层不仅仅是一个 Spring Bean 对象，它还是一个 Restful Controller<br>包含了合法性检查 validation，和<code>@Transactional</code>，需要用 MockMVC 来保持<br>mocMvc.perform()</li><li>jacoco 覆盖率<br>我们先把之前测试的 target 删掉，删掉 project&#x2F;test&#x2F;target<br>双击 payment&#x2F;Lifecycle&#x2F;test 来完整地跑一下测试的结果<br>跑这个测试，我们用的是 maven 中的<code>maven-surefire-plugin</code>，可以控制我只跑那个类的测试，比如我这里是所有 Test 结尾的类都要跑<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-10-03-19-58-01.png"><span style="color:red">通过率 maven-surefire-plugin<br/>覆盖率 jacoco-maven-plugin<br/>尽量把所有的代码都要测到</span>测试覆盖率的话，我们就需要借助 jacoco 了，maven 的 jacoco 的 plugin，绑到 maven 的 test 的 phase 上头，它会在测试之前去跑 jacoco 生成测试结果，一般测试结果是在这个目录下`target/site`，使用 Goal 把它没编译的测试结果变成 HTML。当项目的代码量起来后，每次改动一点代码都需要做大量的测试看看是否影响到其他模块，这样子做写测试代码就很舒服，因为如果原模块受影响，测试代码就不会通过。还有就是在写代码时加入日志，通过日志调试跟踪问题，通过把 mapper 的日志级别设置成 debug，在调试时就可以看到 mybatis 的 sql 语句是什么样子了。做开发不仅仅是把程序跑起来，在程序中手输数据，有问题再开调试 debug 单步一点点地跟，那是菜鸡开发的做法，因为那样的测试结果和测试步骤是无法保留无法复现的。</li></ul><h3 id="人工代码审核-code-review"><a href="#人工代码审核-code-review" class="headerlink" title="人工代码审核 code review"></a>人工代码审核 code review</h3><p>新人不能独立完成模块，需要导师或团队进行 code review，或者在这辈子代码生涯中涉及到系统关键部分的改动时，也需要有人帮忙 code review，主要是通过分享问题和解决方案避免设计和实现上的一些问题，code review 是静态测试和动态测试都覆盖不到的。</p><h3 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h3><p>白盒测试完之后大家觉得代码还会有问题吗，当然会有问题。<br>白盒测试仅仅能够证明你写的代码和你的想象是一致的，还有可能你一开始就想错了，预期是错的，最终的设计和实现也是有问题的。那些想错的，在代码中没写的，在前面的白盒测试是体现不出来的。</p><p>黑盒测试最好是由测试人员来做的，因为开发人员通常会有自己的执念，在开发时总认为这个想法是对的，并且代码都写了，会被开发思维牵着走迷路了，难以测出问题。</p><p>通常是由测试人员根据预期的需求和功能来做测试，不再以代码覆盖率为目的，点点点从入门到精通。</p><h3 id="性能监控"><a href="#性能监控" class="headerlink" title="性能监控"></a>性能监控</h3><p>使用 Jconsole 来远程监控 JVM 里头的内存、线程、CPU 的运行情况，这需要在启动 Java 应用时添加参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># runJava.sh</span></span><br><span class="line"><span class="comment"># 堆的最小 最大空间都设置1g 每个线程的堆栈数量设置512k</span></span><br><span class="line">java -Xms1g -Xmx1g -Xss512k</span><br><span class="line">-Dcom.sun.management.jmxremote.port=3214 \</span><br><span class="line">-Dcom.sun.management.jmxremote.ssl=<span class="literal">false</span> \</span><br><span class="line">-Dcom.sun.management.jmxremote.authenticate=<span class="literal">false</span> \</span><br></pre></td></tr></table></figure><p>可以使用<code>runJava.sh youProgram.jar</code>这样优雅地切换运行你需要监控的 Java 程序</p><p>然后在安装了 jdk 的服务器上使用<code>jconsole</code>命令打开监控工具，可以监控本地或远程服务器的 JVM<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-10-14-23-49-22.png"><br>映入眼帘的是堆内存、线程、类、CPU 占有率<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-10-15-00-02-25.png"></p><p>tomcat 跑起来的时候，这 100 个线程(最小工作线程数)已经全部实例化出来了，放到了线程池里头<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-10-15-00-11-11.png"></p><h3 id="性能测试-例如-Jmeter"><a href="#性能测试-例如-Jmeter" class="headerlink" title="性能测试 例如 Jmeter"></a>性能测试 例如 Jmeter</h3><p>Jmeter 是开源的基于 Java 的性能测试工具</p><ul><li>TestPlan 测试计划</li><li>ThreadGroup 线程组</li><li><ul><li>Sample 采样器<br>一般用来模拟 HTTP 请求，无界面的浏览器，发送 HTTP 请求，接收响应数据</li></ul></li><li>Assertion 断言</li><li>Listener 监听器<br>收集所有的测试结果</li><li>Config Element<br>从 CSV 文件读取测试数据，定义 HTTP header 等等</li></ul><h4 id="Jmeter-生命周期"><a href="#Jmeter-生命周期" class="headerlink" title="Jmeter 生命周期"></a>Jmeter 生命周期</h4><ul><li>Config Element</li><li>Sample</li><li>Assertion</li><li>Listener</li></ul><h4 id="Jmeter-实战-测试-Tomcat-并发"><a href="#Jmeter-实战-测试-Tomcat-并发" class="headerlink" title="Jmeter 实战 测试 Tomcat 并发"></a>Jmeter 实战 测试 Tomcat 并发</h4><p>tomcat 配置<br><code>tomcat.threads.max=200</code><br><code>tomcat.min-spare=100</code><br>一开始启动 Tomcat 的时候就会有 100 个线程，随着请求超过 100 个后会慢慢增加到 200 个线程就不会再增加了<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-10-10-23-20-49.png"></p><p>一次性（只循环一次），在 2 秒钟之内向目标服务器发送 400 个请求<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-10-10-23-05-31.png"><br>定义请求地址和端口，传 3 是因为按后台代码逻辑设置了请求参数会按数字参数将线程睡眠一定数值秒，传 3 就睡眠 3 秒<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-10-10-23-27-23.png"><br>设置断言期望结果，响应状态码等于 200<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-10-14-11-44-40.png" alt="设置断言期望结果，响应状态码等于200"><br>定义 Listener 聚合报表，会给出所有请求的汇总值<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-10-14-12-23-33.png"><br>定义另外一个 Listener，响应时间图表，时间单位是 100 毫秒<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-10-14-12-28-27.png"><br>我们导出 jmx 文件，在无桌面的环境下跑测试脚本，才是接近理想的测试环境<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-10-14-12-31-58.png"><br><code>jmeter -n -t TestPlan.jmx -l result.jtl</code><br>-n 命令行 -t 读取测试计划 -l 输出到文件<br>可以看到，新增的是 101~200 的这另外 100 个工作线程数，就是我们在 min 和 max 之间的这 100 个线程数<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-10-15-00-16-27.png"><br>请求完成后，CPU 降下来了，但是内存和线程数量还在一个台阶上，除非垃圾回收</p><p>html 格式的测试报告<br>默认一分钟的刻度是不对的，我们改成 100 毫秒（跟随前面测试计划设置的 100 毫秒）<br><code>vim jmeterHome/bin/user.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># user.properties</span></span><br><span class="line"><span class="attr">jmeter.reportgenerator.overall_granularity</span>=<span class="string">100</span></span><br></pre></td></tr></table></figure><p><code>jmeter -g result.jtl -o webApp</code></p><h2 id="Spring-的缓存机制"><a href="#Spring-的缓存机制" class="headerlink" title="Spring 的缓存机制"></a>Spring 的缓存机制</h2><p>但凡用到缓存的地方就会有缓存发霉问题，数据的一致性</p><h3 id="为什么要用到缓存"><a href="#为什么要用到缓存" class="headerlink" title="为什么要用到缓存"></a>为什么要用到缓存</h3><p>缓存是什么？缓存存的是数据，而数据通常是存储在硬盘中，对写的操作我们无能为力，但对于读的操作来说，我们是可以去做一些缓存的,提升系统整体性能，降低 Web 系统的响应时间。<br>如果我们只从访问数据的角度来看，获取数据有几种途径？<br>磁盘，内存，网络</p><h3 id="在什么地方用到缓存"><a href="#在什么地方用到缓存" class="headerlink" title="在什么地方用到缓存"></a>在什么地方用到缓存</h3><p><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-11-10-23-53-23.png"><br><code>缓存在最靠近用户的地方</code></p><ul><li><p>缓存在客户端<br>服务器在部署后正常运行情况下，用户在使用中不会修改的东西，可以缓存在客户端<br>一般情况下，用户看到的 label 是这样来的<code>用户在界面上看到的label -&gt; Java代码的field -&gt; 数据库的column</code>。<br>我们可以缓存 label 和 Java 代码 field 的映射关系<br>客户端浏览器的 Web Storage -&gt; java code’s field<br>当然还有 dropdown，datalist，codelist 这类数据的映射，都是可以缓存在客户端的。<br>但是作为一个 Web 系统还有前端 nginx 服务器，还有后端 Tomcat 服务器，任何一个地方慢了都会影响系统整体体验。</p></li><li><p>缓存在前端服务器<br>p1:中国的首都是哪里<br>p2:英国的首都是哪里<br>如果 p1 有用户来查询过了，可以缓存在 nginx 服务器，这样再有另外一个用户来请求 p1 时，可以去 nginx 缓存找，不需要再到 Tomcat 服务器拿</p></li><li><p>缓存在后端服务器本地缓存<br>内存，本地数据库，mybatis<br>后端本地缓存我们只讲 mybatis 的本地缓存，后端服务通过 mybatis 调用另一台数据库服务器的情况<br><code>mybatis一二级缓存原理简易版:</code><br>sql 语句可能是一样的，但是参数是不同的，查询出来的结果就不一样了，先用 sql 语句和参数算一个哈希值，如果哈希值是一样的就不要去查数据库了，直接从缓存取值响应回去<br><code>mybatis一级缓存(默认打开关不了)：</code><br>在每一个事务开始的时候，把每一个查询的结果存下来，整个事务中所有的查询结果都存下来，在这事务中后面的语句算出来的哈希值是一样的就不会去查询数据库了，直接从缓存取值响应回去<br><code>mybatis一级缓存存在问题</code><br>如果在一台 mybatis 服务器上有两个请求过来，分别开了自己的事务（那就有两个事务），它们查询了相同的语句，但是因为不是在同一个事务里面，就存了两遍，所以这种情况下一级缓存是起不了效果的。<br><code>mybatis如何解决缓存发霉问题，保证数据的一致</code><br>在 mybatis 服务器上记住这条数据是哪个 TABLE 的，只要对这个 TABLE 做了 UPDATE、INSERT、DELETE，把这个 TABLE 的缓存都给我删掉<br><code>mybatis二级缓存</code><br>mybatis 的二级缓存和一级缓存一差不多，但是不再局限于同一事务<br><code>mybatis二级缓存存在问题</code><br>如果我们的项目扩展了多台 mybatis 服务器（假设 A、B 两台），通常用 nginx 在前端做轮询，发到 mybatis 服务器，相同的 sql 语句和参数，两个请求分别轮询到 A、B 服务器，请求到 A 缓存到 A’，请求到 B 缓存到 B’，没有办法做到请求到 B 读缓存 A’来响应，原因是物理机不能跨内存</p></li><li><p>缓存在后端服务器外部缓存<br>缓存在[redis 数据库]中，redis 是一个内存数据库，只是通常用来做缓存服务</p></li></ul><h3 id="redis-缓存"><a href="#redis-缓存" class="headerlink" title="redis 缓存"></a>redis 缓存</h3><p>redis，省去了硬盘 I&#x2F;O 的开销，只支持 key 到 value 的查询，内存数据库，读写比硬盘数据库快</p><p>硬盘总是比内存慢的，当 redis 并发压力大时，内存中的数据来不及持久化到硬盘，就一定会丢数据</p><p>虽然支持 key 到 value 的存取，但是不仅仅是通过 key 拿到 value，value 还可以放列表、集合，对 value 做一些数据结构的操作</p><p>redis 作为缓存服务器，你总不能只弄一台吧，崩了怎么办，所以它提供了多台集群的功能，主从结构，一台崩了另一台服务器立马接手，这种主从服务器的数据在内存中保持同步还是容易的，但是无法保证服务器的内存和磁盘的数据同步，这是很困难的。</p><h4 id="redis-原理和特性"><a href="#redis-原理和特性" class="headerlink" title="redis 原理和特性"></a>redis 原理和特性</h4><ul><li>内存数据库</li><li>I&#x2F;O 多路复用<br>这不是 Tomcat 的思想吗？<br>早期的 Tomcat，一个请求一个线程去处理，但是因为有 I&#x2F;O 的操作，所以线程会在内存中等待一段时间。<br>Tomcat8 以后就是 I&#x2F;O 多路复用，I&#x2F;O 操作的时候放到一个等待队列里头，I&#x2F;O 操作完后再由线程池去处理请求。</li></ul><p>redis 是网络的分布的服务器，是有网络 I&#x2F;O 的，所以 redis 也用了 I&#x2F;O 多路复用，在网络 I&#x2F;O 过程中间，其实是在等待队列中间并没有线程去处理，当网络 I&#x2F;O 完成了以后，它用单线程去做对内存的存取，这个过程是很快的，因为它没有什么计算和硬盘 I&#x2F;O，它可以在一个线程的轮转时间内完成请求</p><ul><li>原子性<br>redis 的所有操作都是原子性的，因为它是单线程的，一个 redis 服务器是不可能有两个请求同时在上面处理的，这就会使得它的每个请求是原子性的</li></ul><h4 id="redis-的常用数据结构"><a href="#redis-的常用数据结构" class="headerlink" title="redis 的常用数据结构"></a>redis 的常用数据结构</h4><p>字符串是 redis 中的基本数据类型，且是二进制安全的，其他数据类型还有：Hash 键值对集合，List 双向链表，Set 集合，BitMap 实现位操作</p><h4 id="redis-缓存的应用场景"><a href="#redis-缓存的应用场景" class="headerlink" title="redis 缓存的应用场景"></a>redis 缓存的应用场景</h4><p><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-11-10-23-56-57.png"></p><ul><li>读热点数据缓存<br><code>把一些被频繁读的东西从硬盘数据库读出来以后放到内存中，然后别人再来请求读的时候就不用去读硬盘数据库了，从redis中读出来就响应回去</code><br>存字符串，字符串通常是一串对象二进制格式的我们转换成 JSON 格式的对象来存取，<br>存二进制的内存和网络的开销更小，但我们为了方便测试还是喜欢存取 JSON 或者存一个数</li><li>缓存发霉问题<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-11-19-13-21-45.png"><br>当 redis 缓存的数据更新后，redis 和数据库的数据不一致，会带来缓存发霉问题，想要使得 redis 缓存发霉出现问题的概率最小，这里贴出的 dao 层是错误的，实际上 redisUtil.del()应该写在 service 层的事务方法的事务结束之前，并且还要包装成列表，这里只删了一个 key，其实我们应该包装成一个 list 列表，因为如果在一个事务中动了好多的缓存，还是需要把这些 key 都做一个列表出去，最后在事务结束的时候去删。</li><li>Set 集合或 BitMap 计算 User 多个 Role 的权限<br>基于角色的权限系统中，user 的权限不在 user 身上，一个 user 可能有多个 Role，每个 Role 有各自的权限，user 的权限是由多个 Role 的权限求并集来决定的<br>BitMap 更高效，占用的内存会更小</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用set计算多角色用户的权限</span></span><br><span class="line">List&lt;Long&gt; roleIds = (List&lt;Long&gt;) returnObject.getData();<span class="comment">//当前user的 List roleIds</span></span><br><span class="line"><span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> String.format(USERKEY, id);<span class="comment">//userId</span></span><br><span class="line">Set&lt;String&gt; roleKeys = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(roleIds.size());<span class="comment">//user&#x27;s List Role Size</span></span><br><span class="line"><span class="keyword">for</span> (Long roleId : roleIds) &#123;<span class="comment">//for loop user&#x27;s roleIds in redis? roleKeys.add() : loadRole() from DB</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">roleKey</span> <span class="operator">=</span> String.format(ROLEKEY, roleId);</span><br><span class="line">    roleKeys.add(roleKey);</span><br><span class="line">    <span class="keyword">if</span>(!redisUtil.hasKey(roleKey))&#123;</span><br><span class="line">        <span class="comment">//loadRole() from DB</span></span><br><span class="line">        <span class="type">ReturnObject</span> <span class="variable">returnObject1</span> <span class="operator">=</span> roleDao.loadRole(roleId);</span><br><span class="line">        <span class="keyword">if</span>(returnObject1.getCode() != ReturnNo.OK ) &#123;</span><br><span class="line">            <span class="keyword">return</span> returnObject1;<span class="comment">//找不到role，请联系管理员</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (roleKeys.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//求role的并集,用户的最终权限</span></span><br><span class="line">    redisUtil.unionAndStoreSet(key, roleKeys, key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>库存的高并发扣减<br>mysql 写是没办法解决高并发问题的，锁只能保证并发的时候不会写错<br>redis 的原子性，结合带事务的消息队列中间件 MQ，把库存量依次写回数据库<br>如果 redis 也垮掉了，那只能靠数据库了</p></li><li><p>缓存雪崩? 设置过期时间随机<br>受内存空间影响，redis 无法缓存所有的数据，通常会对数据设定一个有效期，再通过惰性删除&#x2F;定期删除。<br>举个简单的例子，当项目部署完那一刻，有很多请求到不同的商品，然后那一刻这些商品都会从数据库 load 到 redis 缓存，此时 redis 是正常工作的，但是在达到有效期后，之前那一刻缓存到 redis 的商品数据同时过期了，如果此时还是有很多请求到那一刻的那些商品，请求就会到了数据库，再放到缓存里头，会给数据库带来不小的压力。如果在高并发的情况下，可能瞬间就会导致数据库宕机。 这时候如果运维马上又重启数据库，马上又会有新的流量把数据库打死。<br>为了避免缓存中的数据同时过期，所以我们给每个商品加上的缓存有效期还会加上一些随机值，这样就大幅减少了缓存数据同时过期的可能性。</p></li><li><p>缓存击穿? 设置过期时间为永不过期<br>缓存击穿和缓存雪崩类似，缓存雪崩是大规模热点的过期，缓存击穿是一个热点的过期。<br>我们可以把这个热点缓存数据设置成永不过期，防止大并发全打在数据库上</p></li><li><p>缓存穿透? Bloom 布隆过滤器缓存防御墙<br>攻击者通常会穿透 redis，让攻击请求读到数据库，来拖慢系统的响应时间，比如发起一个商品 id 为-88 的请求，显而易见，这不是个被频繁读的热点数据，不会存在于 redis 缓存，所以这个请求会去读数据库。<br>针对无需密码身份验证公开访问的 api 设置 Bloom 过滤器（记录的是数据库没有的商品 ID），假设攻击者第一次要访问的商品 id 为-88，先去 Bloom 过滤器查-88，查不到再去查询数据库然后响应回去；当第二次再查这个-88 时直接去 Bloom 过滤器查-88 不存在，然后响应回去，不需要去读数据库。<br>但是 Bloom 过滤器有误报率，这会造成一个问题，本来数据库里有，但是先查 Bloom 过滤器告诉你没有，</p></li><li><p>缓存穿透? 使用缓存空值响应<br>我们每次从数据库查出来的东西如果是空的话，我们把这个空的值和查询 id 存到缓存里，如果攻击者再次用这个查询 id 发起攻击请求，那就会被缓存拦住，响应回去，而不会去查数据库</p></li></ul><p>连接 redis 通常会使用 jedis 或 Lettuce，我们用的是 Lettuce，这种是基于 Netty 的架构去做的，Webflux 就是这种 Netty 的架构，就是反应式去做的。也就是说 Lettuce 不仅仅在 Servlet 架构里面用，其实在 Webflux 架构里面也用，为了更好的兼容性，我们就统一用 Lettuce。</p><h4 id="redis-内存管理"><a href="#redis-内存管理" class="headerlink" title="redis 内存管理"></a>redis 内存管理</h4><ul><li>惰性删除<br>访问该 key 时，如果过期则删除</li></ul><p>如果 key 只存不取的话，那就不会触发惰性删除，是有问题的<br>如果存的全是不过期的数据，不会触发惰性删除</p><ul><li>定期删除<br>定期随机选取部分 key，哪些 key 过期了就删除掉<br>不能高频定期删除</li><li>其他节约内存的配置<br>默认是 noeviction，但是普遍配置成 allkeys-lru<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-11-11-00-01-53.png"></li></ul><h3 id="怎样去实现我们的缓存"><a href="#怎样去实现我们的缓存" class="headerlink" title="怎样去实现我们的缓存"></a>怎样去实现我们的缓存</h3><p>todo</p><h2 id="Spring-Data-和-Mongo"><a href="#Spring-Data-和-Mongo" class="headerlink" title="Spring Data 和 Mongo"></a>Spring Data 和 Mongo</h2><h3 id="为什么要用-MongoDB"><a href="#为什么要用-MongoDB" class="headerlink" title="为什么要用 MongoDB"></a>为什么要用 MongoDB</h3><p>通常用户想看到的页面对象需要通过一个实体类还有关联着其他表的属性，这时就需要做一对多的查询，但是一对多的查询，可能会使得 Mysql 在做查询时造成磁盘非连续跨页，这是低效率的查询。</p><p>当然如果非要用 MySQL 的话，可以分别查询对象信息接着在程序中拼凑成一个最终对象 list，再把这个 list 做数据库存取，这样就不需要在数据库上做一对多的低效查询。</p><p><code>更好的选择MongoDB</code><br>优点&amp;特性：支持分布式 ACID，对象存储，以集合管理数据库，通过 keyvalue 对存取数据，数据格式是非自然语言的二进制 JSON，采用 B-tree 索引<br>虽然 Spring 还可以用其他库可以操作 Mongo，但是我们如果不打算用 Mongo 做复杂的功能，只使用简单的：对象进，对象出，主键查询，那 Spring Data 就够了。</p><h3 id="Spring-Data"><a href="#Spring-Data" class="headerlink" title="Spring Data"></a>Spring Data</h3><p>通常我们在操作数据库时，这些 ORM 框架都需要写一些数据库操作的格式化代码<br><del>Mybatis 需要写 Mapper</del><br><del>Hibernate 需要使用 Session</del><br><del>JPA 需要使用 EntityManager</del><br><code>Spring Data大幅度减少数据操作的格式化代码，只需要定义Repository接口</code><br>Spring Data 对数据持久化提供统一的操作方式（操作数据库的代码基本不变），项目未来如果要做数据库切换时不需要改太多代码。</p><p><del>Hibernate 是 JPA 的一种实现，那么我们可以先不管 Hibernate 是什么</del></p><p>可以看到下图，操作数据库的 Repository 接口，如果你只用白色部分的接口，来实现增删改查，那切换数据库的时候就真的是不需要改代码。</p><p>Spring Data 没有接入 Mybatis，而是在 Repository 接口有两个重要的子接口，JpaRepository 接口、MongoRepository 接口。<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2024-03-10-11-51-15.png"><br>Spring Data 在不伤害 Mapper 层的情况下，在 Mapper 层中对操作 Jpa 和 MongoDB 或其他数据库提供了统一的操作接口<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2024-03-10-10-38-07.png"></p><h3 id="Spring-Data-MongoDB"><a href="#Spring-Data-MongoDB" class="headerlink" title="Spring Data MongoDB"></a>Spring Data MongoDB</h3><p><del>反射机制去把对象实例化出来，反射机制很慢</del><br>而<code>@AllArgsConstructor</code>可以在运行时动态产生.class 文件，非常建议添加保留这个注解<br><code>@Document, @MongoId</code> mongo<br><code>@Data, @NoArgsConstructor, @AllArgsConstructor</code> spring data<br>@Document 定义一个 Collection</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Document(&quot;pieceTemplate&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PieceTemplatePo</span>&#123;</span><br><span class="line">    <span class="meta">@MongoId</span></span><br><span class="line">    <span class="keyword">private</span> String objectId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer firstItems;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long firestPrice;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer additionalItems;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long additionalPrice;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义 Repository</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PieceTemplatePoMapper</span> <span class="keyword">extends</span> <span class="title class_">MongoRepository</span>&lt;PieceTemplatePo, String&gt;&#123;</span><br><span class="line">    <span class="comment">//无需定义任何方法, 因为没打算用Mongo做复杂的功能，只做主键存取，父亲接口继承过来的方法够用了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 Repository</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(RegionTemplate bo)</span>&#123;</span><br><span class="line">    <span class="type">PieceTemplatePo</span> <span class="variable">po</span> <span class="operator">=</span> cloneObj(bo, PieceTemplatePo.class);</span><br><span class="line">    <span class="type">PieceTemplatePo</span> <span class="variable">newPo</span> <span class="operator">=</span> <span class="built_in">this</span>.mapper.insert(po);</span><br><span class="line">    <span class="keyword">return</span> newPo.getObjectId();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> RegionTemplate <span class="title function_">getRegionTemplate</span><span class="params">(RegionTemplatePo po)</span>&#123;</span><br><span class="line">    <span class="type">PieceTemplatePo</span> <span class="variable">bo</span> <span class="operator">=</span> cloneObj(po, PieceTemplatePo.class);</span><br><span class="line">    Optional&lt;PieceTemplatePo&gt; wPo = <span class="built_in">this</span>.mapper.findById(po.getObjectId);</span><br><span class="line">    wPo.ifPresent(templatePo -&gt; copyObj(templatePo, bo));</span><br><span class="line">    <span class="keyword">return</span> bo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-Data-JPA"><a href="#Spring-Data-JPA" class="headerlink" title="Spring Data JPA"></a>Spring Data JPA</h3><p><code>@Entity, @Table, @Id, @GeneratedValue</code> jpa<br><code>@Data, @NoArgsConstructor, @AllArgsConstructor</code> spring data<br>定义 entity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Table(name = &quot;shop_service_product&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShopServiceProductPo</span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String creatorName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String createOn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Repository</code>spring data<br>定义 repository</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据表接口继承了Jpa接口&lt;对象，对象id主键类型&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ShopServiceProductPoMapper</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;ShopServiceProductPo, Long&gt; &#123;</span><br><span class="line"><span class="comment">//或许这个接口里可以不再写任何方法，因为这个接口继承了JpaRepository，JpaRepository又继承了很多Repository，所以已经有很多方法了</span></span><br><span class="line"><span class="comment">//如果这些来自父亲接口的方法足够实现你的需求了的话，实际上这个接口里可以不再写任何方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Spring Data通过方法名匹配方法参数，全自动化</span></span><br><span class="line">Page&lt;ShopServiceProductPo&gt; <span class="title function_">findByShopId</span><span class="params">(Long shopId, Pageable pageable)</span>;</span><br><span class="line">Page&lt;ShopServiceProductPo&gt; <span class="title function_">findByShopIdEqualsAndInvalidEqualsAndBeginTimeBeforeAndEndTimeAfter</span></span><br><span class="line"><span class="params">(Long shopId, Byte invalid, LocalDateTime beginTime, LocalDateTime endTime, Pageable pageable)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过注解写原生sql，有的时候方法名无法描述复杂的sql</span></span><br><span class="line"><span class="meta">@Query(value = &quot;SELECT * FROM USERS WHERE EMAIL_ADDRESS = ?1&quot; nativeQuery = true)</span></span><br><span class="line">User <span class="title function_">findByEmailAddress</span><span class="params">(String emailAddress)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过注解写jpa sql……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 repository<br>可以看到和 Mybatis 的代码没什么太大区别，几乎可以和 Mybatis 无缝切换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Product&gt; <span class="title function_">retrieveByShopId</span><span class="params">(Long shopId, Integer page, Integer pageSize)</span> <span class="keyword">throws</span> RuntimeException&#123;</span><br><span class="line">    <span class="type">Pageable</span> <span class="variable">pageable</span> <span class="operator">=</span> PageRequest.of(page,pageSize);</span><br><span class="line">    Page&lt;ShopServiceProductPo&gt; ret = shopServiceProductPoMapper.findByShopId(shopId, pageable);</span><br><span class="line">    <span class="keyword">return</span> retrieveProduct(ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="消息服务器"><a href="#消息服务器" class="headerlink" title="消息服务器"></a>消息服务器</h2><p>消息服务器是一个分布式异步通讯方式<br>这里的分布式是指两台服务器之间的调用<br>异步是指不需要等待服务器调用完成就可以继续往后走</p><h3 id="核心模型-生产者发布-消费者订阅"><a href="#核心模型-生产者发布-消费者订阅" class="headerlink" title="核心模型 生产者发布 消费者订阅"></a>核心模型 生产者发布 消费者订阅</h3><p>生产者往 topic 里头丢信，然后如果消费者订阅了 topic，可以读到 topic 里头的信然后去做信里交代的事情<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-11-11-13-10-07.png"><br>实际上这只是个简单的模型，基于这个模型，可以做出两类不同的应用。</p><h4 id="点对点的通讯模式"><a href="#点对点的通讯模式" class="headerlink" title="点对点的通讯模式"></a>点对点的通讯模式</h4><p>生产者可以有多个，消费者也可以有多个，但是一封信只能被其中一个消费者读，另一个消费者只能读另外新的信<br>一对一的调用<br>只要把生产者消费者的数量提上去，就能提高系统性能<br>只要中间的消息队列能扛得住，那么多生产者不断地生产，那么多消费者不断地消费，整个集群就可以去不断地去扩展处理能力和吞吐量<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-11-11-13-12-17.png"></p><h4 id="订阅和发布的通讯模式"><a href="#订阅和发布的通讯模式" class="headerlink" title="订阅和发布的通讯模式"></a>订阅和发布的通讯模式</h4><p>生产者可以有多个，消费者也可以有多个，生产者发的信，所有消费者都可以收到<br>一调多的情况<br>假设信的内容是:有商品下单了，那么消费者 1 要去减库存量，消费者 2 要去计算用户的商品返利，消费者 3 去推荐关联的其他商品<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-11-11-13-15-53.png"></p><h3 id="RocketMQ-消息服务器"><a href="#RocketMQ-消息服务器" class="headerlink" title="RocketMQ 消息服务器"></a>RocketMQ 消息服务器</h3><p>Kafka 是国外的，但是我们选择讲国内的 RockeMQ，如果你有兴趣的话可以留意关注一下后起之秀 Pulsar 据说主打的是存算分离。<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-11-11-15-28-27.png"><br>Topic 里面是队列，可以是多个生产者把信随机丢到不同的队列里头，<br>然后经过队列生产者的信会发给所有的组，但是每个组里头只能有一台服务器消费这条信，假设信的内容是:有商品下单了，那么组 1 要去减库存量，组 2 要去计算用户的商品返利，组 3 去推荐关联的其他商品，（当然，实际上，组 x 要去……的过程，只是需要组内的一台服务器去做即可，库存量我们只要减一次，用户的商品返利只计算一次，推荐关联的其他商品也被调用一次）。</p><p>运行 RocketMQ 至少需要两台服务器，一台作为 Name Server，另一台作为 Broker</p><p>生产者丢信的时候会先去 Name Server 看，我的 topic 在哪一个 Broker 上，因为 Broker 可能不止一个，我们在这台服务器上有很多个 topic 就有很多个信箱，这些 topic 这些信箱其实是分在不同的 Broker 上面的，找到那个 Broker 后就可以去丢信</p><p>消费者一定是订阅哪一个 topic 的，同样需要问我的 topic 在哪一个 Broker 上<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-11-13-21-42-00.png"><br>一个 Broker 里面可以有多个 topic，一个 topic 里面可以有多个队列，一个 topic 里面的多个队列是可以跨 Broker 的（在不同的 Broker 上）</p><p>如果只有一个队列，消费者 A1 拿了，消费者 A2 才能拿，限制了并行消费的能力。</p><p>所以像这样多个队列，一个消费者至少拥有一个队列，就是一个高性能的消息服务器</p><p>生产者丢信的时候有两种模式，一种是随机丢信到队列，另一种是轮询丢信到队列，这两种模式都不能做到先进先出（顺序消费）</p><p>可以把队列设置成一个来实现顺序消费，但这性能不高，<br>或者设置成特殊的消息</p><h4 id="普通消息"><a href="#普通消息" class="headerlink" title="普通消息"></a>普通消息</h4><p>Spring 的模板代码如下所示，log-topic:1，冒号壹的壹是个标签，我们可以给这条信贴标签，比如 log-topic:加急，然后就设置一些消费者（专门处理加急标签的消息，其他消息不处理）<br>或者分几类标签，设置不同类的消费者来消费这几类消息<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-11-13-21-48-38.png"></p><p>点对点的话，有一台消费者读完消息，就可以 delete 了<br>如果是订阅发布的话，所有的消费者都读完这条消息才会 delete</p><h4 id="延时消息"><a href="#延时消息" class="headerlink" title="延时消息"></a>延时消息</h4><p>发送的消息是不需要立即处理的，我们希望它晚一点来处理</p><p>比如订单模块 call 支付模块 ，支付模块会 return 一个 prePayID，然后用户就去支付了，然后支付模块会检查支付有没有成功，但是我什么时候去看那个支付成功还是没有成功呢？</p><p>可能密码输错了，也可能余额不足，也可能是用户取消支付了，这些都可能发生</p><p>所以我们通常会设置预期，看是秒杀还是普通订单，如果秒杀就快一点，普通订单就慢一点，比如可以我订单模块自己给我自己发一封信，1 分钟以后去查一下 prePayID 是否支付成功，如果既不是成功也不是失败，那就再过一分钟后再去查一下<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-11-14-22-57-51.png"><br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-11-14-22-51-49.png"><br>消费者收到信后就会调 onSuccess()<br>消费者在指定时间内没有收到信，或者发信失败就会调 onException()</p><h4 id="事务消息"><a href="#事务消息" class="headerlink" title="事务消息"></a>事务消息</h4><p>跨服务器的事务，如果库存那边减失败了，订单状态也应该退回去，，这就需要用事务消息来实现，除非万不得已才会使用其他的分布式事务的组件去完成。</p><h5 id="事务和消息存在问题"><a href="#事务和消息存在问题" class="headerlink" title="事务和消息存在问题"></a>事务和消息存在问题</h5><ul><li>在事务开始前发消息<br>想屁吃呢</li><li>在事务过程中提交事务之前发消息<br>如果发消息错误，就回滚事务；但是如果消息发出去了，但是事务服务器宕机了没有提交事务</li><li>在事务提交后发消息<br>事务提交了，但是消息服务器宕机了</li></ul><h5 id="RocketMQ-的事务消息"><a href="#RocketMQ-的事务消息" class="headerlink" title="RocketMQ 的事务消息"></a>RocketMQ 的事务消息</h5><p>生产者发 order 消息到 topic，但是发的是半消息，不会送达消费者，并且消息服务器会回调生产者去执行另一个方法</p><p>生产者执行的方法会开启本地事务来 save order，事务成功或失败就会在本地提交事务或者回滚事务，再发送事务成功失败的消息，只有收到了消息才会送达消费者</p><p>可以实现事务成功发消息，事务失败不发消息<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-11-15-21-40-24.png" alt="事务消息流程图"></p><h5 id="RocketMQ-事务消息的代码实现"><a href="#RocketMQ-事务消息的代码实现" class="headerlink" title="RocketMQ 事务消息的代码实现"></a>RocketMQ 事务消息的代码实现</h5><ul><li>发半消息 send half message<br>createOrder() 发 order 半消息到 topic<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-11-15-22-40-40.png" alt="代码-事务消息流程图的1"></li><li>回调执行本地事务<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-11-15-22-45-40.png" alt="代码-事务消息流程图的2、3、4"></li><li><ul><li>executeLocalTransation()里面先把生产者的消息解出来，再去调 orderService.saveOrder()</li></ul></li><li><ul><li>从上一节的图可以看到 saveOrder 是一个 transition 方法，也就是说在 saveOrder()如果出错了，会抛出 exception，然后事务会回滚</li></ul></li><li><ul><li>如果流程图的 4 没有被执行，比如因为宕机 executeLocalTransation()没有 return，那就会跑到 checkLocalTransaction()，把消息解出来去查询订单号，如果查到就是事务成功了，虽然这里只写了 return null</li></ul></li></ul><h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><p>前面一直在说生产者，下面说说消费者<br><img src="/img/JavaEE%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF/2023-11-15-23-07-38.png" alt="消费者代码"><br>先说说注解：@RocketMQMessageListener(订阅哪个 topic, 标签是秒杀还是普通商品, 虽然一台服务器但是可以最大 10 个线程, 消费者组)<br>后面就很简单，只需要 onMessage() 把消息解出来，然后去根据订单减库存量该干嘛干嘛</p><ul><li>Name Server<br>MQ 的查名服务器，所有的事情都要问它</li><li>Broker<br>丢信的地方，topic 在哪，都是在 Broker 上面</li></ul><h4 id="消息服务器能干什么"><a href="#消息服务器能干什么" class="headerlink" title="消息服务器能干什么"></a>消息服务器能干什么</h4><ul><li>解耦<br>我想要做什么就发消息，至于怎么做我不管</li><li>服务器间的异步调用<br>在 call 另一个 api 时，不需要立即知道对方的结果，都尽量采用消息服务器的方式去做<br>比如使用延时消息实现支付结果的检查</li><li>排队，FIFO 先进先出<br>限制消费者只有一个，topic 中的队列只有一个</li><li>削峰值<br>比如在商品秒杀峰值这段时间内，用有限的资源处理 api 响应的消息，后面用一个线程用一个消费者慢慢地把它写进去</li></ul><h2 id="非常感谢"><a href="#非常感谢" class="headerlink" title="非常感谢"></a>非常感谢</h2><p>[^1]: JavaEE 平台技术 2023 厦门大学 邱明，王美红[<a href="https://space.bilibili.com/689233562/video">https://space.bilibili.com/689233562/video</a> ]<br>[^1]: JavaEE 平台技术 2021~2022 厦门大学 邱明[<a href="https://www.icourse163.org/course/XMU-1462056168">https://www.icourse163.org/course/XMU-1462056168</a> ]</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>OBS studio</title>
      <link href="/2023/06/18/OBS-studio/"/>
      <url>/2023/06/18/OBS-studio/</url>
      
        <content type="html"><![CDATA[<h2 id="OBS-Studio"><a href="#OBS-Studio" class="headerlink" title="OBS Studio"></a>OBS Studio</h2><p>免费且开源的用于视频录制以及直播串流的软件。<br>通过视频采集卡，把<code>没屏幕的安卓电视盒子</code>输出到显示器上。</p><h2 id="OBS-Studio-架构分析"><a href="#OBS-Studio-架构分析" class="headerlink" title="OBS Studio 架构分析"></a>OBS Studio 架构分析</h2><p>通常分为客户端和服务端<br>服务端接收客户端发送的视频或音频<br>客户端向服务端发送音频或视频</p><h3 id="OBS-Studio-服务端"><a href="#OBS-Studio-服务端" class="headerlink" title="OBS Studio 服务端"></a>OBS Studio 服务端</h3><p>服务端一般是指的是 pc 服务器，支持 Windows、macOS、Linux<br><a href="https://obsproject.com/zh-cn/download">https://obsproject.com/zh-cn/download</a></p><h3 id="OBS-Studio-客户端"><a href="#OBS-Studio-客户端" class="headerlink" title="OBS Studio 客户端"></a>OBS Studio 客户端</h3><p>客户端指的是携带摄像头、麦克风的输入设备</p><ul><li>安卓<br>DroidCam OBS</li></ul><h3 id="从安卓推送到服务端"><a href="#从安卓推送到服务端" class="headerlink" title="从安卓推送到服务端"></a>从安卓推送到服务端</h3><p>安卓安装 DroidCam OBS 并启动，记得授权摄像头麦克风，会显示 ip 和端口<br><img src="/img/OBS-studio/2023-06-18-21-42-21.png"><br>服务端安装 OBS Studio，并安装插件<br><a href="https://github.com/dev47apps/droidcam-obs-plugin/releases/download/2.1.0/DroidCamOBS.Setup.2.1.0.exe">https://github.com/dev47apps/droidcam-obs-plugin/releases/download/2.1.0/DroidCamOBS.Setup.2.1.0.exe</a><br>这样服务端就能添加<code>DroidCam-OBS</code>用来捕获手机摄像头的画面了<br><img src="/img/OBS-studio/2023-06-18-21-46-31.png"></p><h2 id="直播"><a href="#直播" class="headerlink" title="直播"></a>直播</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud微服务技术栈</title>
      <link href="/2023/06/04/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
      <url>/2023/06/04/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h2 id="跨越服务的远程调用"><a href="#跨越服务的远程调用" class="headerlink" title="跨越服务的远程调用"></a>跨越服务的远程调用</h2><p>这一节我们只使用 order 和 user 两个服务来演示<br>order-service</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/cloud_order</span></span><br></pre></td></tr></table></figure><p>user-service</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/cloud_user</span></span><br></pre></td></tr></table></figure><p>然后我们把这两个服务运行起来<br><img src="/img/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%88/2023-06-04-23-09-35.png"><br>尝试访问 user 服务，访问结果如下<br><img src="/img/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%88/2023-06-04-23-36-16.png"><br>尝试访问 order 服务，访问结果如下<br><img src="/img/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%88/2023-06-04-23-27-45.png"><br>如果，我需要在访问 order 服务时，返回 User 对象的结果呢</p><p>Order 的 pojo 中包含一个类似 User 的 pojo 对象<br>但是还没有数据来源，所以上面访问 order 服务的结果中 user 是 null<br>所以我们可以像下面一样，尝试在 order 服务中发起对 user 服务的远程调用，发送一次 http 请求<br><img src="/img/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%88/2023-06-04-23-44-34.png"><br><img src="/img/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%88/2023-06-04-23-50-51.png"><br>好的，让我们重新启动 order 服务并重新访问<br><img src="/img/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%88/2023-06-04-23-53-26.png"><br>看，我们完成了跨越服务的远程调用<br>上面的例子演示了在 Java 的 Spring 中使用 RestTemplate 发起的 http 远程调用（好吧，这实际上和编程语言无关）<br>尽管这调用过程伴随着：<br>http 协议，域名&#x2F;ip，端口，路径，请求参数<br>但是我们只关注接口返回的结果，难道不是吗？</p><h2 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h2><h3 id="Eureka-做了什么"><a href="#Eureka-做了什么" class="headerlink" title="Eureka 做了什么"></a>Eureka 做了什么</h3><p>服务消费者和服务提供者是相对的，但他们都是属于客户端，所以都需要注册服务信息<br><img src="/img/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%88/2023-06-06-23-40-59.png"><br><img src="/img/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%88/2023-06-06-23-23-46.png"></p><h3 id="Eureka-搭建"><a href="#Eureka-搭建" class="headerlink" title="Eureka 搭建"></a>Eureka 搭建</h3><p>新建 module<br><code>eureka-server</code><br>引入 Eureka 服务端依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--eureka服务端--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Eureka 本身也是一个服务，也是需要注册服务信息的</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span> <span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eurekaserver</span> <span class="comment"># eureka的服务名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># eureka的地址信息</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><p>使用<code>@EnableEurekaServer</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尝试访问 Eureka <a href="http://127.0.0.1:10086/">http://127.0.0.1:10086/</a></p><h3 id="向-Eureka-注册服务"><a href="#向-Eureka-注册服务" class="headerlink" title="向 Eureka 注册服务"></a>向 Eureka 注册服务</h3><p>在其他的服务模块中使用 maven 引入客户端依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--eureka客户端依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以 order-service 为例，spring.application.name 将会成为服务名称，也就是下面 yml 的 orderservice，然后重新启动 order-service</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8088</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://mysql:3306/cloud_order?useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">orderservice</span></span><br></pre></td></tr></table></figure><h4 id="将服务的多个实例注册到-Eureka"><a href="#将服务的多个实例注册到-Eureka" class="headerlink" title="将服务的多个实例注册到 Eureka"></a>将服务的多个实例注册到 Eureka</h4><p>我们 copy 一份 Configuration，为了避免端口冲突，修改端口<br><img src="/img/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%88/2023-06-11-22-43-18.png"><br>尝试访问 Eureka <a href="http://127.0.0.1:10086/">http://127.0.0.1:10086/</a><br><img src="/img/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%88/2023-06-11-22-51-53.png"><br>可以看到 order-service 注册了两个实例<br>根据端口判断，user-service 也注册了的，不过因为没有在 yml 配置 spring.application.name 所以显示 UNKNOWN</p><h3 id="Eureka-负载均衡（服务发现）"><a href="#Eureka-负载均衡（服务发现）" class="headerlink" title="Eureka 负载均衡（服务发现）"></a>Eureka 负载均衡（服务发现）</h3><p>现在假设我们的服务是 order, user, user2<br>实际上是基于这一节：<a href="#%E8%B7%A8%E8%B6%8A%E6%9C%8D%E5%8A%A1%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8">跨越服务的远程调用</a>的基础上添加了一个 user-service 也就是 user2 实例，那么我们如何在 order 服务中为 user 服务的两个实例做请求时的负载均衡呢<br>这里的 RestTemplate 与之前相比，还使用了<code>@LoadBalanced</code>，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//order-service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建RestTemplate并注入Spring容器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用了服务名称替代 ip 作为代码里的 url<br><code>&quot;http://userservice/user/&quot;</code><br><code>&quot;http://localhost:8081/user/&quot;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Order <span class="title function_">queryOrderById</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.查询订单</span></span><br><span class="line">    <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.findById(orderId);</span><br><span class="line">    <span class="comment">// 2.利用RestTemplate发起http请求，查询用户</span></span><br><span class="line">    <span class="comment">// 2.1.url路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://userservice/user/&quot;</span> + order.getUserId();</span><br><span class="line">    <span class="comment">// 2.2.发送http请求，实现远程调用</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(url, User.class);</span><br><span class="line">    <span class="comment">// 3.封装user到Order</span></span><br><span class="line">    order.setUser(user);</span><br><span class="line">    <span class="comment">// 4.返回</span></span><br><span class="line">    <span class="keyword">return</span> order;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%88/2023-06-04-23-50-51.png" alt="第一章_跨越服务的远程调用"><br>然后重新编译运行 order 服务，清空 user，user2 的 log，请求几次 order，通过观察 user 和 user2 的 log 可以判断负载均衡是否正常启动</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript模块化</title>
      <link href="/2023/04/08/JavaScript%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>/2023/04/08/JavaScript%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="模块化历史的步伐"><a href="#模块化历史的步伐" class="headerlink" title="模块化历史的步伐"></a>模块化历史的步伐</h2><h3 id="项目只用单个-js-文件"><a href="#项目只用单个-js-文件" class="headerlink" title="项目只用单个 js 文件"></a>项目只用单个 js 文件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    ……</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> buildWorld = ……</span></span><br><span class="line"><span class="language-javascript">    ……</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> buildWorld = ……</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>被直接定义的变量太多时<br>存在 Global 被污染，出现命名冲突问题</p><h3 id="项目使用多个-js-文件"><a href="#项目使用多个-js-文件" class="headerlink" title="项目使用多个 js 文件"></a>项目使用多个 js 文件</h3><p>将单个 js 拆分，通过引用请求外部的多个 js 文件，这些 js 通常会是按功能拆分或者按页面拆分，当然还有部分是第三方 js 依赖</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;outside1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;outside2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;outside3.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">……</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//outside1.js</span></span><br><span class="line">……</span><br><span class="line"><span class="keyword">var</span> buildWorld = ……</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//outside2.js</span></span><br><span class="line">……</span><br><span class="line"><span class="keyword">var</span> buildWorld = ……</span><br></pre></td></tr></table></figure><p>被直接定义的变量太多时<br>存在 Global 被污染，出现命名冲突问题<br>而且引用外部 js 过多时，存在请求过多的问题<br>还有这些多个 js 文件的顺序依赖问题</p><h3 id="简单封装对象"><a href="#简单封装对象" class="headerlink" title="简单封装对象"></a>简单封装对象</h3><p>通过在对象里存放变量名来封装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ai.js</span></span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">AI</span> = &#123;</span><br><span class="line">    <span class="attr">enCode</span>: <span class="keyword">function</span>(<span class="params">str</span>)&#123;<span class="comment">//todo enCode str&#125;,</span></span><br><span class="line">    <span class="attr">deCode</span>: <span class="keyword">function</span>(<span class="params">str</span>)&#123;<span class="comment">//todo deCode str&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们还是通过引入外部 js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;ai.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="variable constant_">AI</span>.<span class="title function_">enCode</span>(str);</span><br><span class="line"><span class="variable constant_">AI</span>.<span class="title function_">deCode</span>(str);</span><br></pre></td></tr></table></figure><p>对象的值可以被改变，是不安全的</p><h3 id="IIFE-立即执行函数"><a href="#IIFE-立即执行函数" class="headerlink" title="IIFE 立即执行函数"></a>IIFE 立即执行函数</h3><p>引用 IIFE 立即执行函数是安全的，在使用时立即执行，执行完毕就销毁 IIFE 内的变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//iife.js</span></span><br><span class="line"><span class="keyword">var</span> hw = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//这里是安全的</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">a</span>: a,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hw1 = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// …</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hw2 = (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">// …</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>然后引用这个外部 js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;iife.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hw.<span class="title function_">a</span>();</span><br></pre></td></tr></table></figure><h3 id="基于-IIFE-安全操作形参"><a href="#基于-IIFE-安全操作形参" class="headerlink" title="基于 IIFE 安全操作形参"></a>基于 IIFE 安全操作形参</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//形参$</span></span><br><span class="line"><span class="keyword">var</span> hw = (<span class="keyword">function</span> (<span class="params">$</span>) &#123;</span><br><span class="line">  <span class="comment">//we can use jq now</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//这里是安全的</span></span><br><span class="line">    <span class="comment">//use jq</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">a</span>: a,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)(<span class="title class_">Jquery</span>);</span><br><span class="line"><span class="comment">//实参Jquery</span></span><br></pre></td></tr></table></figure><h2 id="模块化历史步伐存在的问题"><a href="#模块化历史步伐存在的问题" class="headerlink" title="模块化历史步伐存在的问题"></a>模块化历史步伐存在的问题</h2><p>请求过多<br>依赖模糊，存在引入 js 顺序问题<br>难以维护<br><code>后面的模块化规范就是用来解决这些问题的</code></p><h2 id="模块化规范"><a href="#模块化规范" class="headerlink" title="模块化规范"></a>模块化规范</h2><h3 id="CommonJS-browserify-x2F-webpack"><a href="#CommonJS-browserify-x2F-webpack" class="headerlink" title="CommonJS + (browserify &#x2F; webpack)"></a>CommonJS + (browserify &#x2F; webpack)</h3><p>每一个 js 文件都可以当作一个模块<br>在服务器端运行，模块的加载是运行时同步加载的，多模块存在阻塞问题<br>在浏览器端运行，模块需要提前编译打包处理，比如 require 语法浏览器不认识</p><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><p><code>module.exports = value</code><br><code>exports.xxx = value</code></p><p><code>require(xxx)</code><br><code>require(zzz/xxx)</code></p><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><h5 id="服务端-nodejs"><a href="#服务端-nodejs" class="headerlink" title="服务端 nodejs"></a>服务端 nodejs</h5><p>npm 是 nodejs 的包管理器，现在安装 nodejs 后自带 npm ，当然业内还存在有 yarn 等其他包管理器</p><p>我们假设你已经预先安装配置好了 nodejs + npm 环境<br>那么我们可以在命令行，使用<code>npm init</code>初始化一个 npm 项目<br>这将会生成一个 package.json 文件，如果你需要使用<code>npm install</code>安装使用其他第三方模块或者将来需要打包的话，这个<code>package.json</code>文件是必须的。<br><img src="/img/JavaScript%E6%A8%A1%E5%9D%97%E5%8C%96/2023-04-08-15-24-30.png"><br>编写代码 md01.js 和 server.js 然后使用 node 运行<br>通过 node 运行成功<br><img src="/img/JavaScript%E6%A8%A1%E5%9D%97%E5%8C%96/2023-04-08-16-46-49.png"><br>md01.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;md01_f1 run~~&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;md01_f2 run~~&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">o1</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;mysql&quot;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="string">&quot;3306&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">o2</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;mariadb&quot;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="string">&quot;3306&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">cfg</span>: <span class="string">&quot;current used cfg001&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// exports.f1=function()&#123;</span></span><br><span class="line"><span class="comment">// console.log(&#x27;md01_f1 run~~&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// exports.f2=function()&#123;</span></span><br><span class="line"><span class="comment">// console.log(&#x27;md01_f2 run~~&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// exports.o1=&#123;</span></span><br><span class="line"><span class="comment">// name:&#x27;mysql&#x27;,</span></span><br><span class="line"><span class="comment">// port:&#x27;3306&#x27;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// exports.o2=&#123;</span></span><br><span class="line"><span class="comment">// name:&#x27;mariadb&#x27;,</span></span><br><span class="line"><span class="comment">// port:&#x27;3306&#x27;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// exports.cfg=&#x27;current used cfg002&#x27;</span></span><br></pre></td></tr></table></figure><p>server.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> md01 = <span class="built_in">require</span>(<span class="string">&quot;./md01&quot;</span>);</span><br><span class="line"></span><br><span class="line">md01.<span class="title function_">f1</span>();</span><br><span class="line"></span><br><span class="line">md01.<span class="title function_">f2</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(md01.<span class="property">o1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(md01.<span class="property">o2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(md01.<span class="property">cfg</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// md01(); 如果exports对象是一个函数时</span></span><br></pre></td></tr></table></figure><h5 id="浏览器端-webpack-打包"><a href="#浏览器端-webpack-打包" class="headerlink" title="浏览器端 webpack 打包"></a>浏览器端 webpack 打包</h5><p>用户只关心 js 文件有没有正常加载，不关心你的开发者的开发过程。<br>所以开发者通常只有在发布最终浏览器软件产品阶段时，会把引入的多个 js 通过 webpack 打包到单独一个 js 文件中去，而在开发阶段还是使用多个 js，这样一来就可以在这些多个 js 里面愉快地使用 CommonJS 模块化规范进行软件开发了<br><code>npm install webapck webpack-cli</code><br>按照 webpack 官方的教程，把 webpack.config.js 添加在根目录<br>按照配置，dist 是打包后输出的位置，src 是我们编写的源代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/app.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;app.js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们通过在 app.js 使用 require 引用其他模块，再通过 webpack 打包<br><code>npx webpack</code><br><img src="/img/JavaScript%E6%A8%A1%E5%9D%97%E5%8C%96/2023-04-08-20-36-41.png"><br>因为是浏览器端运行，所以至少需要一个 html，并且我们最后在浏览器运行时引用的是打包后的 js<br>为了方便 src 路径填写，我直接 copy 那个 index.html 到 dist 里</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打包通过浏览器运行成功<br><img src="/img/JavaScript%E6%A8%A1%E5%9D%97%E5%8C%96/2023-04-08-20-40-45.png"></p><h3 id="ES6-模块化-webpack"><a href="#ES6-模块化-webpack" class="headerlink" title="ES6 模块化 + webpack"></a>ES6 模块化 + webpack</h3><p>谈到 ES6，那要唠嗑的可太多了，那我们暂时先把模块化缓一缓，<br>JavaScript 是要遵循 ECMAScript 规范的，即使是在浏览器运行 JavaScript 也是如此。<br>而浏览器添加 ECMAScript 规范需要浏览器软件做相应的适配，需要花费一定的时间。<br>所以 ECMAScript 规范的时间总是先于浏览器适配的时间，因为这不是同一伙人。<br>在浏览器没做适配前，是无法运行最新的 ECMAScript 的。<br>ES6 只是 ECMAScript 的其中之一……</p><h4 id="ES6js-babel-x3D-浏览器可识别的-js"><a href="#ES6js-babel-x3D-浏览器可识别的-js" class="headerlink" title="ES6js + babel &#x3D; 浏览器可识别的 js"></a>ES6js + babel &#x3D; 浏览器可识别的 js</h4><p>可能有人会说，我不想学，反正浏览器现在也不支持 ES6，所以我不能使用 ES6.<br>但是，别担心，我们有一种叫做 babel 的东西。ECMAScript 一直在发布新版本，而不必等待浏览器实现兼容，babel 可以将新版本的 ECMAScript 应用在浏览器上<br><img src="/img/JavaScript%E6%A8%A1%E5%9D%97%E5%8C%96/2024-09-16-14-33-46.png"></p><h4 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h4><h5 id="Closures-闭包"><a href="#Closures-闭包" class="headerlink" title="Closures 闭包"></a>Closures 闭包</h5><p>闭包发生在函数中嵌套定义函数时，子函数能够读取并存储父函数的局部变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;Mozilla&quot;</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">displayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> displayName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myFunc = <span class="title function_">makeFunc</span>();</span><br><span class="line"><span class="title function_">myFunc</span>();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">makeFunc</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">&quot;Mozilla&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">displayName</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">alert</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> displayName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myFunc = <span class="title function_">makeFunc</span>();</span><br><span class="line"><span class="title function_">myFunc</span>();</span><br><span class="line"><span class="comment">//myFunc() 会执行到alert，并弹出name定义的字符串Mozilla</span></span><br><span class="line"><span class="comment">//因为const myFunc存储的是一个子函数displayName，而子函数又可以访问父函数定义的局部变量name</span></span><br></pre></td></tr></table></figure><h5 id="Currying-柯里化"><a href="#Currying-柯里化" class="headerlink" title="Currying 柯里化"></a>Currying 柯里化</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">multipy</span> = (<span class="params">a, b</span>) =&gt; a * b;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">multipy</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//柯里化就是将多个param的函数拆分成一系列函数，每一个拆分后的函数都只有一个param，父函数return子函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">curriedMultipy</span> = (<span class="params">a</span>) =&gt; <span class="function">(<span class="params">b</span>) =&gt;</span> a * b</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">curriedMultipy</span> = (<span class="params">a</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们前面已经将多个参数柯里化，那如何调用呢</span></span><br><span class="line"><span class="title function_">curriedMultipy</span>(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//比如我们这里先用一个3，这个3就对应第一个函数中的参数a，所以得到第一个函数return的结果，也就是第二个函数</span></span><br><span class="line"><span class="comment">//(b) =&gt; &#123; return a * b &#125;</span></span><br><span class="line"><span class="comment">//但是，又因为有闭包，所以实际上在第二个函数中a是已知的</span></span><br><span class="line"><span class="comment">//(b) =&gt; &#123; return 3 * b &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//那么第二个函数的参数b如何传入呢？</span></span><br><span class="line"><span class="title function_">curriedMultipy</span>(<span class="number">3</span>)(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//a=3</span></span><br><span class="line"><span class="comment">//(b) =&gt; &#123; return 3 * b &#125;</span></span><br><span class="line"><span class="comment">//b=4</span></span><br><span class="line"><span class="comment">//(4) =&gt; &#123; return 3 * 4 &#125;</span></span><br><span class="line"><span class="comment">//12</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//然后你会发现，可以复用上面柯里化后的函数制造一个5乘以任何数的函数</span></span><br><span class="line"><span class="keyword">const</span> multipyBy5 = <span class="title function_">curriedMultipy</span>(<span class="number">5</span>);</span><br><span class="line"><span class="title function_">multipyBy5</span>(<span class="number">2</span>);<span class="comment">//10</span></span><br><span class="line"><span class="title function_">multipyBy5</span>(<span class="number">4</span>);<span class="comment">//20</span></span><br><span class="line"><span class="comment">//改一下参数就能改变函数的用途</span></span><br><span class="line"><span class="keyword">const</span> multipyBy7 = <span class="title function_">curriedMultipy</span>(<span class="number">7</span>);</span><br><span class="line"><span class="comment">//嗯，这么一来，柯里化，简直是个函数工厂……</span></span><br></pre></td></tr></table></figure><h5 id="Compose-组合函数"><a href="#Compose-组合函数" class="headerlink" title="Compose 组合函数"></a>Compose 组合函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在compose组合函数上，将另外的任意函数作为compose组合函数的param。</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">compose</span> = (<span class="params">f, g</span>) =&gt; <span class="function">(<span class="params">a</span>) =&gt;</span> <span class="title function_">f</span>(<span class="title function_">g</span>(a));</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">compose</span> = (<span class="params">f, g</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">f</span>(<span class="title function_">g</span>(a));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">num</span>) =&gt; num + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如何调用上面定义的compose组合函数呢？</span></span><br><span class="line"><span class="title function_">compose</span>(sum, sum)(<span class="number">5</span>);</span><br><span class="line"><span class="comment">//f=sum(num)</span></span><br><span class="line"><span class="comment">//g=sum(num)</span></span><br><span class="line"><span class="comment">//(a) =&gt; &#123;return f(g(a))&#125;</span></span><br><span class="line"><span class="comment">//a=5, num=5</span></span><br><span class="line"><span class="comment">//(5) =&gt; &#123;return sum(sum(5))&#125;</span></span><br><span class="line"><span class="comment">//7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//上面列举了compose组合函数的工作流程</span></span><br><span class="line"><span class="comment">//实际上，可以组合到只剩下一个函数</span></span><br><span class="line"><span class="keyword">const</span> composeDoubleSum = <span class="title function_">compose</span>(sum, sum);</span><br><span class="line"><span class="keyword">const</span> composeDoubleSum = <span class="title function_">compose</span>(<span class="function"><span class="params">num</span>=&gt;</span>num+<span class="number">1</span>, <span class="function"><span class="params">num</span>=&gt;</span>num+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> composeFinalOnlyOneFunBuildNum = <span class="title function_">compose</span>(<span class="function"><span class="params">num</span>=&gt;</span>num+<span class="number">1</span>, <span class="function"><span class="params">num</span>=&gt;</span>num+<span class="number">1</span>);</span><br><span class="line"><span class="title function_">composeFinalOnlyOneFunBuildNum</span>(<span class="number">5</span>);</span><br><span class="line"><span class="comment">//compose(sum, sum)(5);</span></span><br></pre></td></tr></table></figure><h4 id="ES6-map-filter-reduce"><a href="#ES6-map-filter-reduce" class="headerlink" title="ES6 map filter reduce"></a>ES6 map filter reduce</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapArray = array.<span class="title function_">map</span>(<span class="function"><span class="params">element</span> =&gt;</span> element+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> mapArray = array.<span class="title function_">map</span>(<span class="function">(<span class="params">element</span>) =&gt;</span> &#123;<span class="keyword">return</span> element+<span class="number">1</span>&#125;);</span><br><span class="line"><span class="comment">//[2,4,6,8,10]</span></span><br><span class="line"><span class="comment">//map end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array2nd = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filterArray = array2nd.<span class="title function_">filter</span>(<span class="function"><span class="params">element</span> =&gt;</span> element%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> filterArray = array2nd.<span class="title function_">filter</span>(<span class="function">(<span class="params">element</span>) =&gt;</span> &#123;<span class="keyword">return</span> element%<span class="number">2</span> == <span class="number">0</span>&#125;)</span><br><span class="line"><span class="comment">//[,2,4,6,8,10]</span></span><br><span class="line"><span class="comment">//filter end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array3rd = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> reduceArray = array3rd.<span class="title function_">reduce</span>(<span class="function">(<span class="params">accumulator,element</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> accumulator + element</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//0+0+1+3</span></span><br><span class="line"><span class="keyword">const</span> reduceArray = array3rd.<span class="title function_">reduce</span>(<span class="function">(<span class="params">accumulator,element</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> accumulator + element</span><br><span class="line">&#125;, <span class="number">6</span>);</span><br><span class="line"><span class="comment">//6+0+1+3</span></span><br><span class="line"><span class="comment">//reduce end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微积分</title>
      <link href="/2023/04/05/%E5%BE%AE%E7%A7%AF%E5%88%86/"/>
      <url>/2023/04/05/%E5%BE%AE%E7%A7%AF%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>把你从最初的恐惧中解救出来，</p><h2 id="消除恐惧"><a href="#消除恐惧" class="headerlink" title="消除恐惧"></a>消除恐惧</h2><p>只要简单地用常识说明计算中使用的两个主要符号的含义，这种初步的恐惧就可以彻底消除。</p><ul><li>dx 微分</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Thus dx means a little bit of x; or du means a little bit of u. Ordinary mathematicians think it more polite to say “an element of,”</span><br><span class="line">instead of “a little bit of.”</span><br></pre></td></tr></table></figure><p>因此 dx 表示 x 的一点点；或者 du 表示 u 的一点点。或者普通数学家认为说“一个元素”更为礼貌</p><ul><li>∫ 积分<br>积分这个词的意思就是整体。如果你把一小时想象成一段时间，你可以(如果你喜欢的话)把它想象成 3600 个叫做秒的小片段。3600 个小片段加起来就是一个小时。当你看到一个以这个可怕的符号开头的表达式时，你就会知道，它放在那里只是为了给你指令，让你现在执行(如果你可以的话)把后面的符号所表示的所有小比特加起来。就是如此。</li></ul><p>如果考虑 x 由很多小块组成，每个小块都称为 dx，如果你将它们全部加起来，你得到所有 dx 的总和，与整个 x 相同。 “积分”一词的意思是<br>所有的。</p><h2 id="不同程度的小（无穷小）"><a href="#不同程度的小（无穷小）" class="headerlink" title="不同程度的小（无穷小）"></a>不同程度的小（无穷小）</h2><p>因此，理性主义者观察到，跳蚤身上有捕食它的小跳蚤。它们有更小的跳蚤来咬它们，就这样无限发展下去。一头牛可能会担心一只普通大小的跳蚤——一种最小的小生物。不过，他大概不会为一只跳蚤的跳蚤而烦恼;由于它是第二级的小，所以可以忽略不计。即使是一大堆跳蚤对牛来说也不算什么</p><h2 id="相对增长"><a href="#相对增长" class="headerlink" title="相对增长"></a>相对增长</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>推荐系统</title>
      <link href="/2023/01/11/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/01/11/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="推荐系统需求"><a href="#推荐系统需求" class="headerlink" title="推荐系统需求"></a>推荐系统需求</h2><p>个性化新闻推荐系统<br>用基于内容推荐算法，根据用户第一次浏览内容推荐<br>第一次进让用户选择喜欢的关键词，然后根据关键词筛选新闻，后面根据用户上一次浏览内容推荐<br>把推荐的全部在一个页面显示</p><h2 id="可能涉及的技术板块"><a href="#可能涉及的技术板块" class="headerlink" title="可能涉及的技术板块"></a>可能涉及的技术板块</h2><p><img src="/img/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/jiQiXueXi.drawio.svg" alt="主流板块路线"><br>主线板块大概是<code>人工智能 -&gt; 机器学习 -&gt; 监督学习 -&gt; 神经网络</code><br><img src="/img/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/2023-01-11-21-55-03.png" alt="人工智能其中之一 机器学习"></p><p><img src="/img/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/2023-01-11-21-58-37.png" alt="机器学习热门板块 神经网络"></p><h2 id="现有案例"><a href="#现有案例" class="headerlink" title="现有案例"></a>现有案例</h2><h2 id="什么是推荐系统"><a href="#什么是推荐系统" class="headerlink" title="什么是推荐系统"></a>什么是推荐系统</h2><p>推荐系统是机器学习中的重要应用之一，帮助你在海量内容中推荐符合用户的内容<br>能够让用户在不主动搜索寻找的情况下更快发现感兴趣的内容，虽然这都是被动受到推荐系统推荐的内容</p><h2 id="为什么推荐系统很重要"><a href="#为什么推荐系统很重要" class="headerlink" title="为什么推荐系统很重要"></a>为什么推荐系统很重要</h2><p>提升应用程序中的用户活跃度，沉浸式体验，更好地服务用户<br>电商推荐系统，不是为用户服务的，是奸商用来大数据杀熟的</p><h2 id="现代的推荐系统是怎么样的"><a href="#现代的推荐系统是怎么样的" class="headerlink" title="现代的推荐系统是怎么样的"></a>现代的推荐系统是怎么样的</h2><p>利用用户的过往行为，来预测接下来的推荐内容</p><h2 id="tensorflow-推荐系统"><a href="#tensorflow-推荐系统" class="headerlink" title="tensorflow 推荐系统"></a>tensorflow 推荐系统</h2><p>最好具有机器学习背景，并且熟悉 tensorflow2<br>什么是 embedding，如何使用 keras 训练和搭建神经网络，并进行特征工程……</p><h3 id="多个组件"><a href="#多个组件" class="headerlink" title="多个组件"></a>多个组件</h3><p>大多数基于神经网络的推荐系统会由多个组件组合构成<br>召回 -&gt; 粗排 -&gt;精排<br>以此来保证推荐内容的多样性、新鲜性、公平性<br><img src="/img/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/2023-01-13-23-21-35.png"></p><h3 id="推荐系统的难点"><a href="#推荐系统的难点" class="headerlink" title="推荐系统的难点"></a>推荐系统的难点</h3><ul><li>训练<br>高维度、稀疏的大规模模型<br>embedding 的词汇表通常会达到千万级别，甚至更多</li><li>多目标优化<br>比如视频的点赞、差评、分享、评论…… 应该优化哪一个目标？</li><li>评估<br>不能单纯依赖点击量评估，因为存在刷点击量的行为，需要多目标优化<br>评估往往不是永远都有那么高的准确率，随着时代发展，可能存在没有预见的目标被我们忽略</li><li>部署<br>数据量太大，不能使用简单的 softmax，我们需要更高效的召回系统</li></ul><h3 id="google-开源的几款产品"><a href="#google-开源的几款产品" class="headerlink" title="google 开源的几款产品"></a>google 开源的几款产品</h3><p>如果你想从零开始搭建推荐系统，建议使用 tensorflow recommenders 和 tensorflow ranking</p><p>tensorflow recommenders<br>与<code>scala</code>无缝集成，实现高效召回<br>与 tf ranking 集成实现高效排序<br>与 tpu 集成实现训练大规模模型</p><ul><li>ScaNN（scalable nearest neighbors）<br>快速匹配和召回相似候选条目<br>树状空间分割、非对称哈希、量化、倒排索引……</li></ul><p>机器学习模型可以将文本、图像等输入转化为 embedding，embedding 是经过训练的高维向量，使得更多相似的输入能够聚集在一起</p><ul><li>tensorflow ranking<br>推荐内容的相对顺序非常重要，因为展示推荐内容的屏幕大小有限，所以排序十分重要</li></ul><h2 id="基于内容过滤"><a href="#基于内容过滤" class="headerlink" title="基于内容过滤"></a>基于内容过滤</h2><p>根据候选条目的相似性<br>例如我们为如图 4 条新闻贴标签，当用户点击浏览了第一条含有 education 标签的新闻后，那么我们可以尝试推荐同样包含 education 标签的第四条新闻<br><img src="/img/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/2023-01-11-22-49-06.png"><br>容易偏科</p><h2 id="协同过滤"><a href="#协同过滤" class="headerlink" title="协同过滤"></a>协同过滤</h2><p>第一个用户看了哈利波特，史莱克，黑暗骑士<br>又因为第三个用户也观看了哈利波特和史莱克，但没观看黑暗骑士<br>那么我们可以将黑暗骑士推荐给第三个用户<br><img src="/img/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/2023-01-11-22-58-52.png"></p><h2 id="用矩阵分解进行协同过滤"><a href="#用矩阵分解进行协同过滤" class="headerlink" title="用矩阵分解进行协同过滤"></a>用矩阵分解进行协同过滤</h2><p><img src="/img/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/2023-01-11-23-28-03.png"></p><p>在机器学习中，这些 embedding 往往具有更高的维度，我们这里暂时讨论 二维 embedding 的情况，如图所示用户和电影的 embedding 都是二维的<br><img src="/img/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/2023-01-14-11-29-39.png"><br>我们可以通过用户矩阵 U 和电影矩阵 V，求点积 dot product<br>不同维度的点积计算方法是不一样的，</p><p>1x0.9 + 0.1x(-2) &#x3D; 0.88<br><img src="/img/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/2023-01-14-12-35-29.png"><br>至此，我们的优化目标为：<br>最小化 反馈标签 和 预测反馈之间的平方差之和<br><img src="/img/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/2023-01-14-12-38-58.png"><br>需要求解最优的 用户矩阵 和 商品矩阵<br>因为最优的 用户矩阵 和 商品矩阵计算出的预测反馈矩阵与实际反馈矩阵差距是最小的<br><img src="/img/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/2023-01-28-01-11-43.png"><br>如果没有收集到用户反馈，也就是存在 Aij 为空时，在 SVD 中使用 0 表示空的 Aij 也不靠谱，实际应用中 SVD 往往非常稀疏，使用 Weighted MF 更合适<br><img src="/img/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/2023-01-14-12-40-47.png"></p><h2 id="什么是推荐系统-1"><a href="#什么是推荐系统-1" class="headerlink" title="什么是推荐系统"></a>什么是推荐系统</h2><p>推荐系统就是自动联系用户和物品的一种工具，它能够在信息过载的环境中帮助用户发现令他们感兴趣的信息，也能将信息推送给对它们感兴趣的用户。</p><p>分类 -&gt; 搜索引擎 -&gt; 推荐系统</p><p>用户有明确目标时可以主动通过分类找到想要的内容。<br>和搜索引擎一样，推荐系统也是一种帮助用户快速发现有用信息的工具。和搜索引擎不同的是，推荐系统不需要用户提供明确的需求，而是通过分析用户的历史行为给用户的兴趣建模，从而主动给用户推荐能够满足他们兴趣和需求的信息。因此，从某种意义上说，推荐系统和搜索引擎对于用户来说是两个互补的工具。搜索引擎满足了用户有明确目的时的主动查找需求，而推荐系统能够在用户没有明确目的的时候帮助他们发现感兴趣的新内容。</p><h2 id="建模数据的来源"><a href="#建模数据的来源" class="headerlink" title="建模数据的来源"></a>建模数据的来源</h2><p>标签来源，开发者人工标注，用户行为（浏览记录，搜索记录，去过的地方，当前位置，购买、收藏、点赞、评论、关注等等……）<br>利用用户通过图片验证码标注（视物品数量可能需要大量用户和较长时间）</p><h2 id="推荐系统评测"><a href="#推荐系统评测" class="headerlink" title="推荐系统评测"></a>推荐系统评测</h2><p>推荐系统的重要指标是预测准确度</p><p>虽然有的时候推荐系统不一定帮得上忙，比如我已经打算买《数据库教程》这本书，只是没时间去买，结果还给我推荐……</p><p>好的推荐系统不仅仅能够准确预测用户的行为，而且能够扩展用户的视野，帮助用户<br>发现那些他们可能会感兴趣，但却不那么容易发现的东西。</p><p>推荐系统是能够影响三者的利益的：用户，商家（商品），应用（网站）</p><h2 id="推荐系统实验方法"><a href="#推荐系统实验方法" class="headerlink" title="推荐系统实验方法"></a>推荐系统实验方法</h2><ul><li>离线实验<br>收集用户的历史行为数据通常是数据库的记录，设计并训练模型，设计测试数据来测试预测的结果<br>无法获得实时的数据指标，点击率，转化率等……</li><li>用户调查<br>挑选人员来充当用户进行测试，<br>人力成本高，参与测试人员少导致结果意义不大<br>需要尽量保证测试用户的分布和真实用户的分布相同，比如男女各半，以及年龄、活跃度的分布都和真实用户分布尽量相同。此外，用户调查要尽量保证是双盲实验，不要让实验人员和用户事先知道测试的目标，以免用户的回答和实验人员的测试受主观成分的影响</li><li>在线实验<br>将推荐系统部署上线做 AB 测试，将新系统和旧系统并行作比较<br>系统庞大，部署时间长，需要控制变量，正交分解流量，比如可能该流量来自于页面推荐算法也可能来自于后端推荐算法，或者两者都有……</li></ul><h2 id="推荐系统评测指标"><a href="#推荐系统评测指标" class="headerlink" title="推荐系统评测指标"></a>推荐系统评测指标</h2><h3 id="用户满意度"><a href="#用户满意度" class="headerlink" title="用户满意度"></a>用户满意度</h3><p>不是单纯的满意&#x2F;不满意<br>而是具体到在系统（网站）中的某些行为，对商品各方面的满意度<br>还可以通过点击率、用户停留时间和转化率等来度量用户满意度</p><h3 id="预测准确度"><a href="#预测准确度" class="headerlink" title="预测准确度"></a>预测准确度</h3><p>一般指预测用户行为的能力，本文主要讨论 topN 推荐</p><ul><li>评分预测<br>评分也是一种用户行为，比如五星好评，预测用户对未来某个商品的评分，但是购买后不一定会评价，又或许是因为内心评价高了才购买？如果没有购买那就没有评价？我认为评价还可以细分为售前和售后<br>售前：所见所闻，某些渠道体验使用<br>售后：用户切切实实的使用体验</li><li>topN 推荐<br>用户下一步对该商品的行为</li></ul><h3 id="覆盖率"><a href="#覆盖率" class="headerlink" title="覆盖率"></a>覆盖率</h3><p>覆盖率 &#x3D; 向全部用户推荐出去的物品数 &#x2F; 总物品数<br>直接用上面的式子计算覆盖率太过粗略，即使覆盖率 100%也不能绝对表示覆盖率高，除非这个分布比较平，当然了通常分布都是倾斜陡峭的，那实际覆盖率是达不到 100%的</p><p>一般覆盖率还使用 信息熵（评估陡峭） 和 基尼系数（评估马太效应） 来评估</p><p>需要尽量避免马太效应，强者更强，弱者更弱，热搜的越热，冷门的越冷，避免这种现象</p><p>G1、G2 忘了配图了，下面这段话没图看不懂可以先跳过……<br>如果 G1 是从初始用户行为中计算出的物品流行度的基尼系数，G2 是从推荐列表中计算出的物品流行度的基尼系数，那么如果 G2 &gt; G1，就说明推荐算法具有马太效应。</p><h3 id="多样性"><a href="#多样性" class="headerlink" title="多样性"></a>多样性</h3><p>如果推荐列表只能覆盖用户的一个兴趣点，而这个兴趣点不是用户这个时刻的兴趣点，推荐列表就不会让用户满意。反之，如果推荐列表比较多样，覆盖了用户绝大多数的兴趣点，那么就会增加用户找到感兴趣物品的概率。因此给用户的推荐列表也需要满足用<br>户广泛的兴趣，即具有多样性。</p><p>多样性描述了物品两两之间的不相似性</p><h3 id="新颖性"><a href="#新颖性" class="headerlink" title="新颖性"></a>新颖性</h3><p>用户在本系统和别的网站系统或者现实生活中都没看过的<br>评测新颖度的最简单方法是利用推荐结果的平均流行度，因为越不热门的物品越可能让用户觉得新颖</p><h3 id="惊喜度"><a href="#惊喜度" class="headerlink" title="惊喜度"></a>惊喜度</h3><p>提高推荐惊喜度需要提高推荐结果的用户满意度，同时降低推荐结果和用户历史兴趣的相似度。很显然，我们知道该这么做，但是我们又不能这么做……你没办法提前知道用户尝试兴趣之外的事物后是否对这个事务作为新的兴趣</p><h3 id="信任度"><a href="#信任度" class="headerlink" title="信任度"></a>信任度</h3><ul><li>朋友信任度<br>如果你有两个朋友，一个人你很信任，另一个人经常满嘴跑火车编故事，相比你更信任第一个推荐的物品</li><li>推荐系统信任度<br>提高推荐系统对用户的透明度，向用户解释推荐系统推荐该物品的理由原理</li></ul><h3 id="实时性"><a href="#实时性" class="headerlink" title="实时性"></a>实时性</h3><p>新闻系统推荐昨天的新闻不如推荐当天的新闻<br>用户购买 iPhone 后立马实时推荐 iPhone 配件<br>如果推荐列表在用户有行为后变化不大，或者没有变化，说明推荐系统的实时性不高。</p><h3 id="健壮性"><a href="#健壮性" class="headerlink" title="健壮性"></a>健壮性</h3><p>像搜索引擎那样，推荐系统也能通过作弊被利用来获利<br>聊天评论区的网络水军，给自家产品刷好评，恶意差评竞争对手<br>刷商品的购买量<br>数据是可以作假的，只要有利益关系，那么作弊行为就屡禁不止……<br>在使用数据前，进行作弊攻击检测，从而对数据进行清理限流等</p><h2 id="评测维度"><a href="#评测维度" class="headerlink" title="评测维度"></a>评测维度</h2><p>一个推荐算法，可能在某些情况下取得的效果不是很好，我们需要发掘出一个算法在什么情况下效果最好，以便于尝试融合其他的推荐算法来提升推荐系统的指标，多个算法融合取长补短。</p><p>用户：性别、年龄、活跃度、新用户<br>物品：热门度、新物品、类别<br>时间：季节、工作日、周末、节假日</p><h2 id="推荐系统建议"><a href="#推荐系统建议" class="headerlink" title="推荐系统建议"></a>推荐系统建议</h2><p>（1）确定你真的需要推荐系统。推荐系统只有在用户遇到信息过载时才必要。如果你的网站物品不太多，或者用户兴趣都比较单一，那么也许并不需要推荐系统。所以不要纠结于推荐系统这个词，不要为了做推荐系统而做推荐系统，而是应该从用户的角度出发，设计出能够真正帮助用户发现内容的系统，无论这个系统算法是否复杂，只要能够真正帮助用户，就是一个好的系统。</p><p>（2）确定商业目标和用户满意度之间的关系。对用户好的推荐系统不代表商业上有用的推荐系统，因此要首先确定用户满意的推荐系统和商业上需求的差距。一般来说，有些时候用户满意和商业需求并不吻合。但是一般情况下，用户满意度总是符合企业的长期利益，因此这一条的主要观点是要平衡企业的长期利益和短期利益之间的关系。</p><p>（3）平衡数据和算法之间的关系。使用正确的用户数据对推荐系统至关重要。对用户行为数据的深刻理解是设计好推荐系统的必要条件，因此分析数据是设计系统中最重要的部分。数据分析决定了如何设计模型，而算法只是决定了最终如何优化模型。</p><p>（4） 找到相关的物品很容易，但是何时以何种方式将它们展现给用户是很困难的。不要为了推荐而推荐。</p><p>（5）不要浪费时间计算相似兴趣的用户，可以直接利用社会网络数据。</p><h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><p>人算不如机算，机算不如天算，纵使推荐系统能够很好地对用户的行为和兴趣通过计算后在页面上给出推荐结果，但任何事物都讲究天时地利人和，用户下一步要做什么，只有用户自己知道，甚至有的时候用户被胁迫了也不能点点头</p><p>在青学正式球员的比赛中，越前龙马 识破 乾 的推荐系统后，不按照历史行为出牌，反败为胜</p><p>我们获取的行为兴趣信息往往是不够全面的，仅来自于该推荐系统，那么其他推荐系统呢？现实生活呢？除了我的行为，别人的行为传递给我的视觉、嗅觉、听觉、触觉后又有什么影响？是触发了我的回忆在脑海中复现了往日的图像还是我将该画面作为新的记忆？触发了回忆或记忆后，我下一步会做什么呢？</p><p>短时间内不必追求完美，只要推荐系统用起来能够真正帮助用户，就是一个好的系统</p><p>flash 闪电侠也是在不断回滚时间线，不断尝试才战胜敌方超能力者的</p><h2 id="非常感谢"><a href="#非常感谢" class="headerlink" title="非常感谢"></a>非常感谢</h2><p>[^1]: 推荐系统实践 项亮编著 北京 人民邮电出版社 2012.6<br>[^2]: Google developer-机器学习-高级课程-推荐系统[<a href="https://developers.google.com/machine-learning/recommendation">https://developers.google.com/machine-learning/recommendation</a> ]<br>[^3]: 案例分享·从零打造推荐系统[<a href="https://www.bilibili.com/video/BV1A3411W77Y">https://www.bilibili.com/video/BV1A3411W77Y</a> ]<br>[^4]: 推荐系统入门篇·推荐系统算法有几种？[<a href="https://www.bilibili.com/video/BV1Zq4y1Y71R">https://www.bilibili.com/video/BV1Zq4y1Y71R</a> ]<br>[^5]: 推荐系统算法·矩阵分解：从 SVD 到 ALS 到 WALS [<a href="https://www.bilibili.com/video/BV1bg411X7ea">https://www.bilibili.com/video/BV1bg411X7ea</a> ]</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>集成开发工具IntelliJ IDEA</title>
      <link href="/2022/12/24/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/"/>
      <url>/2022/12/24/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/</url>
      
        <content type="html"><![CDATA[<p>IDEA 全称 IntelliJ IDEA，是 Java 编程语言的集成开发环境。免费版只支持 Java，Kotlin 等少数语言。</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>CTRL + AZXCVFR 全选，撤销，剪切，复制，粘贴，搜索，替换</p><p>使用文件内容搜索，配置后还可以过滤文件类型<br>CTRL + Shift + F<br>配置 File mask 设置后缀名属性过滤文件类型<br><code>C:\Users\henry\AppData\Roaming\JetBrains\IntelliJIdea2021.1\options\find.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">&quot;FindSettings&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;customScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;All Places&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;defaultScopeName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;All Places&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;SEARCH_SCOPE&quot;</span> <span class="attr">value</span>=<span class="string">&quot;All Places&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mask</span>&gt;</span>*.properties<span class="tag">&lt;/<span class="name">mask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mask</span>&gt;</span>*.html<span class="tag">&lt;/<span class="name">mask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mask</span>&gt;</span>*.css<span class="tag">&lt;/<span class="name">mask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mask</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">mask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mask</span>&gt;</span>*.vue<span class="tag">&lt;/<span class="name">mask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mask</span>&gt;</span>*.sql<span class="tag">&lt;/<span class="name">mask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mask</span>&gt;</span>*.js<span class="tag">&lt;/<span class="name">mask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mask</span>&gt;</span>*.yml<span class="tag">&lt;/<span class="name">mask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mask</span>&gt;</span>*.xml<span class="tag">&lt;/<span class="name">mask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mask</span>&gt;</span>*.java<span class="tag">&lt;/<span class="name">mask</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用文件名搜索<br>双击 Shift</p><p>光标增域选择<br>CTRL + W</p><p>在域内搜索<br>先 CTRL + W，再 CTRL + R</p><p>跳转到某行<br>CTRL + G</p><p>CTRL + F4 关闭标签</p><h2 id="开发调试"><a href="#开发调试" class="headerlink" title="开发调试"></a>开发调试</h2><p>ALT + 1~7 项目资源，debug 窗口，文件大纲</p><p>CTRL + Shift + ↑&#x2F;↓<br>调整 debug 窗口大小</p><p>ESC<br>返回编辑窗口</p><p>F7 进入方法的具体实现，不管是否实现类<br>F8 下一行<br>F9 下一个断点</p><p>Shift + F7 进入字节码层面的具体实现</p><p>F7 和 Shift + F7 的区别<br>对于你自己的代码 step into &#x3D; force *，对于第三方库里的代码，force 会先找 source，找不到会根据字节码生成一个</p><p>Shift + F8 进入实现后，将实现方法执行完并 return，断点到下一行</p><p>Shift + F9<br>比如当前断点在 line:3<br>我想断点直接到 line：7<br>可以先鼠标点击 line：7 行，再 Shift + F9</p><p>条件断点</p><p>表达式</p><p>结束当前方法<br>不执行当前断点和当前方法的后续内容，并强制 return<br><img src="/img/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/2022-12-24-14-01-06.png"></p><p>Stream 面板</p><p>设置异常断点</p><h2 id="代码样式规范"><a href="#代码样式规范" class="headerlink" title="代码样式规范"></a>代码样式规范</h2><p>代码样式规范还是要遵守一下的，因为在重构代码时要读懂前人之前的代码，如果团队里代码的样式模板能够统一，那就太酷了</p><p>下面折腾半天好像 code style 设置原本就支持导入 xml，可能我们已经不需要下面的插件，只需要一份合适的 xml，然后再简单自定义一下个人喜好的样式<br><a href="https://github.com/google/styleguide/blob/gh-pages/intellij-java-google-style.xml">https://github.com/google/styleguide/blob/gh-pages/intellij-java-google-style.xml</a><br><img src="/img/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/2023-06-17-00-05-16.png"><br><img src="/img/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/2023-06-16-22-45-55%20-%20Copy.png"><br><code>如果到这里样式看起来已经差不多了，那么可以跳过这一节标题了</code></p><p><code>上面只是导入了通用的样式配置，有些细节如果有追求的话可以接着下面配置</code><br>idea 自带的设置<br>java<br><img src="/img/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/2023-06-16-22-45-55.png"><br><img src="/img/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/2023-06-16-22-46-57.png"><br><img src="/img/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/2023-06-16-22-50-25.png"><br><img src="/img/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/2023-06-16-22-57-32.png"><br>json<br><img src="/img/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/2023-06-16-22-55-17.png"></p><h3 id="懒人样式"><a href="#懒人样式" class="headerlink" title="懒人样式"></a>懒人样式</h3><ul><li>导入 google code style<br>参考上面提到的导入 google code style 的 xml</li><li>开启变量和参数的 final 校验<br>Preferences&#x2F;Settings | Editor | Inspections | Java | Code Style issues | Local variable or parameter can be final</li><li>IDEA 原生支持 actions on save<br><img src="/img/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/2023-08-26-12-57-22.png"><br>在 actions on save 中我没有选 build project 是因为，我的项目不是单独在 idea 编译运行的</li></ul><h4 id="安装代码格式化插件"><a href="#安装代码格式化插件" class="headerlink" title="安装代码格式化插件"></a>安装代码格式化插件</h4><p>method 包含的参数过多<br>if 语句的 condition 过多<br>你还在来来回回滑动水平滚动条，看了右边忘了左边吗<br>自动添加 final<br>安装下面任意一款插件就可以了</p><ul><li>Save Action X<br><del>之前用 save action 插件自动添加 final，可现在插件不适配最新的 idea 了</del><br>Fork of the popular but now deprecated <code>Save Actions plugin</code> by XDEV Software.<br>好吧，现在应该用<code>Save Action X</code>插件了<br><img src="/img/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/2024-07-08-00-24-22.png"></li><li>Adapter for Eclipse Code Formatter<br>如果上面的插件有问题，那么 Adapter for Eclipse Code Formatter 插件值得你一试。<br>插件的配置如下，需要导入 xml，代码样式配置<br><img src="/img/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/2023-06-16-22-12-55.png"></li></ul><h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><p>Find usages<br>这个方法在哪被使用了？耦合点在哪？修改这个方法后可能造成的影响？<br>ALT + F7</p><p>抽取所选内容作为 method<br>CTRL + ALT + M</p><p>将所选内容在当前文件中全部添加光标进入多目标匹配编辑<br><code>CTRL + SHIFT + ALT + J</code><br>CTRL + COMMAND + G<br><img src="/img/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/2023-12-23-09-03-18.gif"></p><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>项目大起来的时候，会拆分成多个项目模块，每个模块又有多个分支，<br>这里介绍在 idea 中管理多个 project 和 branch 的情况</p><h3 id="新建一个空的父亲-project"><a href="#新建一个空的父亲-project" class="headerlink" title="新建一个空的父亲 project"></a>新建一个空的父亲 project</h3><p>新建 emptyProject 命名为 IdeaGit 作为父亲 project，并把父亲 project 从 module 中 remove 掉</p><h3 id="将项目作为多模块添加"><a href="#将项目作为多模块添加" class="headerlink" title="将项目作为多模块添加"></a>将项目作为多模块添加</h3><p>从 git 添加多个 project<br>New -&gt; Project From Version Control -&gt; projectA<br>New -&gt; Project From Version Control -&gt; projectB<br>……<br>然后把这些儿子 project 作为 module 添加到 IdeaGit 中<br><img src="/img/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/2023-05-01-21-02-28.png"></p><h3 id="本地分支更新方式"><a href="#本地分支更新方式" class="headerlink" title="本地分支更新方式"></a>本地分支更新方式</h3><p>Merge &#x2F; Rebase<br><img src="/img/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/2023-06-17-18-30-30.png"></p><h3 id="打开-git-面板"><a href="#打开-git-面板" class="headerlink" title="打开 git 面板"></a>打开 git 面板</h3><p>点击左下角的 git 按钮，或者快捷键<code>ALT + 9</code>打开 git 面板<br><img src="/img/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/2023-05-01-21-09-08.png"></p><h4 id="切换项目提交日志视图"><a href="#切换项目提交日志视图" class="headerlink" title="切换项目提交日志视图"></a>切换项目提交日志视图</h4><p><code>CTRL+鼠标左键</code>选择切换项目提交日志视图，只看某个项目<br><img src="/img/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/2023-05-01-22-37-49.png"></p><h4 id="切换-branch-提交日志视图"><a href="#切换-branch-提交日志视图" class="headerlink" title="切换 branch 提交日志视图"></a>切换 branch 提交日志视图</h4><p>只需要设置好 ① 即可，此后每选择不同的 branch，提交日志视图也随之刷新，如图中在 ② 手动选择 branch 然后看到 ③ 自动刷新<br><img src="/img/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/2023-05-01-22-52-46.png"></p><h4 id="提交和推送"><a href="#提交和推送" class="headerlink" title="提交和推送"></a>提交和推送</h4><p>感觉 idea 中的 git 操作起来弱化了暂存的概念，加快了文件的交付的速度</p><p>修改&#x2F;新增&#x2F;删除 -&gt; <code>暂存 -&gt; 提交 -&gt; 推送</code><br>修改&#x2F;新增&#x2F;删除 -&gt; <code>提交(暂存并提交) -&gt; 推送</code><br><strong>修改&#x2F;新增&#x2F;删除 -&gt; <code>提交并推送(暂存并提交并推送)</code></strong><br><img src="/img/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/2023-05-01-23-09-27.png"><br>我们改了两个文件测试一下，选择提交并推送<br><img src="/img/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/2023-05-01-23-08-46.png"><br>检查提交结果，可以看到，两个项目的提交记录<br><img src="/img/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/2023-05-01-23-17-02.png"></p><h4 id="撤销提交"><a href="#撤销提交" class="headerlink" title="撤销提交"></a>撤销提交</h4><p><code>撤销提交，保留了提交前的改动</code><br><code>Undo Commit</code>撤销所选项目节点的提交，如果你需要做一些修改再提交的话<br><img src="/img/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/2023-05-01-23-29-58.png"><br>可以看到这个项目的<code>提交被撤销了</code>，并且<code>保留了提交前的改动</code>，使用场景是在推送前需要再调试提交的代码符合预期后再重新提交推送<br><img src="/img/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/2023-05-01-23-43-21.png"></p><h4 id="回退提交"><a href="#回退提交" class="headerlink" title="回退提交"></a>回退提交</h4><p><code>Revert Commits</code>回退刚才的两个项目的提交，<code>会再新增两条用于回退的提交记录</code>如图中的 Revert “test”，版本回退应该用得上<br><img src="/img/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/2023-05-01-23-22-24.png"></p><h4 id="对比更改内容-Diff"><a href="#对比更改内容-Diff" class="headerlink" title="对比更改内容 Diff"></a>对比更改内容 Diff</h4><p>显示所选提交相对于上一次提交的更改</p><p>新版本是在标签栏打开 Diff 视图，和标签栏里的文件混在一起，挺不舒服的。个人喜欢设置成老版本的习惯在新窗口打开 Diff 视图<br><img src="/img/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/2023-06-17-17-48-40.png"><br>在新窗口打开 Diff 视图<br><img src="/img/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/2023-06-17-17-44-57.png"></p><h2 id="提供了-diff-merge-窗口的命令行接口"><a href="#提供了-diff-merge-窗口的命令行接口" class="headerlink" title="提供了 diff merge 窗口的命令行接口"></a>提供了 diff merge 窗口的命令行接口</h2><p>有的公司还是要求使用其他的 git 界面工具来管理不同的 project，方便团队交流 review<br>问了那些 AI，idea 是提供了 diff 和 merge 的命令行接口的，<br><code>idea64.exe diff &lt;file1&gt; &lt;file2&gt;</code><br><code>idea64.exe merge &lt;localFilePath&gt; &lt;remoteFilePath&gt; &lt;baseFilePath&gt; &lt;mergedFilePath&gt;</code></p><p>那么我在 Sourcetree 这边这样配即可<br><code>idea64.exe diff \&quot;$LOCAL\&quot; \&quot;$REMOTE\&quot;</code><br><code>idea64.exe merge \&quot;$LOCAL\&quot;\&quot;$REMOTE\&quot;\&quot;$BASE\&quot;\&quot;$MERGED\&quot;</code><br>测试了 diff 的是可以唤醒 idea 的 diff 界面的，不过最好是提前启动 idea 在后台，否则速度较慢</p><p>也可以将 idea64 所在的目录添加到 path 环境变量后在终端命令行输入<code>idea64 diff file1 file2</code></p><h2 id="对-MapStruct-的支持"><a href="#对-MapStruct-的支持" class="headerlink" title="对 MapStruct 的支持"></a>对 MapStruct 的支持</h2><p>安装 MapStruct Support 插件，就可以在 Converter 类中通过导航检查 sourch 和 target 是否有拼写错误了</p><h2 id="Community-版和-Ultimate-的区别"><a href="#Community-版和-Ultimate-的区别" class="headerlink" title="Community 版和 Ultimate 的区别"></a>Community 版和 Ultimate 的区别</h2><p>我在用着社区版时看到的广告<br>Features covered by IntelliJ IDEA Ultimate Spring Support, Java EE: EJB, JPA, Servlets are detected<br>结合本人社区版和商业版的使用体验，不得不说，社区版还是阉割了许多功能呀</p><h3 id="对-Tomcat-的支持"><a href="#对-Tomcat-的支持" class="headerlink" title="对 Tomcat 的支持"></a>对 Tomcat 的支持</h3><ul><li>社区版<br>在 idea 中运行 tomcat<br>需要安装 Smart Tomcat 插件<a href="/2022/07/31/%E4%BD%BF%E7%94%A8%E7%A4%BE%E5%8C%BA%E7%89%88%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91JavaWeb/" title="使用社区版软件开发JavaWeb">使用社区版软件开发JavaWeb</a></li></ul><h3 id="对-servlet-的支持"><a href="#对-servlet-的支持" class="headerlink" title="对 servlet 的支持"></a>对 servlet 的支持</h3><ul><li>商业版<br>在开发 servlet 服务时，边栏有个 Web 的按钮，项目跑起来后，点开可以看到服务注册的 servlet</li></ul><h3 id="对-Spring-Boot-项目的支持"><a href="#对-Spring-Boot-项目的支持" class="headerlink" title="对 Spring Boot 项目的支持"></a>对 Spring Boot 项目的支持</h3><ul><li>社区版<br>需要手动搭 Spring Boot 项目环境<br><a href="https://spring.io/quickstart">https://spring.io/quickstart</a><br><a href="https://start.spring.io/">https://start.spring.io/</a><br><a href="https://start.aliyun.com/">https://start.aliyun.com/</a><br>Spring Boot 的配置文件的关联<br>需要安装 Spring Boot Assistant 插件</li></ul><h3 id="生成-UML-图"><a href="#生成-UML-图" class="headerlink" title="生成 UML 图"></a>生成 UML 图</h3><p><img src="/img/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IntelliJ-IDEA/2023-07-01-19-05-02.png"></p><ul><li>社区版<br>生成 UML 序列图<br>需要安装 Spring Boot Assistant 插件<br>九种常见 UML 图<br><a href="https://www.cnblogs.com/hzxll/p/16190230.html">https://www.cnblogs.com/hzxll/p/16190230.html</a></li></ul><h3 id="对-Mybatis-的支持"><a href="#对-Mybatis-的支持" class="headerlink" title="对 Mybatis 的支持"></a>对 Mybatis 的支持</h3><ul><li>社区版<br>在写 Mapper.xms 的时候，如果你忘了在记事本.txt 写东西的感觉，我想这马上能让你想起来</li></ul><h3 id="对-JPA-的支持"><a href="#对-JPA-的支持" class="headerlink" title="对 JPA 的支持"></a>对 JPA 的支持</h3><p>安装 JPA Buddy 插件</p>]]></content>
      
      
      
        <tags>
            
            <tag> IDE </tag>
            
            <tag> 编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/12/18/hello-world/"/>
      <url>/2022/12/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><p><code>test</code></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>svn版本管理</title>
      <link href="/2022/11/01/svn%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
      <url>/2022/11/01/svn%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="svn-版本管理"><a href="#svn-版本管理" class="headerlink" title="svn 版本管理"></a>svn 版本管理</h1><p>SVN 是 subversion 的缩写，是一个开放源代码的版本控制系统，通过采用分支管理系统的高效管理，简而言之就是用于多个人共同开发同一个项目，实现共享资源，实现最终集中式的管理。</p><h2 id="svn-的安装和配置"><a href="#svn-的安装和配置" class="headerlink" title="svn 的安装和配置"></a>svn 的安装和配置</h2><p>以 linux 系统为例<br>svn 安装<code>apt-get install subversion</code></p><p>创建仓库文件夹，首先建立 svn 文档的根目录 svnrepo, 然后创建一个项目仓库的文件夹 uapp<br><code>mkdir /svnrepo</code><br><code>mkdir /svnrepo/uapp</code><br>将 uapp 作为仓库<br><code>svnadmin create /svnrepo/uapp</code><br>启动 svn 服务，并指定 svn 数据存储的根目录<br><code>svnserve -d -r /svnrepo</code></p><h2 id="svnWebUi-可视化后台管理"><a href="#svnWebUi-可视化后台管理" class="headerlink" title="svnWebUi 可视化后台管理"></a>svnWebUi 可视化后台管理</h2><p>svnWebUi 运行起来后可以通过浏览器很方便地配置用户名密码，仓库，用户，组等权限。<br>需要提前安装 Java<br>把 jar 包运行起来即可，注意启动项设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># svn</span></span><br><span class="line">svnserve -d -r ~/svnWebUI/repo</span><br><span class="line"><span class="comment"># svnUI</span></span><br><span class="line"><span class="built_in">nohup</span> java -jar -Dfile.encoding=UTF-8 ~/svnWebUI/svnWebUI.jar --server.port=6060 --project.home=~/svnWebUI/ &gt; ~/logs/svnUI.<span class="built_in">log</span> &amp;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>软件设计师王勇2021版观看笔记</title>
      <link href="/2022/10/28/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/28/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机组成与体系结构"><a href="#计算机组成与体系结构" class="headerlink" title="计算机组成与体系结构"></a>计算机组成与体系结构</h2><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><h4 id="R进制转十进制"><a href="#R进制转十进制" class="headerlink" title="R进制转十进制"></a><code>R进制转十进制</code></h4><p>按权展开，把每个位置上的数和它自己的权，相乘，再将每个位置的结果相加。<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-10-16-20-07-01.png"></p><h4 id="十进制转R进制"><a href="#十进制转R进制" class="headerlink" title="十进制转R进制"></a><code>十进制转R进制</code></h4><p>短除法，几进就除几，除到商为零，余数倒着写<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-10-16-22-30-51.png"></p><h4 id="二进制转八进制与十六进制数"><a href="#二进制转八进制与十六进制数" class="headerlink" title="二进制转八进制与十六进制数"></a><code>二进制转八进制与十六进制数</code></h4><p>二进制转八进制 <code>三位一体 421</code><br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-10-16-20-13-13.png"><br>二进制转十进制，因 10 不满足 2 的几次幂，只能使用<a href="####%60R%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B6%60">R 进制转十进制</a><br>二进制转十六进制 <code>四位一体 8421</code><br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-10-16-20-14-06.png"></p><p>tips: 八进制与十六进制转二进制也遵循以上法则，不过是逆着求解罢了。</p><h4 id="原码反码补码移码"><a href="#原码反码补码移码" class="headerlink" title="原码反码补码移码"></a><code>原码反码补码移码</code></h4><p>一般地，我们存储数据时会规定这个数据占多少字节，我们这里暂时仅讨论一个字节，也就是 8 个位的情况。<br>比如用 8 个位来表示，十进制的 1，我们需要在高位添零补位 <code>00000001</code><br>有的时候会讨论到带符号的情况，那么我们把最高位约定为符号位，<code>正零负壹</code></p><h2 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h2><h3 id="数据库三级模式两级映射"><a href="#数据库三级模式两级映射" class="headerlink" title="数据库三级模式两级映射"></a><code>数据库三级模式两级映射</code></h3><p><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-10-29-12-48-28.png"><br><code>三级模式</code>：外模式、概念模式、内模式<br><code>两级映射</code>：外模式-概念模式映射、概念模式-内模式映射</p><h3 id="数据库设计过程"><a href="#数据库设计过程" class="headerlink" title="数据库设计过程"></a><code>数据库设计过程</code></h3><p>这一节需要我们了解，整个设计过程的流程是怎么走下来的，以及每一个不同阶段它会有的不同的产出物。<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-10-29-12-43-35.png"><br>流程的走向依次是：需求分析、概念结构设计、逻辑结构设计、物理设计<br>不同流程阶段的产出有：<br><code>需求分析</code>：数据流图、数据字典、需求说明书<br><code>概念结构设计</code>：ER 模型<br><code>逻辑结构设计</code>：关系模式</p><h3 id="ER模型"><a href="#ER模型" class="headerlink" title="ER模型"></a><code>ER模型</code></h3><p>事实上，一个成熟的系统不仅仅是只包含有两个实体的 ER 模型，而是多个 ER 模型的集成。</p><h4 id="集成-ER-模型的方法"><a href="#集成-ER-模型的方法" class="headerlink" title="集成 ER 模型的方法"></a>集成 ER 模型的方法</h4><ul><li>多个 ER 模型一次性全部集成</li><li>逐步集成，用累加的方式每一次将两个 ER 图集成起来</li></ul><h4 id="集成产生的冲突"><a href="#集成产生的冲突" class="headerlink" title="集成产生的冲突"></a>集成产生的冲突</h4><ul><li>属性冲突<br>相同的属性，在不同的表可能有不同的枚举值，你用 01，我用 TF</li><li>命名冲突<br>e.g: 在教职工表和学生表中，员工编号和教师编号可能是同一个值</li><li>结构冲突<br>同一实体在不同 ER 图中所包含的属性个数或顺序不同，具有不同的抽象</li></ul><h4 id="ER-模型转关系模式"><a href="#ER-模型转关系模式" class="headerlink" title="ER 模型转关系模式"></a>ER 模型转关系模式</h4><p><code>一个实体对应一个关系模式</code>，然后有三种联系模式，不同联系模式转成关系模式的时候有差异。</p><ul><li>1:0 无联系（不属于三种联系的）<br>只有一个实体，没有其他实体联系，所以就只对应一个关系模式。</li><li>1:1 联系<br>最少两个关系模式，因为联系可以单独转成一个关系模式，也可以把联系合并到某一个实体，合并后只剩两个实体，所以最少是两个关系模式</li><li>1:n 联系<br>最少两个关系模式，因为联系可以单独转成一个关系模式，也可以把联系合并到数据量较大的一个实体，合并后只剩两个实体，所以最少是两个关系模式</li></ul><p>比如 部门&lt;&gt;员工 中，正确的合并是把联系合并到员工实体中。</p><ul><li>m:n 联系<br>最少三个关系模式，联系也必须转成一个关系模式</li></ul><p>前面是两个实体的关系模式，如果是三个以上实体间的一个多元联系，转关系模式可以参考如下例题<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-10-29-16-56-10.png"></p><h3 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数"></a><code>关系代数</code></h3><h4 id="交"><a href="#交" class="headerlink" title="交"></a>交</h4><p>写作 <code>S1∩S2</code><br>取 S1 和 S2 的公共部分<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-10-29-21-31-03.png"></p><h4 id="并"><a href="#并" class="headerlink" title="并"></a>并</h4><p>写作 <code>S1∪S2</code><br>在保证结果元素唯一性的前提下，求 S1 和 S2 的元素总和，重复的记录在结果中只显示一次<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-10-29-21-32-50.png"></p><h4 id="差"><a href="#差" class="headerlink" title="差"></a>差</h4><p>写作 <code>S1-S2</code>(差)，就是求在 S1 有但在 S2 没有的，S1 - (S1 ∩ S2)<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-10-29-21-39-24.png"></p><h4 id="笛卡儿积"><a href="#笛卡儿积" class="headerlink" title="笛卡儿积"></a>笛卡儿积</h4><p>写作 <code>S1 X S2</code> ，笛卡儿积，是 S1 的每一条记录都要与 S2 的每一条记录拼接<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-10-29-21-47-03.png"></p><h4 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h4><p>写作 <code>Πc1,c2(S1)</code><br>投影有两种写法，投影某几个列，投影第几个列<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-10-29-21-58-40.png"></p><h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><p>写作 <code>6c1=v(S1)</code><br>选择有两种写法，选择 columName&#x3D;value，或者选择第几个 colum&#x3D;value<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-10-29-22-08-53.png"></p><h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><p>连接写作 <code>S1▷◁S2</code>或 <code>S1⨝S2</code><br>一般地，我们还会在连接符号下方写上连接条件<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-10-29-22-23-42.png"><br>如果没有写连接条件，就是自然连接，会把 S1、S2 中相同名称的列作为等值连接条件，比如这里只有 sno 是相同的，s1.sno&#x3D;s2.sno</p><p>值得注意的是，如果我们 S1 X S2 笛卡儿积的话，这里得到的结果记录比较多，而且是 5 列；但是 S1⨝S2 得到的结果只有 4 列。</p><h3 id="规范化理论-函数依赖"><a href="#规范化理论-函数依赖" class="headerlink" title="规范化理论_函数依赖"></a>规范化理论_函数依赖</h3><p>类似数学中的函数 f(x)&#x3D;y 那样，函数依赖也是讲了通过什么来确定什么。</p><h4 id="部分函数依赖"><a href="#部分函数依赖" class="headerlink" title="部分函数依赖"></a>部分函数依赖</h4><p>(学号，课程号)&#x3D;学生姓名<br>(学号)&#x3D;学生姓名<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-05-11-07-19.png"><br>虽然我们可以通过(学号，课程号)来确定一个学生姓名，但是我们可以只用(学号)就能确定一个学生的姓名。</p><h4 id="传递函数依赖"><a href="#传递函数依赖" class="headerlink" title="传递函数依赖"></a>传递函数依赖</h4><p>A 确定了 B，B 确定了 C，并且 B 不能确定 A，那么我们可以得出推理 A 确定了 C。<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-05-11-21-34.png"></p><h3 id="规范化理论-价值与用途"><a href="#规范化理论-价值与用途" class="headerlink" title="规范化理论_价值与用途"></a>规范化理论_价值与用途</h3><p>非规范化的关系模式，可能存在的问题包括：数据冗余、更新异常、插入异常、删除异常。<br>规范化理论的价值与用途，主要是为了解决这一系列的问题。</p><p>与规范化理论相反，存在非规范化理论（反规范化理论）<br>因为数据库的设计并没有绝对的标准，后面的章节会提到反规范化技术。</p><h3 id="规范化理论-候选键"><a href="#规范化理论-候选键" class="headerlink" title="规范化理论_候选键"></a>规范化理论_候选键</h3><p>什么是候选键？<br>候选键怎么求？<br>候选键和主键的关系<br>外键如何求<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-05-12-28-48.png"></p><ul><li><code>超键</code>：单个属性或者多个属性的组合，且能够唯一标识元组</li><li><code>候选键</code>：去掉超键的冗余属性就是候选键，候选键也能够唯一标识元组</li><li><code>主键</code>：主键只有一个，在候选键中任取一个就是主键</li><li><code>外键</code>：其他关系的主键，多表关联的时候会用到<br>下面是王勇老师讲解的求候选键的例题<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-05-14-10-03.png"><br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-05-14-09-13.png"><br>找入度为 0 的属性，以该属性为起点，若能正常遍历图中所有结点，则该属性为关系模式的候选键<br>若入度为 0 的属性不能遍历所有结点，则需要尝试将一些中间结点（可以是既有入度，又有出度的结点）并入集合中，此集合为候选键。</li></ul><h3 id="规范化理论-范式"><a href="#规范化理论-范式" class="headerlink" title="规范化理论_范式"></a>规范化理论_范式</h3><p>1NF、2NF……BCNF…………，规范化程度越来越高，范式提高级别，基本上就是进行数据表的拆分，这样会带来性能上的问题，所以一般做到 3NF 就差不多了。<br>要达到 2NF，必先达到 1NF<br>要达到 3NF，必先达到 2NF……<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-05-21-36-30.png"><br>范式级别越高，规范程度越高，更有可能解决 <code>数据冗余、更新异常、插入异常、删除异常</code>的问题。</p><ul><li>第一范式 1NF<br>关系模式 R 中，属性值都是不可分的原子值</li><li>第二范式 2NF<br>在满足 1NF 的条件下，每个非主属性完全依赖主键（不存在部分依赖）</li><li>第三范式 3NF<br>在满足 2NF 的条件下，没有非主属性传递依赖</li><li>BC 范式 BCNF<br>在满足 3NF 的条件下，每个传递依赖都是由候选键发起的<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-14-00-03-58.png"></li></ul><p>ps：所谓主属性，属性属于候选键的一部分。判断主属性和非主属性，核心在于哪些是候选关键字，在任何一个候选关键字里出现过的属性都是主属性。</p><h3 id="规范化理论-模式分解"><a href="#规范化理论-模式分解" class="headerlink" title="规范化理论_模式分解"></a>规范化理论_模式分解</h3><p>范式级别不够高时，通过模式分解（把模式进行拆分），范式级别就提升上去了</p><h4 id="保持函数依赖分解"><a href="#保持函数依赖分解" class="headerlink" title="保持函数依赖分解"></a>保持函数依赖分解</h4><p>分解之前有哪些函数依赖，分解之后这些函数依赖依然存在<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-04-22-49-26.png"></p><h4 id="无损连接分解"><a href="#无损连接分解" class="headerlink" title="无损连接分解"></a>无损连接分解</h4><p>将一个关系模式分解成若干个关系模式后，通过连接和投影等运算仍然能还原为原来的关系模式</p><h4 id="无损连接分解的判定方法"><a href="#无损连接分解的判定方法" class="headerlink" title="无损连接分解的判定方法"></a>无损连接分解的判定方法</h4><p>主要有：公式法、表格法</p><ul><li>公式法（仅限一分为二的情况）<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-04-23-43-43.png"></li><li>表格法<br>表头是在原来 R 关系中所有的属性列，若分解后的关系 R1，R2，R3……中包含这个属性，则先在表中作 a 标记<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-04-23-14-39.png"><br>以 学号 → 姓名 这个函数依赖为例进行连接<br>先找到<code>学号是a</code>和<code>姓名是a</code>的关系模式<br>也就是 R 学生<br>再找到<code>学号是a</code>，但<code>姓名不是a</code>的关系模式<br>也就是 R 成绩<br>把<code>R成绩</code>修改为<code>姓名是a</code>，如果除了 R 成绩还有 R4，则 R4 也要修改为姓名是 a<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-04-23-23-09.png"><br>其他函数依赖也如此进行表格操作连接，最终如果表中存在一个全 a 的关系模式，则本次 R 分解是无损连接分解，可以通过连接还原到最初的 R 关系模式<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-04-23-35-45.png"></li></ul><h3 id="数据库并发控制"><a href="#数据库并发控制" class="headerlink" title="数据库并发控制"></a>数据库并发控制</h3><h4 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h4><p>事务具有原子性、一致性、隔离性和持久性。这四个特性也称事务的 ACID 性质。</p><ul><li><code>原子性</code><br>规定事务不可拆分来做，要么全做，要么全不做</li><li><code>一致性</code><br>事务前后的得失守恒</li><li><code>隔离性</code><br>每个事务相互隔离</li><li><code>持久性</code><br>每个事务的结果影响是持续的</li></ul><h4 id="并发操作需要注意"><a href="#并发操作需要注意" class="headerlink" title="并发操作需要注意"></a>并发操作需要注意</h4><p>并发操作引起数据不一致的问题有三类：丢失更新、不可重复读、读脏数据。</p><ul><li>丢失更新<br>并发的函数进程，如 t1 和 t2 两个函数，t1 运行一点，t2 运行一点，交替运行，将同一个共享资源作为入参时，t1 将共享资源的值更新了，而 t2 在共享资源未更新时就读进去了，t2 丢失了更新<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-25-00-00-30.png"></li><li>不可重复读<br>并发函数，t1 和 t2，t1 读了两次共享资源，但 t2 在 t1 读第二次共享资源前，更新了共享资源，使得 t1 最后一次读到的是更新后的共享数据 A，读不到原始共享数据，这就是不可重复读。<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-25-00-02-06.png"></li><li>读脏数据<br>并发函数，t1 和 t2，t1 修改了共享资源的值，紧接着 t2 就取了修改后的共享资源，最后 t1 执行了 rollback 恢复了共享资源，t2 读取到的就是脏数据<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-25-00-02-26.png"></li></ul><h4 id="加锁-解决并发问题"><a href="#加锁-解决并发问题" class="headerlink" title="加锁_解决并发问题"></a>加锁_解决并发问题</h4><p>解决并发问题的主要技术是封锁。基本的封锁类型有 X 锁和 S 锁<br><code>S锁/共享锁/读锁</code>：若事务 T 对数据对象 A 加了 S 锁，则其他事务只能对 A 加 S 锁，不能对 A 加 X 锁<br><code>X锁/排它锁/写锁</code>：若事务 T 对数据对象 A 加了 X 锁，则其他事务不能对 A 加任意锁</p><ul><li>一级封锁协议<code>可防止丢失更新</code><br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-27-00-03-23.png"></li><li>二级封锁协议<code>可防止丢失更新、读脏数据</code><br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-27-00-05-36.png"></li><li>三级封锁协议<code>可防止丢失更新、读脏数据、不可重复读</code><br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-27-00-07-27.png"></li><li>封锁协议与一致性<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-27-00-09-23.png"></li><li>两段封锁协议<br>所有事务必须分两个阶段来进行加锁和释放锁，一阶段获得锁，二阶段释放锁</li><li>死锁<br>封锁协议会带来死锁的问题，所谓死锁，是指两个以上的事务分别请求封锁对方已经封锁的数据，导致了长期等待而无法继续运行下去的现象。<br>应该在死锁产生前预防，或者死锁产生后设法解除死锁。</li></ul><h3 id="数据库完整性约束"><a href="#数据库完整性约束" class="headerlink" title="数据库完整性约束"></a>数据库完整性约束</h3><ul><li>实体完整性约束<br>主键约束</li><li>参照完整性约束<br>外键约束</li><li>用户自定义完整性约束<br>某个字段的值范围必须在自定义约束内才能存储入库</li><li>触发器<br>通过写脚本来约束，更加复杂的要求往往是用触发器来完成的。</li></ul><h3 id="数据库安全"><a href="#数据库安全" class="headerlink" title="数据库安全"></a>数据库安全</h3><p><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-27-16-28-09.png"></p><ul><li>用户标识和鉴定<br>认证身份，输入口令，账号密码</li><li>存取控制<br>对用户授权管理，不同用户有不同操作权限</li><li>密码存储和传输<br>将信息加密后再传输</li><li>视图的保护<br>对视图进行授权管理</li><li>审计<br>记录数据库的操作日志，从日志中发现不安全的问题。</li></ul><h3 id="数据库的备份与恢复"><a href="#数据库的备份与恢复" class="headerlink" title="数据库的备份与恢复"></a>数据库的备份与恢复</h3><h4 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h4><p><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-27-16-44-19.png"><br>除了上面按数据库是否运行区分的备份方式外，还有以下备份方式<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-27-16-46-23.png"><br>多个增量备份在恢复时需要从头开始逐步增量恢复<br>例如周三的数据需要进行恢复，则需要从周日开始恢复直到周三<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-27-19-34-13.png"></p><h4 id="数据库故障与恢复"><a href="#数据库故障与恢复" class="headerlink" title="数据库故障与恢复"></a>数据库故障与恢复</h4><p><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-11-27-17-05-56.png"></p><h3 id="数据仓库与数据挖掘"><a href="#数据仓库与数据挖掘" class="headerlink" title="数据仓库与数据挖掘"></a>数据仓库与数据挖掘</h3><p>app 随着数据量增大，影响数据库性能，需要在数据库中去掉部分不常用数据，去掉这些数据不是直接删除掉，而是换个地方归档存储，也就是数据仓库。<br>数据库：需要保证增删改查的性能、效率<br>数据仓库：只需要保证查询效率，用于超大数据的查询统计</p><h4 id="数据仓库的特点"><a href="#数据仓库的特点" class="headerlink" title="数据仓库的特点"></a>数据仓库的特点</h4><ul><li>面向主题</li><li>集成的<br>跨系统、跨平台收集数据。<br>把不同来源、格式、特点性质的数据在逻辑上或物理上有机地集中，从而为企业提供全面的数据共享。<br>在企业中，由于开发时间或开发部门的不同，往往有多个异构的、运行在不同的软硬件平台上的信息系统同时运行，这些系统的数据源彼此独立、相互封闭，使得数据难以在系统之间交流。</li><li>相对稳定性（非易失的）<br>存储的数据不再进行修改、删除操作</li><li>反应历史变化<br>在未来会有新数据添加进来</li></ul><h4 id="数据仓库的建立"><a href="#数据仓库的建立" class="headerlink" title="数据仓库的建立"></a>数据仓库的建立</h4><p><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-03-11-15-58.png"><br>下面把这张图从左到右展开来说<br>抽取数据源（数据库）中的数据，数据格式统一，去掉冗余数据，装入数据仓库，然后在未来重复以上步骤以更新数据仓库中的数据</p><p>虽然数据仓库是面向主题的，但是还是需要模块化成为数据集逐步结合为数据集市</p><p>OLAP 服务器<br>OLAP 是数据仓库系统的主要应用，支持复杂的分析操作，侧重决策支持，并且提供直观易懂的查询结果。</p><p>数据挖掘工具<br>可以挖掘到人类未知的信息，其实我理解为是通过计算机把数据仓库的海量数据进行排列组合，最终由人类来筛选可用的优质数据。<br>什么季节，什么地段，什么商品销量好<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-03-11-41-18.png"><br>老用户的喜好，成功的营销方案……</p><h4 id="数据挖掘的方法和分类"><a href="#数据挖掘的方法和分类" class="headerlink" title="数据挖掘的方法和分类"></a>数据挖掘的方法和分类</h4><p>数据挖掘方法有：决策树、神经网络、遗传算法、关联规则挖掘算法</p><p>数据挖掘方法的分类有：</p><ul><li>关联分析<br>挖掘出隐藏在数据间的相互关系</li><li>序列模式分析<br>分析数据间的前后关系（因果关系）</li><li>分类分析<br>为每一个记录赋予标记，再按标记分类</li><li>聚类分析<br>分类分析的逆过程</li></ul><h3 id="反规范化技术"><a href="#反规范化技术" class="headerlink" title="反规范化技术"></a>反规范化技术</h3><p>虽然<a href="###%E8%A7%84%E8%8C%83%E5%8C%96%E7%90%86%E8%AE%BA_%E4%BB%B7%E5%80%BC%E4%B8%8E%E7%94%A8%E9%80%94">规范化有一定好处</a>但随着规范化程度的提高，这会使得表不断被拆分，增加查询工作量。系统需要进行多次连接才能查询，这样大大降低了系统效率。<br>反规范化技术就是用来提升查询效率的</p><ul><li>增加派生性冗余列</li><li>增加冗余列</li><li>重新分表</li><li>分割表</li></ul><h3 id="大数据基本概念"><a href="#大数据基本概念" class="headerlink" title="大数据基本概念"></a>大数据基本概念</h3><p>大数据，数据量大，传统数据的分析方法和硬件平台已经不适应于大数据……<br>进一步的上升为集群平台和深度分析<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-18-20-47-12.png"></p><h2 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p><code>数组的考点是存储地址的计算</code><br>建议学习时我们可以先暂时遗忘掉编程语言如 Java 中的数组……<br>当成套公式的数学题来学习即可</p><h4 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h4><p><code>a[n]</code><br>元素 a[i]的存储地址的计算为<br><code>a+i*len</code><br>len 指的是数组中单个元素所占的字节数</p><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><p><code>a[m][n]</code></p><ul><li>按行存储<br>先填满一行<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-18-21-25-25.png"><br>在按行存储的二维数组中，a[i] [j]的存储地址计算为<br><code>a+(i*n+j)*len</code></li><li>按列存储<br>先填满一列<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-18-21-25-57.png"><br>在按列存储的二维数组中，a[i] [j]的存储地址计算为<br><code>a+(j*m+i)*len</code></li></ul><h4 id="二维数组存储地址-例题"><a href="#二维数组存储地址-例题" class="headerlink" title="二维数组存储地址_例题"></a>二维数组存储地址_例题</h4><p><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-18-21-39-36.png"></p><ul><li>答案<br>a+13*2<br>这是数组的第十四个元素</li><li>解析过程</li><li><ul><li>是多少维数组，如果是二维数组按什么存储？<br>二维数组，按行存储 -&gt; <code>a+(i*n+j)*len</code><br>即 a+(2*5+3)*2</li></ul></li></ul><h3 id="稀疏矩阵"><a href="#稀疏矩阵" class="headerlink" title="稀疏矩阵"></a>稀疏矩阵</h3><p>稀疏矩阵的排列方式可以理解为特殊的二维数组，重点记忆上三角和下三角矩阵的下标计算的公式即可<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-22-21-28-32.png"><br>除了公式计算，也可以使用代入法来求解，请看下面例题</p><h4 id="稀疏矩阵-例题"><a href="#稀疏矩阵-例题" class="headerlink" title="稀疏矩阵_例题"></a>稀疏矩阵_例题</h4><p><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-22-21-36-57.png"><br>把矩阵中的元素依次代入公式，求得使用数组存储时的下标，判断下标是否符合实际下标，显然只有 A 答案 M[3]是正确的</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>数据结构是计算机存储和组织数据的方式，不同的数据结构使得程序运行效率存在差异</p><h4 id="逻辑上的数据结构"><a href="#逻辑上的数据结构" class="headerlink" title="逻辑上的数据结构"></a>逻辑上的数据结构</h4><ul><li>线性结构</li><li>非线性结构</li><li><ul><li>树形结构</li></ul></li><li><ul><li>图形结构</li></ul></li></ul><p>虽然逻辑上数据结构分门别类，但是从广义上讲，图包含树，树包含线<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-22-21-52-48.png"></p><h3 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h3><p>线性表是线性结构的基本表现<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-22-22-16-16.png"></p><h4 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h4><p>开辟了连续的空间，顺次把元素表存进来，类似一维数组</p><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><p>链表把物理上不连续的结构通过指针在逻辑上连续起来<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-24-15-08-29.png"><br>每一个存储单元（以下简称结点），包含了数据域和指针域</p><ul><li>单向链表<br>只能从头 head 指向的第一个结点开始遍历</li><li>循环链表<br>可以从任意位置开始遍历，不断 next 周期循环遍历每个指针</li><li>双向链表<br>可以向前或向后遍历元素</li></ul><h4 id="单向链表插入和删除结点"><a href="#单向链表插入和删除结点" class="headerlink" title="单向链表插入和删除结点"></a>单向链表插入和删除结点</h4><ul><li>单向链表插入结点<br>结点空间只有在需要的时候才申请，现在我们要插入结点那么是时候申请结点空间了。<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-24-21-28-30.png"></li><li>单向链表删除结点<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-24-21-32-03.png"></li></ul><h4 id="顺序存储与链式存储对比"><a href="#顺序存储与链式存储对比" class="headerlink" title="顺序存储与链式存储对比"></a>顺序存储与链式存储对比</h4><ul><li>存储密度（空间利用率）<br>顺序存储开辟连续的空间来存储所有数据信息，没有空间上的浪费，存储密度是 1，空间利用率 100%<br>链式存储的结点内除了包含数据还有指针，指针造成了空间的浪费，存储密度小于 1，空间利用率小于 100%</li><li>容量分配<br>顺序存储需要初始化时就定义好容量，后面不能再改变<br>链式存储可以动态扩容，例如插入时申请结点空间</li><li>查找运算<br>如果涉及到二分查找时使用顺序存储更优</li><li>读运算<br>读取某个元素或结点<br>顺序存储根据顺序的索引下标即可读取到指定元素<br>链式存储需要从 head 结点不断地 next……next……</li><li>插入运算<br>顺序存储在插入元素时，要把后面的元素都往后移</li><li>删除运算<br>顺序存储在删除元素时，要把后面的元素都往前移<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2022-12-25-23-58-42.png"></li></ul><h3 id="队列-amp-栈"><a href="#队列-amp-栈" class="headerlink" title="队列 &amp; 栈"></a>队列 &amp; 栈</h3><ul><li>队列<br>先进先出<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2023-05-07-18-13-00.png"></li><li>循环队列<br>插入一个元素时，tail 尾指针按顺时针方向往后移一位<br>删除一个元素时，head 尾指针按顺时针方向往后移一位<br>可存储的元素个数比循环队列长度少一位<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2023-05-07-18-24-55.png"></li><li>栈<br>后进先出<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2023-05-07-18-14-16.png"><br>cba，只是答案的其中之一，因为没有规定要全部入栈完成才进行出栈</li></ul><h3 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h3><p><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2023-05-07-20-26-04.png"><br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2023-05-07-20-32-13.png"><br>取表头，取表中的第一个元素<br>取表尾，取表中排除第一个元素以外的其他所有元素<br>广义表的元素可以是原子，也可以是子表，元素是子表时会增加广义表的深度</p><h3 id="树-amp-二叉树"><a href="#树-amp-二叉树" class="headerlink" title="树 &amp; 二叉树"></a>树 &amp; 二叉树</h3><p><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%8E%8B%E5%8B%872021%E7%89%88%E8%A7%82%E7%9C%8B%E7%AC%94%E8%AE%B0/2023-05-07-20-39-22.png"></p><ul><li>结点的度<br>这个结点有几个儿子</li><li>树的度<br>这颗树的全部任意一个结点中最多有几个儿子</li><li>叶子结点</li><li>分支结点</li><li>父结点</li><li>子结点</li><li>兄弟结点</li><li>层次</li></ul><h2 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h2><h3 id="上午选择题"><a href="#上午选择题" class="headerlink" title="上午选择题"></a>上午选择题</h3><p>每一章【看视频 + 做题】，大约花费 2~3 天。因此建议 45 天内完成。</p><h3 id="下午大题"><a href="#下午大题" class="headerlink" title="下午大题"></a>下午大题</h3><p>下午的应用技术题型是固定的，共 6 道题，最后两道二选一：</p><p>1.结构化分析与设计，考查数据流图 DFD 2.数据库的分析和设计，考查 ER 图与关系模式 3.面向对象分析与设计，考查常用 UML 图 4.常用数据结构和算法（C 语言） 5.设计模式（C++ 和 Java 二选一）</p><p>在这一步，我们可以一次复习一种题型对应的视频，然后，一次大量练习攻克【一种题型】。例如看了数据流图相关的视频后，我们可以把多年的数据流图真题都打印出来，一次性吃透数据流图题。每种题型花费 2~3 天，因此建议 15 天内完成。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>flutter入门</title>
      <link href="/2022/09/17/flutter%E5%85%A5%E9%97%A8/"/>
      <url>/2022/09/17/flutter%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="运行第一个-flutter-程序"><a href="#运行第一个-flutter-程序" class="headerlink" title="运行第一个 flutter 程序"></a>运行第一个 flutter 程序</h2><h3 id="命令行运行"><a href="#命令行运行" class="headerlink" title="命令行运行"></a>命令行运行</h3><p><code>flutter devices</code>检测可用的设备<br><img src="/img/flutter%E5%85%A5%E9%97%A8/2022-09-17-22-20-17.png" alt="查看可用devices"><br><code>flutter run -d all</code>在所有可用设备上运行</p><p><code>flutter run -d deviceName</code>在指定可用设备上运行<br>在可用设备里，取第二列作为 deviceName，比如运行 web 的就是<br>flutter run -d chrome<br>flutter run -d edge<br><code>如果使用了绿色版chrome，则需要为chrome设置环境变量</code><br>CHROME_EXECUTABLE<br>E:\Program Files\Chrome_X64_79.0.3945.88\App\chrome.exe<br><img src="/img/flutter%E5%85%A5%E9%97%A8/2022-09-17-22-24-51.png" alt="chrome非默认目录时需要配环境变量"></p><p>运行 windows 程序需要 c++环境；<br>运行 Android 程序需要 USB 连接手机，并在手机上开启 USB 调试，允许通过 USB 安装应用，或者直接通过安卓模拟器运行。</p><p>linux、macOS、IOS 的程序运行暂时先偷懒了。</p><h3 id="AndroidStudio-内运行"><a href="#AndroidStudio-内运行" class="headerlink" title="AndroidStudio 内运行"></a>AndroidStudio 内运行</h3><p>Android 通过单独打开 flutter 项目的 Android 模块，然后点击 run 运行</p><h2 id="命令行运行后常用命令"><a href="#命令行运行后常用命令" class="headerlink" title="命令行运行后常用命令"></a>命令行运行后常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">r Hot reload.</span><br><span class="line">R Hot restart.</span><br><span class="line">h List all available interactive commands.</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">h 列出所有可用的交互式命令。</span></span><br><span class="line">d Detach (terminate &quot;flutter run&quot; but leave application running).</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">d 分离（终止“flutter运行”，但保持应用进程运行）。</span></span><br><span class="line">c Clear the screen</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">p 显示网格，在调布局时很有用</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">o 切换Android和iOS的预览模式</span></span><br><span class="line">q Quit (terminate the application on the device).</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">q 退出（终止设备上的应用进程）。</span></span><br></pre></td></tr></table></figure><h2 id="flutter-项目结构介绍"><a href="#flutter-项目结构介绍" class="headerlink" title="flutter 项目结构介绍"></a>flutter 项目结构介绍</h2><p>flutter 能编写跨平台的应用<br>android、ios、linux、macos、web、windos 存放着不同平台的相关代码<br>lib 我们写 flutter 代码就在这个文件夹<br>analysis_options.yaml 对 dart 的语法检查，老项目升级到新项目可能会因此报错可以删了这个文件<br>pubspec.yaml 配置文件和第三方依赖<br><img src="/img/flutter%E5%85%A5%E9%97%A8/2022-09-18-09-36-02.png" alt="flutter项目结构"></p><h2 id="编写第一个-flutter-程序"><a href="#编写第一个-flutter-程序" class="headerlink" title="编写第一个 flutter 程序"></a>编写第一个 flutter 程序</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一次坐高铁</title>
      <link href="/2022/09/11/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%9D%90%E9%AB%98%E9%93%81/"/>
      <url>/2022/09/11/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%9D%90%E9%AB%98%E9%93%81/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>复习一下，第一次主动坐高铁。一般直达的流程如图所示，换乘的除外。<br><img src="/img/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%9D%90%E9%AB%98%E9%93%81/2022-09-11-02-32-09.png" alt="高铁直达流程图"></p><h2 id="买票"><a href="#买票" class="headerlink" title="买票"></a>买票</h2><p>买票，也就是选座位，座位的价格、设计、服务、相对位置会对心情带来综合的影响……<br><code>我经济有限，考虑价格二等座和相对位置就好了</code></p><h3 id="价格"><a href="#价格" class="headerlink" title="价格"></a>价格</h3><p>价格从高到低依次是：商务座、一等座、二等座、无座<br>有的时候不同等级因距离太近，价格也随之升高，什么逻辑，坐的近就能阶级跨越麻雀攀高枝变凤凰了……？</p><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><ul><li>商务座 略……</li><li>一等座一排四座</li><li>二等座一排五座，设计为 F&#x2F;D&#x2F;C&#x2F;B&#x2F;A<br><img src="/img/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%9D%90%E9%AB%98%E9%93%81/2022-09-11-02-44-03.png" alt="二等座设计"></li><li>无座<br>二等座售完后开始出售无座车票<br>无座车票的价格是和二等座一样的，无座的看情况可以去二等座休息。</li></ul><h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><p>商务座解锁权限：零食、饮料等，感觉进入了酒店。</p><h3 id="相对位置"><a href="#相对位置" class="headerlink" title="相对位置"></a>相对位置</h3><p>靠窗、过道，和朋友邻座等。</p><h3 id="动车组列车免费携带品"><a href="#动车组列车免费携带品" class="headerlink" title="动车组列车免费携带品"></a>动车组列车免费携带品</h3><ul><li>儿童十千克</li><li>外交人员三十五千克</li><li><strong>其他旅客二十千克</strong></li><li><strong>杆状物不超过 200 厘米</strong></li><li><strong>任意物品长宽高之和不超过 160 厘米</strong></li><li>残疾人折叠轮椅，不超过 130 厘米，不超过 20 千克</li></ul><h3 id="违禁品"><a href="#违禁品" class="headerlink" title="违禁品"></a>违禁品</h3><p>易燃易爆炸有毒危险品，酒精，高度白酒，剪刀。<br>那些包装未拆封的酒居然可以带，与我无关……</p><h2 id="取票"><a href="#取票" class="headerlink" title="取票"></a>取票</h2><p>刷身份证即可，纸质票作为报销使用。</p><h2 id="进站"><a href="#进站" class="headerlink" title="进站"></a>进站</h2><p>刷脸、刷身份证，人和行李大包小包请过安检<br>顺着大屏幕、指示牌信息，询问客服，去找到检票口</p><h2 id="检票"><a href="#检票" class="headerlink" title="检票"></a>检票</h2><p>等报到所购车次的号码才到检票口进站<br>排队检票按照提示进入高铁站台<br>留意广播列车的车次、颜色、车厢号，也可以留意一下地下的指示线，可以定位到车厢。</p><p><code>找到列车后，走错了车厢也没关系，一定要上车，以免错过车次。</code></p><h2 id="上车"><a href="#上车" class="headerlink" title="上车"></a>上车</h2><p>对号入座……<br>厕所在车厢交界处<br>留意广播，快要到站时，移步到车厢交界处的下车门等候。</p><h2 id="换乘"><a href="#换乘" class="headerlink" title="换乘"></a>换乘</h2><p>如果是直达的就不用换乘，当然人生的道路总是曲折的。</p><h3 id="同站换乘"><a href="#同站换乘" class="headerlink" title="同站换乘"></a>同站换乘</h3><p>先下车再在站内找到对应换乘的车号上车。</p><h3 id="异站换乘"><a href="#异站换乘" class="headerlink" title="异站换乘"></a>异站换乘</h3><p>先下车，步行至换乘站后找到换乘的车号上车。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>非技术面试</title>
      <link href="/2022/08/31/%E9%9D%9E%E6%8A%80%E6%9C%AF%E9%9D%A2%E8%AF%95/"/>
      <url>/2022/08/31/%E9%9D%9E%E6%8A%80%E6%9C%AF%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="非技术面试"><a href="#非技术面试" class="headerlink" title="非技术面试"></a>非技术面试</h1><p>总体过程应该先抑后扬，扬长避短，自我介绍不要太骄傲，小心被问倒。<br>相信自己。</p><h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><p>我叫 Henry，毕业于广西 XX 大学 XX 学院，专业是计算机科学与技术，目前有一年的实习工作经验。</p><p>我叫 XX，毕业于广西民族大学相思湖学院，专业是计算机科学与技术，目前有一年的实习工作经验。实习期间主要负责 xxxApp 的开发和维护，能够利用空余时间学习公司项目涉及技术，积极分担老员工离职后遗留的工作任务，按时完成组长分配的任务。</p><h2 id="对方有我什么信息，用常见标签评价我"><a href="#对方有我什么信息，用常见标签评价我" class="headerlink" title="对方有我什么信息，用常见标签评价我"></a>对方有我什么信息，用常见标签评价我</h2><p>英语：无四级证书，听说读写<br>粤语：会听不会说<br>国语：听说读写<br>家乡：广西 XXX<br>房价：XXX</p><p>学校：广西 XX 大学 XX 学院<br>专业：计算机科学与技术<br>获奖证书：XX 奖 XX 证书<br>兴趣爱好：编程、慢跑、乒乓球<br>之前公司：XX 公司<br>之前职位：Java 开发工程师</p><p>之前项目职责：<br>XX 系统的开发和维护，<br>需求 1……解决方案<br>需求 2……解决方案<br>bug……解决方案……</p><h2 id="不失礼貌与身份的反答"><a href="#不失礼貌与身份的反答" class="headerlink" title="不失礼貌与身份的反答"></a>不失礼貌与身份的反答</h2><h2 id="我想问什么"><a href="#我想问什么" class="headerlink" title="我想问什么"></a>我想问什么</h2><p>公司岗位部门情况</p><p>项目组情况</p><p>晋升机会</p><p>加班情况</p><p>公司需要自带电脑吗？</p><p>上下班需要打卡吗</p><p>饮食住宿</p><h2 id="忘词了？"><a href="#忘词了？" class="headerlink" title="忘词了？"></a>忘词了？</h2><p>证明自己，能够胜任这个岗位。<br>我能够做 Java 开发工程师，我能行！！！</p><h2 id="常用非技术面试题"><a href="#常用非技术面试题" class="headerlink" title="常用非技术面试题"></a>常用非技术面试题</h2><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>no-ip</title>
      <link href="/2022/08/30/no-ip/"/>
      <url>/2022/08/30/no-ip/</url>
      
        <content type="html"><![CDATA[<h1 id="no-ip"><a href="#no-ip" class="headerlink" title="no-ip"></a>no-ip</h1><h2 id="免费的-DDNS"><a href="#免费的-DDNS" class="headerlink" title="免费的 DDNS"></a>免费的 DDNS</h2><p>设置域名，绑定 ip，通过官方接口更新动态 ip，实现动态域名解析 DDNS<br>我选了个比较短的 ddns.net，往后不出意外的话主机名就一直用<code>ayao.ddns.net</code>了。</p><h2 id="ipv6-更新接口"><a href="#ipv6-更新接口" class="headerlink" title="ipv6 更新接口"></a>ipv6 更新接口</h2><p>官方的文档有小错误，还是按这个模板来吧<br>主要是<code>Authorization</code>，需要填的是<code>Basic (username:password)toBase64</code>，即填入<code>Basic 空格 (用户名:密码)的base64编码</code></p><h4 id="接口-URL"><a href="#接口-URL" class="headerlink" title="接口 URL"></a>接口 URL</h4><blockquote><p><a href="https://dynupdate.no-ip.com/nic/update?hostname=ayao.ddns.net&myipv6=2100:8a5c:1425:eff0:d2a4:6fff:fe68:de0f">https://dynupdate.no-ip.com/nic/update?hostname=ayao.ddns.net&amp;myipv6=2100:8a5c:1425:eff0:d2a4:6fff:fe68:de0f</a></p></blockquote><h4 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h4><blockquote><p>GET</p></blockquote><h4 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a>Content-Type</h4><blockquote><p>multipart&#x2F;form-data</p></blockquote><h4 id="请求-Header-参数"><a href="#请求-Header-参数" class="headerlink" title="请求 Header 参数"></a>请求 Header 参数</h4><table><thead><tr><th>参数名</th><th>示例值</th><th>参数类型</th><th>是否必填</th><th>参数描述</th></tr></thead><tbody><tr><td>Host</td><td>dynupdate.no-ip.com</td><td>Text</td><td>是</td><td>-</td></tr><tr><td>Authorization</td><td>Basic base64</td><td>Text</td><td>是</td><td>Basic (username:password)toBase64</td></tr><tr><td>User-Agent</td><td>Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;104.0.5112.102 Safari&#x2F;537.36 Edg&#x2F;104.0.1293.70</td><td>Text</td><td>是</td><td>-</td></tr></tbody></table><h4 id="请求-Query-参数"><a href="#请求-Query-参数" class="headerlink" title="请求 Query 参数"></a>请求 Query 参数</h4><table><thead><tr><th>参数名</th><th>示例值</th><th>参数类型</th><th>是否必填</th><th>参数描述</th></tr></thead><tbody><tr><td>hostname</td><td>ayao.ddns.net</td><td>Text</td><td>是</td><td>-</td></tr><tr><td>myipv6</td><td>2100:8a5c:1425:eff0:d2a4:6fff:fe68:de0f</td><td>Text</td><td>是</td><td>-</td></tr></tbody></table><h4 id="成功响应示例"><a href="#成功响应示例" class="headerlink" title="成功响应示例"></a>成功响应示例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nochg <span class="number">117.183</span><span class="number">.79</span><span class="number">.88</span>,<span class="number">2100</span>:8<span class="attr">a5c</span>:<span class="number">1425</span>:<span class="attr">eff0</span>:<span class="attr">d2a4</span>:6<span class="attr">fff</span>:<span class="attr">fe68</span>:de0f</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="为域名申请-SSL"><a href="#为域名申请-SSL" class="headerlink" title="为域名申请 SSL"></a>为域名申请 SSL</h2><h3 id="使用-Keytool-工具生成-CSR-文件"><a href="#使用-Keytool-工具生成-CSR-文件" class="headerlink" title="使用 Keytool 工具生成 CSR 文件"></a>使用 Keytool 工具生成 CSR 文件</h3><p>Keytool 是 Java Development Kit（JDK）安装包中提供的用于管理数字证书密钥的工具。<br>注意：基于对 JDK 版本安全性考虑，需使用 JDK 8 及以上版本。</p><h4 id="创建-JKS-秘钥库文件"><a href="#创建-JKS-秘钥库文件" class="headerlink" title="创建 JKS 秘钥库文件"></a>创建 JKS 秘钥库文件</h4><p>这将会在指定目录如 D:\下生成 JKS 文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -alias ayaokey -keyalg RSA -keysize 2048 -keystore D:\server.jks</span><br></pre></td></tr></table></figure><h4 id="创建-CSR-文件"><a href="#创建-CSR-文件" class="headerlink" title="创建 CSR 文件"></a>创建 CSR 文件</h4><p>这将会在指定目录如 D:\下生成 CSR 文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -certreq -alias ayaokey -sigalg SHA256withRSA -file D:\ayao.ddns.net.csr -keystore D:\server.jks</span><br></pre></td></tr></table></figure><p>生成的 CSR 文件部分内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN NEW CERTIFICATE REQUEST-----</span><br><span class="line">MIIDGzCCAgMCAQAwgaUxCzAJBgNVBAYTAkNOMR4wHAYDVQQIDBXlub/opb/lo67m</span><br><span class="line">IWLSSKzCEMCPM6tyJzuGEOy3pgGzc162bQCqV45Bhbw3PRbM1tkyn7ZYObOGPh/d</span><br><span class="line">NO1GAJBuvHgO7duTiAFO0NnryMLygI0MZSphaM+xuA==</span><br><span class="line">-----END NEW CERTIFICATE REQUEST-----</span><br></pre></td></tr></table></figure><p>CSR 需要提交，私钥则存储在 JKS 文件中。至此，keytool 方式的 CSR 生成完毕。</p><h4 id="提交-CSR"><a href="#提交-CSR" class="headerlink" title="提交 CSR"></a>提交 CSR</h4><p>提交 CSR 内容，填写表单内容，等待验证通过，一般一小时左右</p><h4 id="下载证书"><a href="#下载证书" class="headerlink" title="下载证书"></a>下载证书</h4><p>分别提供以下几种类型的证书，下载完居然是 html 后缀？那我们把.html 去掉，就是真正的证书文件了。<br>ayao_ddns_net.<code>pem-chain</code><br>ayao_ddns_net.<code>pem</code><br>ayao_ddns_net.<code>der</code><br>ayao_ddns_net.<code>pkcs7</code></p><h4 id="为服务器配置-SSL"><a href="#为服务器配置-SSL" class="headerlink" title="为服务器配置 SSL"></a>为服务器配置 SSL</h4><p>以 nginx.conf 为例，因为 80、和 443 我这边没有 root 权限不能使用，而且据说 no-ip 对 80 端口加了广告，所以我使用 1024 和 1443 作为我博客的 web 服务端口，配置文件部分内容如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen       1024;</span><br><span class="line">       listen       [::]:1024;</span><br><span class="line">       listen       1443 ssl;</span><br><span class="line">       listen       [::]:1443 ssl;</span><br><span class="line">       #server_name  ayao.ddns.net;</span><br><span class="line">       ssl_certificate      /data/data/com.termux/files/usr/etc/nginx/cert/ayao_ddns_net.pem-chain;</span><br><span class="line">       ssl_certificate_key  /data/data/com.termux/files/usr/etc/nginx/cert/server.key;</span><br><span class="line">       ssl_session_cache    shared:SSL:1m;</span><br><span class="line">       ssl_session_timeout  5m;</span><br><span class="line">       ssl_ciphers  &quot;EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5&quot;;</span><br><span class="line">       ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">       # 如果协议为http，自动重定向到https</span><br><span class="line">       if ( $scheme = &#x27;http&#x27;)&#123;</span><br><span class="line">               rewrite ^/(.*) https://ayao.ddns.net:1443/$1 permanent;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>myApi</title>
      <link href="/2022/08/30/myApi/"/>
      <url>/2022/08/30/myApi/</url>
      
        <content type="html"><![CDATA[<h2 id="x2F-ayao"><a href="#x2F-ayao" class="headerlink" title="&#x2F;ayao"></a>&#x2F;ayao</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">暂无描述</span><br></pre></td></tr></table></figure><h4 id="公共Header参数"><a href="#公共Header参数" class="headerlink" title="公共Header参数"></a>公共Header参数</h4><table><thead><tr><th>参数名</th><th>示例值</th><th>参数描述</th></tr></thead><tbody><tr><td>暂无参数</td><td></td><td></td></tr></tbody></table><h4 id="公共Query参数"><a href="#公共Query参数" class="headerlink" title="公共Query参数"></a>公共Query参数</h4><table><thead><tr><th>参数名</th><th>示例值</th><th>参数描述</th></tr></thead><tbody><tr><td>暂无参数</td><td></td><td></td></tr></tbody></table><h4 id="公共Body参数"><a href="#公共Body参数" class="headerlink" title="公共Body参数"></a>公共Body参数</h4><table><thead><tr><th>参数名</th><th>示例值</th><th>参数描述</th></tr></thead><tbody><tr><td>暂无参数</td><td></td><td></td></tr></tbody></table><h4 id="预执行脚本"><a href="#预执行脚本" class="headerlink" title="预执行脚本"></a>预执行脚本</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">暂无预执行脚本</span><br></pre></td></tr></table></figure><h4 id="后执行脚本"><a href="#后执行脚本" class="headerlink" title="后执行脚本"></a>后执行脚本</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">暂无后执行脚本</span><br></pre></td></tr></table></figure><h2 id="x2F-ayao-x2F-邮件发送接口"><a href="#x2F-ayao-x2F-邮件发送接口" class="headerlink" title="&#x2F;ayao&#x2F;邮件发送接口"></a>&#x2F;ayao&#x2F;邮件发送接口</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">暂无描述</span><br></pre></td></tr></table></figure><h4 id="接口状态"><a href="#接口状态" class="headerlink" title="接口状态"></a>接口状态</h4><blockquote><p>已完成</p></blockquote><h4 id="接口URL"><a href="#接口URL" class="headerlink" title="接口URL"></a>接口URL</h4><blockquote><p>192.168.1.2:9527&#x2F;mail</p></blockquote><h4 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h4><blockquote><p>POST</p></blockquote><h4 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a>Content-Type</h4><blockquote><p>multipart&#x2F;form-data</p></blockquote><h4 id="请求Body参数"><a href="#请求Body参数" class="headerlink" title="请求Body参数"></a>请求Body参数</h4><table><thead><tr><th>参数名</th><th>示例值</th><th>参数类型</th><th>是否必填</th><th>参数描述</th></tr></thead><tbody><tr><td>subject</td><td>这是邮件标题</td><td>Text</td><td>是</td><td>邮件标题</td></tr><tr><td>content</td><td>这是邮件内容</td><td>Text</td><td>是</td><td>邮件内容</td></tr><tr><td>email</td><td><a href="mailto:&#50;&#57;&#x33;&#x37;&#x30;&#54;&#51;&#x37;&#x34;&#x30;&#x40;&#113;&#113;&#x2e;&#x63;&#x6f;&#109;">&#50;&#57;&#x33;&#x37;&#x30;&#54;&#51;&#x37;&#x34;&#x30;&#x40;&#113;&#113;&#x2e;&#x63;&#x6f;&#109;</a></td><td>Text</td><td>是</td><td>邮件接收者</td></tr><tr><td>petname</td><td>ayao官方</td><td>Text</td><td>是</td><td>发送方邮件昵称</td></tr></tbody></table><h4 id="预执行脚本-1"><a href="#预执行脚本-1" class="headerlink" title="预执行脚本"></a>预执行脚本</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">暂无预执行脚本</span><br></pre></td></tr></table></figure><h4 id="后执行脚本-1"><a href="#后执行脚本-1" class="headerlink" title="后执行脚本"></a>后执行脚本</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">暂无后执行脚本</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>软件设计师</title>
      <link href="/2022/08/18/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
      <url>/2022/08/18/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/</url>
      
        <content type="html"><![CDATA[<h1 id="软件设计师"><a href="#软件设计师" class="headerlink" title="软件设计师"></a>软件设计师</h1><h2 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h2><h3 id="计算机系统硬件基本组成"><a href="#计算机系统硬件基本组成" class="headerlink" title="计算机系统硬件基本组成"></a>计算机系统硬件基本组成</h3><p>计算机系统是由硬件和软件组成的。<br>计算机的基本硬件系统由运算器、控制器、存储器、输入设备和输出设备 5 大部件组成。<br>运算器 + 控制器 &#x3D; 中央处理单元。<br>存储器分为内部存储器和外部存储器。<br>输入设备和输出设备合称外部设备（简称外设）。</p><h3 id="中央处理单元"><a href="#中央处理单元" class="headerlink" title="中央处理单元"></a>中央处理单元</h3><p>cpu 的功能、cpu 的组成、多核 cpu</p><h4 id="CPU-的功能"><a href="#CPU-的功能" class="headerlink" title="CPU 的功能"></a>CPU 的功能</h4><ul><li>程序控制</li><li>操作控制</li><li>时间控制</li><li>数据处理</li></ul><h3 id="数据表示"><a href="#数据表示" class="headerlink" title="数据表示"></a>数据表示</h3><p>原码、反码、补码、移码<br>定点数、浮点数</p><h4 id="进位计数制"><a href="#进位计数制" class="headerlink" title="进位计数制"></a>进位计数制</h4><p>二进制：（前缀：0b&#x2F;0B）（后缀：b&#x2F;B）<br>八进制：（前缀：0）（后缀：o&#x2F;O）<br>十进制：（前缀：无，可加+&#x2F;-）（后缀 d&#x2F;D）<br>十六进制：（前缀：0x&#x2F;0X）（后缀：h&#x2F;H）<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/2022-10-16-23-56-29.png"></p><h4 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h4><h5 id="其他进制转十进制"><a href="#其他进制转十进制" class="headerlink" title="其他进制转十进制"></a>其他进制转十进制</h5><p>对应权值相乘相加<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/2022-10-16-20-07-01.png"></p><h5 id="二进制转其他进制"><a href="#二进制转其他进制" class="headerlink" title="二进制转其他进制"></a>二进制转其他进制</h5><p>二进制转八进制 <code>三位一体 421</code><br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/2022-10-16-20-13-13.png"><br>二进制转十进制，因 10 不满足 2 的几次幂，只能使用<a href="#####%E5%85%B6%E4%BB%96%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B6">其他进制转十进制</a><br>二进制转十六进制 <code>四位一体 8421</code><br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/2022-10-16-20-14-06.png"></p><h5 id="其他进制转二进制"><a href="#其他进制转二进制" class="headerlink" title="其他进制转二进制"></a>其他进制转二进制</h5><p>八进制转二进制 <code>三位一体 421</code><br>十六进制转二进制 <code>四位一体 8421</code><br>在<a href="#####%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%85%B6%E4%BB%96%E8%BF%9B%E5%88%B6">二进制转其他进制</a>的基础上逆向求解即可，还是由于 10 不满足 2 的整数几次幂的问题，十进制转二进制只能参考<a href="#####%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%85%B6%E4%BB%96%E8%BF%9B%E5%88%B6">十进制转其他进制</a>来求解。</p><h5 id="十进制转其他进制"><a href="#十进制转其他进制" class="headerlink" title="十进制转其他进制"></a>十进制转其他进制</h5><p>分两步，先求整数部分，再求小数部分<br>例如我们求十进制 75.3 的二进制</p><ul><li>除基取余 求整数部分<br>也叫短除法，用整数 75 除以 2，求几进制就除以几，一直除，直到最后商为 0<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/2022-10-16-22-30-51.png"><br>75<code>D</code>&#x3D;1001011<code>B</code></li><li>乘基取整 求小数部分<br>用小数部分 0.3 乘以 2，求几进制就乘以几，一直乘<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/2022-10-16-22-42-32.png"><br>0.3<code>D</code>&#x3D;0.010…<code>B</code><br>你还可以继续乘下去得到下面的结果，看需求是要精确到小数点后多少位<br>0.3<code>D</code>&#x3D;0.01001…<code>B</code><br>所以 75.3<code>D</code>&#x3D;1001011.010…<code>B</code></li></ul><h4 id="BCD-码"><a href="#BCD-码" class="headerlink" title="BCD 码"></a>BCD 码</h4><p>BCD 码有 8421 码，余 3 码，2421 码三种。主要讲一下 8421 码。</p><h5 id="8421-码"><a href="#8421-码" class="headerlink" title="8421 码"></a>8421 码</h5><p>8421 码中，使用四位二进制有权码表示一位十进制，出现非法情况时，需要加 6，即二进制加上<code>0110</code><br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/2022-10-16-23-24-29.png"></p><h5 id="余-3-码-amp-2421-码"><a href="#余-3-码-amp-2421-码" class="headerlink" title="余 3 码 &amp; 2421 码"></a>余 3 码 &amp; 2421 码</h5><p><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/2022-10-16-23-33-49.png"></p><h3 id="校验码"><a href="#校验码" class="headerlink" title="校验码"></a>校验码</h3><p>奇偶校验码、海明校验码、循环冗余校验码</p><h4 id="码字、码距"><a href="#码字、码距" class="headerlink" title="码字、码距"></a>码字、码距</h4><p><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/2022-09-12-00-48-49.png" alt="合法的码字"><br>以某位 bit 位方案组成的编码叫<code>码字</code><br>如图所示，2bit 位组成了 4 个码字，也就是 2^2（2 的 2 次方），<br>3bit 位组成了 8 个码字，也就是 2^3（2 的 3 次方）。</p><p>在当前 bit 方案内，将两个码字逐位对比，具有不同位的个数就是<code>两个码字间的距离</code><br>可以将两个码字进行异或运算，再将异或的结果求和，得到两个码字间的距离。</p><p>如果码字能对应上信息位就是<code>合法码字</code>，用来进行正确合法的信息传递<br>如果码字对应不上信息就是<code>非法码字</code>，可能是传递时发生了位错误。</p><p>各合法码字间的最小距离称为<code>码距</code>，<code>小写的字母d表示码距</code></p><table><thead><tr><th>码距 d</th><th>能力</th></tr></thead><tbody><tr><td>2</td><td>检错</td></tr><tr><td>d &gt;&#x3D; 3 且设计合理</td><td>检错 纠错</td></tr></tbody></table><h4 id="奇偶校验码"><a href="#奇偶校验码" class="headerlink" title="奇偶校验码"></a>奇偶校验码</h4><p><code>奇偶校验码 = 1位校验位 + 信息位</code></p><p><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/2022-09-12-01-33-24.png" alt="奇偶校验码"></p><p><code>奇校验码</code>，对编码的校验位设置 0 或 1，使得校验码中 1 的个数是奇数<br><code>偶校验码</code>，对编码的校验位设置 0 或 1，使得校验码中 1 的个数是偶数<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/2022-09-12-01-41-50.png" alt="奇偶校验码例题"><br>计算机判断收到的校验码，判断校验码中 1 的个数，是否符合奇&#x2F;偶校验码，符合则信息合法。<br>也就是将收到的校验码，进行逐位异或，得到校验位，从而判断校验码中 1 的个数<br><code>奇偶校验码的码距d=2，只能判断发生了奇数位的错误</code><br>发生了 1、3、5、7……位的错误</p><h4 id="海明校验码"><a href="#海明校验码" class="headerlink" title="海明校验码"></a>海明校验码</h4><p>将 n 位信息位，拆分成 k 个组，对 k 个组分别进行偶校验<br>每个分组携带一个校验位，也就是会有 k 个校验位<br><img src="/img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/2022-09-12-01-33-24.png" alt="海明码基于偶校验码"><br>然后信息位和校验位会满足关系式<br><code>2</code><sup><code>k</code></sup><code> &gt;= n+k+1</code></p><h4 id="循环冗余校验码"><a href="#循环冗余校验码" class="headerlink" title="循环冗余校验码"></a>循环冗余校验码</h4><h3 id="计算机体系结构的发展"><a href="#计算机体系结构的发展" class="headerlink" title="计算机体系结构的发展"></a>计算机体系结构的发展</h3><p>计算机体系结构分类、指令系统、阵列处理机、并行处理机和多处理机</p><h3 id="存储系统"><a href="#存储系统" class="headerlink" title="存储系统"></a>存储系统</h3><p>存储器结构层次、存储器分类、相联存储器、高速缓存、虚拟存储器、外存储器、磁盘阵列技术、存储域网络</p><h3 id="输入-x2F-输出技术"><a href="#输入-x2F-输出技术" class="headerlink" title="输入&#x2F;输出技术"></a>输入&#x2F;输出技术</h3><p>内存与接口的编址方法、直接程序控制、中断方式、直接存储器存取方式、输入输出处理机 IOP</p><h3 id="总线结构"><a href="#总线结构" class="headerlink" title="总线结构"></a>总线结构</h3><p>总线的分类、常见总线</p><h3 id="安全性评价"><a href="#安全性评价" class="headerlink" title="安全性评价"></a>安全性评价</h3><p>计算机安全等级、安全威胁、影响数据安全的因素</p><h3 id="加密技术和认证技术"><a href="#加密技术和认证技术" class="headerlink" title="加密技术和认证技术"></a>加密技术和认证技术</h3><p>加密技术、认证技术</p><h3 id="可靠性评价"><a href="#可靠性评价" class="headerlink" title="可靠性评价"></a>可靠性评价</h3><p>计算机可靠性模型</p><h3 id="性能评价"><a href="#性能评价" class="headerlink" title="性能评价"></a>性能评价</h3><p>性能评测常用方法、基准测试程序、</p><h2 id="程序设计语言"><a href="#程序设计语言" class="headerlink" title="程序设计语言"></a>程序设计语言</h2><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h2 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h2><h2 id="结构化开发方法"><a href="#结构化开发方法" class="headerlink" title="结构化开发方法"></a>结构化开发方法</h2><h2 id="面向对象技术"><a href="#面向对象技术" class="headerlink" title="面向对象技术"></a>面向对象技术</h2><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h2 id="计算机网络与信息安全"><a href="#计算机网络与信息安全" class="headerlink" title="计算机网络与信息安全"></a>计算机网络与信息安全</h2><h2 id="知识产权和标准化"><a href="#知识产权和标准化" class="headerlink" title="知识产权和标准化"></a>知识产权和标准化</h2><h2 id="系统分析与设计"><a href="#系统分析与设计" class="headerlink" title="系统分析与设计"></a>系统分析与设计</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>会话保持</title>
      <link href="/2022/08/05/%E4%BC%9A%E8%AF%9D%E4%BF%9D%E6%8C%81/"/>
      <url>/2022/08/05/%E4%BC%9A%E8%AF%9D%E4%BF%9D%E6%8C%81/</url>
      
        <content type="html"><![CDATA[<h1 id="会话保持"><a href="#会话保持" class="headerlink" title="会话保持"></a>会话保持</h1><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>cookie 是由首次请求通过服务器返回，浏览器存储，之后每次请求时携带给服务器的键值对；<br>cookie 可以设置失效时间；<br>使用 cookie 时，服务端接收到的值可能会是乱码，需要在前端对 cookie 的键值对的值先编码</p><h2 id="Web-存储"><a href="#Web-存储" class="headerlink" title="Web 存储"></a>Web 存储</h2><p>在 cookie 之后出现的 Web 存储技术；<br>Web 存储（Web Storage）的 API 包括 localStorage、sessionStorage；<br>尽管 cookie 也是存储在浏览器上的，这就是为什么通常没有把 cookie 归属到 Web 存储（Web Storage）内的原因</p><h2 id="session-会话"><a href="#session-会话" class="headerlink" title="session 会话"></a>session 会话</h2><p>session 默认存储在后端服务内存中，但可以持久化，通常还会存储会话结束时间、会话 id</p><h2 id="cookie-amp-session-的结合"><a href="#cookie-amp-session-的结合" class="headerlink" title="cookie &amp; session 的结合"></a>cookie &amp; session 的结合</h2><p>比如用户登录成功后，持久化 sessionId 和会话结束时间，<br>首次把 sessionId 添加入 cookie 返回给浏览器，会话结束时间设置为 cookie 的失效时间。<br>达到 cookie 失效时间，cookie 超时，会话结束。</p><h2 id="token"><a href="#token" class="headerlink" title="token"></a>token</h2><p>内存中的 session 会话可能会丢失，而且随着用户量增大，单体服务需要集群部署，需要在集群中 session 共享，集群会话共享时集群主机资源可能会顶不住；所以我们持久化了 session，但是数据库也是靠不住的，所以我们选择使用后端生成时效性的 token 签名令牌，存储于前端 cookie 或 storage 中，请求时携带 token 进行验证。</p><h2 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h2><p>jwt 全称是 json web token<br>jwt 的组成 header . payload . signature<br>jwt 的组成 ① . ② . ③<br>①：签名所用算法和 token 类型，经过 base64 编码<br>② ：数据和时效性，经过 base64 编码<br>③：将 ①、② 结合服务器设置的密码使用 ① 的算法进行运算得到签名信息</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>爬虫入门</title>
      <link href="/2022/08/04/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/"/>
      <url>/2022/08/04/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="爬虫入门"><a href="#爬虫入门" class="headerlink" title="爬虫入门"></a>爬虫入门</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>隐私数据，例如：人名、联系方式、详细地址，这些涉及隐私信息的，是完全不可以爬取的。<br>一个自觉且善意的爬虫，应该在抓取网页之前，先阅读<code>robots.txt</code>，了解并执行网站管理者制定的爬虫规则。<br><strong>如何查看 robot.txt？</strong><br>在浏览器的网址搜索栏中，输入网站的根域名，然后再输入&#x2F;robot.txt。<br>比如，必应的 robots.txt 网址为<code>https://cn.bing.com/robots.txt</code><br><strong>如何解读 robots.txt？</strong><br><a href="https://zhuanlan.zhihu.com/p/65463520">https://zhuanlan.zhihu.com/p/65463520</a></p><h2 id="爬虫学习平台分享"><a href="#爬虫学习平台分享" class="headerlink" title="爬虫学习平台分享"></a>爬虫学习平台分享</h2><p>分享几个国内可访问，专门练习爬虫的网站<br><a href="http://www.glidedsky.com/">http://www.glidedsky.com/</a><br><a href="https://cuiqingcai.com/9522.html">https://cuiqingcai.com/9522.html</a><br><a href="https://scrape.center/">https://scrape.center/</a></p><p><a href="https://news.163.com/">https://news.163.com/</a><br><a href="https://news.sohu.com/">https://news.sohu.com/</a></p><h2 id="实战语言选择"><a href="#实战语言选择" class="headerlink" title="实战语言选择"></a>实战语言选择</h2><p>理论上能够 http 请求响应的都能做为爬虫语言<br>我用的是基于 java 的 httpclient、httpUtil +jsoup 或者 selenium 框架</p><h2 id="selenium-框架"><a href="#selenium-框架" class="headerlink" title="selenium 框架"></a>selenium 框架</h2><h3 id="Selenium-IDE"><a href="#Selenium-IDE" class="headerlink" title="Selenium IDE"></a>Selenium IDE</h3><p>Selenium IDE 是浏览器扩展程序，可以编写、录制、执行测试脚本。脚本一般过于简单，不适用于有循环和复杂条件的场景，但是我们可以导出脚本为编程语言，支持下面几种，这样可以方便我们了解 selenium 的 API，编写为功能更加强大地代码。</p><ul><li>C# NUnit</li><li>Java JUnit</li><li>JavaScript Mocha</li><li>Python pytest<br><img src="/img/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/2022-10-12-22-27-33.png"></li></ul><h3 id="Selenium-RC"><a href="#Selenium-RC" class="headerlink" title="Selenium RC"></a>Selenium RC</h3><p>Selenium RC 在很长一段时间内都是 Selenium 的主要项目，直到 WebDriver&#x2F;Selenium 合并而产生了最新和最强大的 Selenium 2</p><p>RC 服务端绑定了 Selenium Core 并且自动将其注入浏览器。这在你的测试程序打开浏览器时发生（使用客户端库的方法）。Selenium-Core 是一个 JavaScript 程序，实际上是一些利用浏览器的内置 JavaScript 解析器解析和执行 Selenese 命令 的 JavaScript 函数。<br><img src="/img/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/2022-10-12-22-39-56.png"><br>Server 使用简单的 HTTP GET&#x2F;POST 请求来接收你的测试程序中的 Selenese 命令。这意味这你可以使用任何可以发送 HTTP 请求的编程语言来实现 Selenium 测试在浏览器中的自动运行。</p><p>懵逼了吧，不管了，先动手实现<code>RC server</code>和<code>RC client</code>吧</p><h4 id="RC-server"><a href="#RC-server" class="headerlink" title="RC server"></a>RC server</h4><p>Selenium RC 服务端是一个简单的 jar 包 (selenium-server-standalone-.jar)，它不需要安装，只需要在 RC server 的目录下命令启动即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.seleniumhq.selenium<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>selenium-server-standalone<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.53.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要添加浏览器的驱动来启动，我这里指定了edge和chrome驱动，后续我的client就支持edge和chrome的选项了</span></span><br><span class="line">java -Dwebdriver.edge.driver=&quot;E:\Downloads\edgedriver_win64\msedgedriver.exe&quot; -Dwebdriver.chrome.driver=&quot;E:\Downloads\chromedriver_win32\chromedriver.exe&quot; -jar selenium-server-standalone-2.53.0.jar</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不需要浏览器驱动启动项，如果你设置了浏览器驱动的环境变量到PATH</span></span><br><span class="line">java -jar selenium-server-standalone-&lt;version-number&gt;.jar</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">你可以使用 -h 来查看所有的配置项</span></span><br><span class="line">java -jar selenium-server-standalone-&lt;version-number&gt;.jar -h</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>java -version</code>（需要&gt;&#x3D;1.5）现在达不到的很少了吧<br><img src="/img/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/2022-10-15-23-44-08.png" alt="带驱动启动RC服务器"></p><h4 id="RC-client"><a href="#RC-client" class="headerlink" title="RC client"></a>RC client</h4><ul><li><p>这里我们选择 Java 语言来实现 client，当然你可以选其他语言。<br><img src="/img/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/2022-10-12-23-12-09.png"></p></li><li><p><a href="https://github.com/SeleniumHQ/selenium/releases/download/selenium-4.5.0/selenium-java-4.5.0.zip">https://github.com/SeleniumHQ/selenium/releases/download/selenium-4.5.0/selenium-java-4.5.0.zip</a><br>我们将下载的 selenium-java-4.5.0.zip 解压，新建一个 Java 项目，将文件夹内的 selenium-java-.jar 添加到你的项目中，或者使用 maven</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.seleniumhq.selenium<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>selenium-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- webdrivermanager也先拿去，客户端浏览器驱动用到的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.bonigarcia<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webdrivermanager<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>从 Selenium-IDE 将脚本导出为 Java 文件，并放入你的项目，或者使用 Selenium 的 Java 客户端 API 编写一个 Selenium 测试文件。你可以使用 JUnit，或者 TestNg 来运行你的测试，或者你可以简单的写一个 main() 方法。<br><code>除了C/S架构运行，它还支持仅在客户端运行，我主要讲一下浏览器驱动连接的问题，具体看下面代码</code><br>如果是个人小项目，选择客户端浏览器足够用了，服务器浏览器只是为了统一客户端不同测试用例的测试环境。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">private</span> ChromeOptions chromeOptions;</span><br><span class="line">  <span class="keyword">private</span> EdgeOptions edgeOptions;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> WebDriver driver; <span class="comment">//使用服务端浏览器</span></span><br><span class="line">  <span class="comment">// 如果是使用客户端浏览器</span></span><br><span class="line"><span class="comment">//  private ChromeDriver driver;</span></span><br><span class="line"><span class="comment">//  private EdgeDriver driver;</span></span><br><span class="line">  <span class="meta">@Before</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> <span class="keyword">throws</span> MalformedURLException &#123;</span><br><span class="line">    <span class="comment">// 为客户端浏览器匹配最佳驱动 WebDriverManager需要导包 import io.github.bonigarcia.wdm.WebDriverManager;</span></span><br><span class="line"><span class="comment">//    WebDriverManager.chromedriver().setup();</span></span><br><span class="line"><span class="comment">//    WebDriverManager.edgedriver().setup();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为客户端浏览器设置驱动</span></span><br><span class="line"><span class="comment">//    System.setProperty(&quot;webdriver.chrome.driver&quot;,&quot;E:\\Downloads\\chromedriver_win32\\chromedriver.exe&quot;);</span></span><br><span class="line"><span class="comment">//    System.setProperty(&quot;webdriver.edge.driver&quot;,&quot;E:\\Downloads\\edgedriver_win64\\msedgedriver.exe&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为客户端或服务端浏览器设置驱动 推荐！！！</span></span><br><span class="line"><span class="comment">//    将驱动所在目录添加到系统的path环境变量</span></span><br><span class="line"></span><br><span class="line">    chromeOptions = <span class="keyword">new</span> <span class="title class_">ChromeOptions</span>();</span><br><span class="line">    <span class="comment">// 设置浏览器选项的参数，setBinary，浏览器.exe可以执行程序二进制文件，一般不需要设这个，除非你的浏览器不是安装在默认目录</span></span><br><span class="line">    chromeOptions.setBinary(<span class="string">&quot;E:\\Program Files\\Chrome_X64_79.0.3945.88\\App\\chrome.exe&quot;</span>);</span><br><span class="line">    chromeOptions.setPlatformName(<span class="string">&quot;Windows 10&quot;</span>);</span><br><span class="line">    chromeOptions.setBrowserVersion(<span class="string">&quot;79&quot;</span>);</span><br><span class="line"></span><br><span class="line">    edgeOptions = <span class="keyword">new</span> <span class="title class_">EdgeOptions</span>();</span><br><span class="line">    edgeOptions.setPlatformName(<span class="string">&quot;Windows 10&quot;</span>);</span><br><span class="line">    edgeOptions.setBrowserVersion(<span class="string">&quot;106.0.1370.42&quot;</span>);</span><br><span class="line">    <span class="comment">// 使用远程浏览器</span></span><br><span class="line">    driver = <span class="keyword">new</span> <span class="title class_">RemoteWebDriver</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://127.0.0.1:4444/wd/hub&quot;</span>), edgeOptions);</span><br><span class="line">    <span class="comment">// 使用客户端浏览器</span></span><br><span class="line"><span class="comment">//    driver = new ChromeDriver(chromeOptions);</span></span><br><span class="line"><span class="comment">//    driver = new EdgeDriver();</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>在一个 RC client 中还可以使用 JavaScript 是非常灵活的，但是 Selenium 不直接支持它。你可以在 Selenium RC 中使用 getEval 接口的方法来执行它。<br>考虑 RC client 中的没有静态 id 的多选框。在这种情况下，你可以通过使用 Selenium RC 对 JavaScript 语句进行求值（evaluate）来找到所有的多选框并处理它们。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String[] getAllCheckboxIds () &#123;</span><br><span class="line">     <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> <span class="string">&quot;var inputId  = new Array();&quot;</span>;<span class="comment">// Create array in java script.</span></span><br><span class="line">            script += <span class="string">&quot;var cnt = 0;&quot;</span>; <span class="comment">// Counter for check box ids.</span></span><br><span class="line">            script += <span class="string">&quot;var inputFields  = new Array();&quot;</span>; <span class="comment">// Create array in java script.</span></span><br><span class="line">            script += <span class="string">&quot;inputFields = window.document.getElementsByTagName(&#x27;input&#x27;);&quot;</span>; <span class="comment">// Collect input elements.</span></span><br><span class="line">            script += <span class="string">&quot;for(var i=0; i&lt;inputFields.length; i++) &#123;&quot;</span>; <span class="comment">// Loop through the collected elements.</span></span><br><span class="line">            script += <span class="string">&quot;if(inputFields[i].id !=null &quot;</span> +</span><br><span class="line">                      <span class="string">&quot;&amp;&amp; inputFields[i].id !=&#x27;undefined&#x27; &quot;</span> +</span><br><span class="line">                      <span class="string">&quot;&amp;&amp; inputFields[i].getAttribute(&#x27;type&#x27;) == &#x27;checkbox&#x27;) &#123;&quot;</span>; <span class="comment">// If input field is of type check box and input id is not null.</span></span><br><span class="line">            script += <span class="string">&quot;inputId[cnt]=inputFields[i].id ;&quot;</span> + <span class="comment">// Save check box id to inputId array.</span></span><br><span class="line">                      <span class="string">&quot;cnt++;&quot;</span> + <span class="comment">// increment the counter.</span></span><br><span class="line">                      <span class="string">&quot;&#125;&quot;</span> + <span class="comment">// end of if.</span></span><br><span class="line">                      <span class="string">&quot;&#125;&quot;</span>; <span class="comment">// end of for.</span></span><br><span class="line">            script += <span class="string">&quot;inputId.toString();&quot;</span> ;<span class="comment">// Convert array in to string.</span></span><br><span class="line">     String[] checkboxIds = selenium.getEval(script).split(<span class="string">&quot;,&quot;</span>); <span class="comment">// Split the string.</span></span><br><span class="line">     <span class="keyword">return</span> checkboxIds;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>如果要计算页面中的图片数，你可以<code>selenium.getEval(&quot;window.document.images.length;&quot;);</code><br>记住要调用 window 对象，以防在 DOM 表达式中其默认指向 Selenium 窗口而不是测试窗口。<br>这只是 API 巧妙的冰山一角。</p><h4 id="Selenium-RC-架构原理"><a href="#Selenium-RC-架构原理" class="headerlink" title="Selenium RC 架构原理"></a>Selenium RC 架构原理</h4><p><a href="https://wizardforcel.gitbooks.io/selenium-doc/content/official-site/selenium-1.html">https://wizardforcel.gitbooks.io/selenium-doc/content/official-site/selenium-1.html</a></p><h3 id="Selenium-Grid"><a href="#Selenium-Grid" class="headerlink" title="Selenium Grid"></a>Selenium Grid</h3><p>Selenium-Grid 允许你在多台机器的多个浏览器上并行的进行测试，也就是说，你可以同时运行多个测试。本质上来说就是，Selenium-Grid 支持分布式的测试执行。它可以让你的测试在一个分布式的执行环境中运行。</p><p>通过在多个浏览器中运行测试，在多个版本的浏览器中进行测试，或在不同操作系统的浏览器中进行测试，以减少测试运行时间。</p><p>Selenium-Grid 2.0 是(2012&#x2F;5&#x2F;26)已发布的最新版本。它同版本 1 有很多不同之处。在 2.0 中，Selenium-Grid 和 Selenium-RC 服务端进行了合并。</p><p><code>需要jdk11或更高版本……那我先溜了</code></p><h3 id="不鼓励的行为"><a href="#不鼓励的行为" class="headerlink" title="不鼓励的行为"></a>不鼓励的行为</h3><p>验证码<br>文件下载<br>HTTP 响应码<br>Gmail, email and Facebook<br>测试依赖<br>性能测试<br>爬取链接<br>双因素认证<br>详情见 <a href="https://www.selenium.dev/zh-cn/documentation/test_practices/discouraged/">https://www.selenium.dev/zh-cn/documentation/test_practices/discouraged/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程范式</title>
      <link href="/2022/08/02/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/"/>
      <url>/2022/08/02/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="编程范式"><a href="#编程范式" class="headerlink" title="编程范式"></a>编程范式</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每种语言都有其主张的编程范式，而且你在使用不同语言编程的时候可能实际上想的东西非常不一样，有时一种语言可以包含多种编程范式。<br>C、MISP 汇编、C++、并发编程、scheme、python</p><h2 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h2><p>C</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>C++</p><h2 id="并发式"><a href="#并发式" class="headerlink" title="并发式"></a>并发式</h2><p>2 个函数看起来像同时运行，但实际上在单处理器的机器中是 A 运行一点，然后 B 运行一点，再 A 运行一点……<br>使用场景：网络编程、两个人同时对同一个账户存取款（2 个不同进程访问的共享资源）。</p><h2 id="函数式"><a href="#函数式" class="headerlink" title="函数式"></a>函数式</h2><p>Lisp 是函数式编程的代表，后来又发展出了 Scheme……，建议使用 Scheme，因为有 SICP 类的书参考。<br>函数式编程依赖函数的返回值</p><h2 id="看看-Java-中的编程范式"><a href="#看看-Java-中的编程范式" class="headerlink" title="看看 Java 中的编程范式"></a>看看 Java 中的编程范式</h2><ul><li>面向过程<br>如果你只是写一个简单的脚本，比如只在 main 函数里，第一步干啥，第二步干啥，第 N 步……然后脚本结束</li><li>面向对象<br>封装：将可复用的代码写（封装）在类对象、包、函数中，提高重用性<br>继承：继承父类的属性和行为<br>多态：接口有多个实现类，例如 List</li><li>并发式<br>支持多线程</li><li>函数式<br>stream 流</li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>[^1]: Stanford CS107 Programming Paradigms 编程范式 中英双语字幕[<a href="https://www.bilibili.com/video/BV1Cx411S7HJ">https://www.bilibili.com/video/BV1Cx411S7HJ</a> ]<br>[^2]: Stanford CS107 Programming Paradigms 编程范式 官方原视频和文档[<a href="https://see.stanford.edu/Course/CS107">https://see.stanford.edu/Course/CS107</a> ]<br>[^3]: SICP[<a href="http://mitpress.mit.edu/sicp/full-text/book/book.html">http://mitpress.mit.edu/sicp/full-text/book/book.html</a> ]</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git入门</title>
      <link href="/2022/08/01/git%E5%85%A5%E9%97%A8/"/>
      <url>/2022/08/01/git%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="git-入门"><a href="#git-入门" class="headerlink" title="git 入门"></a>git 入门</h1><h2 id="origin-远程仓库名"><a href="#origin-远程仓库名" class="headerlink" title="origin 远程仓库名"></a>origin 远程仓库名</h2><p>服务端仓库名很多文档默认用的 origin，所以先记住<code>服务端仓库名=origin</code>，其实<code>origin</code> 是当你运行 git clone 时默认的远程服务端仓库名字。 如果你运行 <code>git clone -o </code>repo，那么你默认的远程仓库将会是 repo</p><h2 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h2><p>.git 文件夹存在于仓库的根目录<br><code>git init</code> 当前文件夹成为一个 git 仓库</p><h2 id="绑定远程仓库"><a href="#绑定远程仓库" class="headerlink" title="绑定远程仓库"></a>绑定远程仓库</h2><p><code>git remote origin url</code></p><h2 id="克隆整个仓库"><a href="#克隆整个仓库" class="headerlink" title="克隆整个仓库"></a>克隆整个仓库</h2><p><code>git clone url</code></p><h2 id="推送本地分支到服务端"><a href="#推送本地分支到服务端" class="headerlink" title="推送本地分支到服务端"></a>推送本地分支到服务端</h2><p><code>git push origin &lt;分支名&gt;</code><br>默认单分支是<code>master</code>分支，提交到 master 分支即可，最新版改名叫<code>main</code>了<br><code>git push origin master</code></p><h2 id="多分支管理"><a href="#多分支管理" class="headerlink" title="多分支管理"></a>多分支管理</h2><p>备份在服务端的主分支<code>master</code>最新版改叫<code>main</code>分支了。<br>在多人协作开发中，<code>master</code>分支最终的内容是来自于你和其他人的。<br>我们要在服务端最新的 master 分支的基础上进行新功能的开发，但是又不想影响 master 分支，所以我们要新建分支。</p><h3 id="新建、切换分支"><a href="#新建、切换分支" class="headerlink" title="新建、切换分支"></a>新建、切换分支</h3><p>切换分支<br><code>git checkout 分支名</code></p><p>切换到<code>分支名</code>的分支，<code>-b</code>如果分支不存在则新建<br><code>git checkout -b 分支名</code></p><h2 id="拉取服务端分支"><a href="#拉取服务端分支" class="headerlink" title="拉取服务端分支"></a>拉取服务端分支</h2><p>拉取 master 分支<br><code>git pull origin master</code><br>拉取当前正在用的分支<br><code>git pull</code><br>拉取所有分支<br><code>git pull --all</code></p><h3 id="多分支开发-实战"><a href="#多分支开发-实战" class="headerlink" title="多分支开发 实战"></a>多分支开发 实战</h3><h4 id="从新建多分支开发到提交"><a href="#从新建多分支开发到提交" class="headerlink" title="从新建多分支开发到提交"></a>从新建多分支开发到提交</h4><p>服务端子分支已存在<br>方法一:本地仓库，绑定远程仓库，获取分支，切换分支开发<br>方法二：clone 仓库，这将会拉取所有分支，切换分支开发</p><p>服务端子分支不存在<br>本地拉取服务端仓库，本地新建分支，推送分支到服务端仓库</p><p><strong>服务端子分支不存在 实战</strong><br>拉取最新的主分支<code>master</code>到本机<br><code>git clone url </code>全部分支都拿下<br>或者空的本地仓库<code>git remote add origin url</code>再<code>git pull --all</code>也是全拿下<br>或者空的本地仓库<code>git remote add origin url</code>再<code>git pull origin master</code></p><p>收到新任务，需要在当前 master 分支的最新版基础上开发新功能。<br>① 本地切换到 master 分支<br><code>git checkout master</code><br>② 将本地 master 分支更新到最新版，拉取当前正在用的 master 分支<br><code>git pull</code><br>③ 切换到子分支，如果子分支不存在则新建<br><code>git checkout -b &lt;分支名&gt;</code><br>④ 推送本地子分支到服务器端，服务器端将会新建子分支<br><code>git push origin &lt;分支名&gt;</code><br>⑤ 使用子分支进行开发、自测<br>⑥ 将本地子分支通过<code>rebase</code>获取 master 的更新，再次测试<br><code>git rebase master</code><br>⑦ 子分支提交请求合并到 master</p><h4 id="不小心写错分支了"><a href="#不小心写错分支了" class="headerlink" title="不小心写错分支了"></a>不小心写错分支了</h4><p>本来需要在 dev 分支进行开发，结果不小心在 master 分支上直接进行编辑修改了。<br>不要慌，首先把所做的修改<code>git add</code>进暂存区，先不要<code>git commit</code>，然后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash // 把暂存区内的修改存储起来</span><br><span class="line">git checkout dev //切换到正确的分支</span><br><span class="line">git stash pop //将存储的修改取出来</span><br></pre></td></tr></table></figure><p>如果已经 git commit 了呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD^ // 撤回到刚刚commit之前的状态</span><br></pre></td></tr></table></figure><h4 id="多分支开发实战总结"><a href="#多分支开发实战总结" class="headerlink" title="多分支开发实战总结"></a>多分支开发实战总结</h4><p>多分支不适合单人使用，切换分支较为繁琐<br>不在 master 开发提交<br>创建子分支进行开发<br>子分支功能依赖 master 更新的内容时先<code>git pull origin master</code>，再<code>在子分支中 git rebase master</code>最后开发测试通过再提交<code>git push origin &lt;分支名&gt;</code></p><h2 id="git-图形化工具"><a href="#git-图形化工具" class="headerlink" title="git 图形化工具"></a>git 图形化工具</h2><p>说到图形化git工具，很多人会说xxx里面不是可以点开git吗</p><p>但其实我想说的图形化git工具，是那些专为git设计的</p><ul><li><p>smartGit 收费<br>很强大，能将多个git项目设置到一个组里管理，<br>你可以不使用组，也可以使用一个组，还可以随时切换到其他组，<br>可以复制文件的绝对路径，相对路径<br>还能预览图像</p></li><li><p>Sourcetree + TortoiseGit 免费</p></li><li><p>jetbrains.Idea or jetbrains.Pycharm</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>信息网络安全</title>
      <link href="/2022/08/01/Web%E5%AE%89%E5%85%A8/"/>
      <url>/2022/08/01/Web%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="信息网络安全"><a href="#信息网络安全" class="headerlink" title="信息网络安全"></a>信息网络安全</h1><h2 id="Web-安全发展史"><a href="#Web-安全发展史" class="headerlink" title="Web 安全发展史"></a>Web 安全发展史</h2><p>随着历史的发展，Web 应用开发的技术百花齐放，有些技术较为新颖，需要时间和攻击者的考验，有潜在的漏洞隐患。<br>Web 应用的万金油，大量有价值的 Web 数据和系统，利益驱使着攻击者从系统攻击和网络攻击转移到了对 Web 应用的攻击。</p><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>URL 是 URI 的一个子集,叫做统一资源定位符。<br><code>http</code>：&#x2F;&#x2F;<code>cn.bing.com</code>:<code>80</code>&#x2F;<code>search</code>?<code>name=Sam``#homework</code><br>依次是 协议、主机或域名、端口、路径、参数、锚点</p><h3 id="HTTP-请求"><a href="#HTTP-请求" class="headerlink" title="HTTP 请求"></a>HTTP 请求</h3><p>方法、URL、HTTP 版本、头部</p><h4 id="origin"><a href="#origin" class="headerlink" title="origin"></a>origin</h4><p>跨域请求的头部会携带 origin，后端通过判断请求的 Header 携带的 origin 校验保证服务器安全性。</p><h4 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h4><p>Referer 其实应该是单词 Referrer,只是将错就错了,Header 携带的 Referer 记录了请求的来源 URL，但是 Referer 可以为空。</p><h3 id="HTTP-响应"><a href="#HTTP-响应" class="headerlink" title="HTTP 响应"></a>HTTP 响应</h3><p>HTTP 版本、状态码、头部、响应体。</p><h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h2><p>一个 web 容器，可以搭建 web 站点、配置 https、配置反向代理，并且可以将 mysql、ssl 模块化，有点像 nginx。</p><h2 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h2><h3 id="为什么需要-SSL"><a href="#为什么需要-SSL" class="headerlink" title="为什么需要 SSL"></a>为什么需要 SSL</h3><p>网站中的用户名、密码，在 tcp 协议包中明文传输，会被恶人利用侦听到数据并泄露出来。<br>可以使用 Wireshark 或者 Fiddler 抓包看到明文的数据。<br>还有<a href="http://cn.bing.com/">http://cn.bing.com</a>、<a href="http://cn.bing.sb.com/">http://cn.bing.sb.com</a>如何确保哪个是正确的网站？不法分子使用相似的域名钓鱼，用户点击进去后输入用户名、密码就完蛋了。<br>so…… 为了安全：<br>① 用户和服务器间的通信需要加密。<br>② 身份认证，确保这个网站就是用户想要的网站。</p><h3 id="什么是-SSL"><a href="#什么是-SSL" class="headerlink" title="什么是 SSL"></a>什么是 SSL</h3><p>Secure Socket Layer 安全套接字层<br>SSL 位于传输层之上，应用层之下，为上层应用提供接口服务。<br>HTTP + SSL &#x3D; HTTPS<br>SSL + FTP &#x3D; SFTP</p><h3 id="SSL-的功能"><a href="#SSL-的功能" class="headerlink" title="SSL 的功能"></a>SSL 的功能</h3><p>对服务器进行认证<br>对用户进行认证<br>加密通信<br>通信双方之间的保密性和完整性</p><h3 id="SSL-是如何工作的"><a href="#SSL-是如何工作的" class="headerlink" title="SSL 是如何工作的"></a>SSL 是如何工作的</h3><p>SSL 有两层，握手协议和记录协议<br><strong>-SSL 握手协议</strong></p><ul><li>建立通信双方的可靠连接</li></ul><p><strong>-SSL 记录协议</strong></p><ul><li>传输数据块</li></ul><h4 id="SSL-握手"><a href="#SSL-握手" class="headerlink" title="SSL 握手"></a>SSL 握手</h4><p>验证服务器<br>验证用户<br>选择加密算法<br>确定会话密钥</p><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p>CA 机构将证书颁发给网站，网站提供证书，浏览器验证。<br>好比公安局办完身份证，我就是拥有证书的网站了，浏览器只需要验证我的证书身份证，确定证书身份证号就是对应我的 url，可以允许建立连接。</p><h5 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h5><p>证书是由 CA 机构颁发给网站的。<br>证书内容包含了颁发者、持有者、持有者公钥、有效期……<br>证书持有者的公钥，公钥是公开的密钥，任何人都可以使用这个公开的密钥进行加密，然后发给公钥持有者；公钥和密文并不能解密；只有私钥才能解密。<br>这里用到了非对称加密，</p><h5 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h5><p>协商会话算法和会话密钥。<br>加密传输数据。</p><h5 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h5><p><code>一般是公钥加密、私钥解密</code>，公钥和私钥是对称的，也可以使用私钥加密，公钥解密，但是公钥是公开的，使用<code>私钥加密没有保密性可言</code>。<br>但也不是一无是处。<br><strong>数字签名在证书颁发过程的使用</strong><br>网站将证书提交给 CA 机构，CA 机构对证书进行<code>私钥加密</code>后颁发给网站；我们对网站发起请求时，网站将证书交给浏览器，浏览器通过 CA 的<code>公钥解密</code>根证书的内容，如果解密成功，证书域名与浏览器 url 一致，则通过。</p><h3 id="非对称加密算法-RSA"><a href="#非对称加密算法-RSA" class="headerlink" title="非对称加密算法 RSA"></a>非对称加密算法 RSA</h3><p><code>因数1 × 因数2 = 积</code><br><code>质数 = a = 1 × a</code> a 最小值是 2<br><code>余数 = 积 - 因数1 × 因数2 =  积 % 因数1 = 积 % 因数2</code><br>好了，我们知道因数、质数、余数了，下面我们一起来加密解密吧。</p><h4 id="RSA-加密解密"><a href="#RSA-加密解密" class="headerlink" title="RSA 加密解密"></a>RSA 加密解密</h4><p>RSA 加解密使用的是<code>公钥(E,N)</code>，<code>私钥(D,N)</code>，D 是不能被公开的；现在我们先假设我们有了<code>公钥(7,33)</code>和<code>私钥(3,33)</code>；对源数据 3，1，15 使用 RSA 加密传输后解密得到 3，1，15。<br><img src="/img/Web%E5%AE%89%E5%85%A8/2022-08-02-21-14-42.png" alt="RSA的加密解密"><br><code>一般是公钥加密、私钥解密</code>，但是如果使用了<code>私钥(3,33)</code>加密，<code>公钥(7,33)</code>也是可以解密的，可以用于数字签名的实现。</p><h4 id="制作公钥和私钥"><a href="#制作公钥和私钥" class="headerlink" title="制作公钥和私钥"></a>制作公钥和私钥</h4><p><img src="/img/Web%E5%AE%89%E5%85%A8/2022-08-02-21-35-21.png" alt="制作公钥私钥"><br>T 是算出私钥 D 的重要数字。<br>T 能被 N 推算出来，但是如果两个质数很大的时候就不好推了，只是时间问题。<br>目前的经典计算机中，1024 位的密钥基本安全，2048 位的密钥及其安全。<br>量子计算机能在 8 小时内破解 2048 位 RSA 加密。</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="SSL-实现-HTTPS-总结"><a href="#SSL-实现-HTTPS-总结" class="headerlink" title="SSL 实现 HTTPS 总结"></a>SSL 实现 HTTPS 总结</h3><p>CA 机构通过制作公钥私钥来完成自身机构的证书，提供给浏览器厂商，这样浏览器厂商发布浏览器时就会携带这些根证书（包含该 CA 的公钥）。</p><p>服务器提交证书给 CA，CA 用私钥将服务器证书签名后颁发给服务器。</p><p>访问 HTTPS 时，服务器把持有的证书发送给浏览器，浏览器使用 CA 的公钥解密，解密成功，获得服务器的公钥，<code>使用服务器公钥加密通信来确定数据传输加密方法</code>。<br>为什么不直接用服务器公钥加密后数据传输给服务器呢，RSA 用于身份认证和密钥协商，很少用于直接数据加密，因为效率低。</p><h3 id="OpenSSL"><a href="#OpenSSL" class="headerlink" title="OpenSSL"></a>OpenSSL</h3><p>OpenSSL 是一款开源软件，是 SSL 协议的具体实现。<br>能够实现证书生成、证书签名、密钥生成、加解密等各种操作。</p><h4 id="使用-OpenSSL-自建-HTTPS-网站"><a href="#使用-OpenSSL-自建-HTTPS-网站" class="headerlink" title="使用 OpenSSL 自建 HTTPS 网站"></a>使用 OpenSSL 自建 HTTPS 网站</h4><p>需要 OpenSSL、Web 程序、Web 容器<br>待实现，略……</p><h3 id="ACME"><a href="#ACME" class="headerlink" title="ACME"></a>ACME</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">root@VM-16-11-debian:~<span class="comment"># acme.sh --issue  -d chwe.ddns.net  --standalone</span></span><br><span class="line">[Sun Jul 14 02:05:59 PM CST 2024] Using CA: https://acme.zerossl.com/v2/DV90</span><br><span class="line">[Sun Jul 14 02:05:59 PM CST 2024] Standalone mode.</span><br><span class="line">[Sun Jul 14 02:05:59 PM CST 2024] Create account key ok.</span><br><span class="line">[Sun Jul 14 02:05:59 PM CST 2024] No EAB credentials found <span class="keyword">for</span> ZeroSSL, <span class="built_in">let</span><span class="string">&#x27;s get one</span></span><br><span class="line"><span class="string">[Sun Jul 14 02:06:01 PM CST 2024] Registering account: https://acme.zerossl.com/v2/DV90</span></span><br><span class="line"><span class="string">[Sun Jul 14 02:06:07 PM CST 2024] Registered</span></span><br><span class="line"><span class="string">[Sun Jul 14 02:06:07 PM CST 2024] ACCOUNT_THUMBPRINT=&#x27;</span>MUKVfShJV71eTvEthvqfx3HRga_zhMNDaaq64H69BaA<span class="string">&#x27;</span></span><br><span class="line"><span class="string">[Sun Jul 14 02:06:08 PM CST 2024] Creating domain key</span></span><br><span class="line"><span class="string">[Sun Jul 14 02:06:08 PM CST 2024] The domain key is here: /root/.acme.sh/chwe.ddns.net_ecc/chwe.ddns.net.key</span></span><br><span class="line"><span class="string">[Sun Jul 14 02:06:08 PM CST 2024] Single domain=&#x27;</span>chwe.ddns.net<span class="string">&#x27;</span></span><br><span class="line"><span class="string">[Sun Jul 14 02:06:18 PM CST 2024] Getting webroot for domain=&#x27;</span>chwe.ddns.net<span class="string">&#x27;</span></span><br><span class="line"><span class="string">[Sun Jul 14 02:06:18 PM CST 2024] Verifying: chwe.ddns.net</span></span><br><span class="line"><span class="string">[Sun Jul 14 02:06:18 PM CST 2024] Standalone mode server</span></span><br><span class="line"><span class="string">[Sun Jul 14 02:06:28 PM CST 2024] Processing, The CA is processing your order, please just wait. (1/30)</span></span><br><span class="line"><span class="string">[Sun Jul 14 02:06:34 PM CST 2024] Success</span></span><br><span class="line"><span class="string">[Sun Jul 14 02:06:34 PM CST 2024] Verify finished, start to sign.</span></span><br><span class="line"><span class="string">[Sun Jul 14 02:06:34 PM CST 2024] Lets finalize the order.</span></span><br><span class="line"><span class="string">[Sun Jul 14 02:06:34 PM CST 2024] Le_OrderFinalize=&#x27;</span>https://acme.zerossl.com/v2/DV90/order/G6zHfnd_Y8qR_tQ4FT0QpA/finalize<span class="string">&#x27;</span></span><br><span class="line"><span class="string">[Sun Jul 14 02:06:38 PM CST 2024] Order status is processing, lets sleep and retry.</span></span><br><span class="line"><span class="string">[Sun Jul 14 02:06:38 PM CST 2024] Retry after: 15</span></span><br><span class="line"><span class="string">[Sun Jul 14 02:06:54 PM CST 2024] Polling order status: https://acme.zerossl.com/v2/DV90/order/G6zHfnd_Y8qR_tQ4FT0QpA</span></span><br><span class="line"><span class="string">[Sun Jul 14 02:06:57 PM CST 2024] Downloading cert.</span></span><br><span class="line"><span class="string">[Sun Jul 14 02:06:57 PM CST 2024] Le_LinkCert=&#x27;</span>https://acme.zerossl.com/v2/DV90/cert/Cnpp41T6Cai2gvzO8_yazQ<span class="string">&#x27;</span></span><br><span class="line"><span class="string">[Sun Jul 14 02:07:00 PM CST 2024] Cert success.</span></span><br><span class="line"><span class="string">-----BEGIN CERTIFICATE-----</span></span><br><span class="line"><span class="string">MIID/DCCA4KgAwIBAgIQK+nIZEN5nXm36uxacBgqbTAKBggqhkjOPQQDAzBLMQsw</span></span><br><span class="line"><span class="string">CQYDVQQGEwJBVDEQMA4GA1UEChMHWmVyb1NTTDEqMCgGA1UEAxMhWmVyb1NTTCBF</span></span><br><span class="line"><span class="string">Q0MgRG9tYWluIFNlY3VyZSBTaXRlIENBMB4XDTI0MDcxNDAwMDAwMFoXDTI0MTAx</span></span><br><span class="line"><span class="string">MjIzNTk1OVowGDEWMBQGA1UEAxMNY2h3ZS5kZG5zLm5ldDBZMBMGByqGSM49AgEG</span></span><br><span class="line"><span class="string">CCqGSM49AwEHA0IABO11ZsPGMAXSestQpC5/Y2nnrvuxT+VzFQ0O/+ra8yrRhrmn</span></span><br><span class="line"><span class="string">zYG03K3WNW6I2+DpIHNGN3te2rYlmNFbImoIVlGjggJ5MIICdTAfBgNVHSMEGDAW</span></span><br><span class="line"><span class="string">gBQPa+ZLzjlHrvZ+kB558DCRkshfozAdBgNVHQ4EFgQUzHtg9kwKo2aajq4xrjpm</span></span><br><span class="line"><span class="string">AY71iqgwDgYDVR0PAQH/BAQDAgeAMAwGA1UdEwEB/wQCMAAwHQYDVR0lBBYwFAYI</span></span><br><span class="line"><span class="string">KwYBBQUHAwEGCCsGAQUFBwMCMEkGA1UdIARCMEAwNAYLKwYBBAGyMQECAk4wJTAj</span></span><br><span class="line"><span class="string">BggrBgEFBQcCARYXaHR0cHM6Ly9zZWN0aWdvLmNvbS9DUFMwCAYGZ4EMAQIBMIGI</span></span><br><span class="line"><span class="string">BggrBgEFBQcBAQR8MHowSwYIKwYBBQUHMAKGP2h0dHA6Ly96ZXJvc3NsLmNydC5z</span></span><br><span class="line"><span class="string">ZWN0aWdvLmNvbS9aZXJvU1NMRUNDRG9tYWluU2VjdXJlU2l0ZUNBLmNydDArBggr</span></span><br><span class="line"><span class="string">BgEFBQcwAYYfaHR0cDovL3plcm9zc2wub2NzcC5zZWN0aWdvLmNvbTCCAQQGCisG</span></span><br><span class="line"><span class="string">AQQB1nkCBAIEgfUEgfIA8AB2AHb/iD8KtvuVUcJhzPWHujS0pM27KdxoQgqf5mdM</span></span><br><span class="line"><span class="string">Wjp0AAABkK/ZtMkAAAQDAEcwRQIgD8kbEYPjGqp1asqhn6XGTz52oynDpkgSwdSV</span></span><br><span class="line"><span class="string">JWcSmL0CIQC1cXbrxwTO4AMxbl0W/wfA/s2sukDikpvaZbgK9gzLTgB2AD8XS0/X</span></span><br><span class="line"><span class="string">IkdYlB1lHIS+DRLtkDd/H4Vq68G/KIXs+GRuAAABkK/ZtI8AAAQDAEcwRQIgHkoH</span></span><br><span class="line"><span class="string">FBh+qHpSycwmcsVX96W1DB9Kc/eGFPzRdqypOrsCIQD5LEjpeEPTQkNeb3omCOJI</span></span><br><span class="line"><span class="string">8ehFzZy2Ea6SL7eg6fnCODAYBgNVHREEETAPgg1jaHdlLmRkbnMubmV0MAoGCCqG</span></span><br><span class="line"><span class="string">SM49BAMDA2gAMGUCMQDELfZ7L291VhUrPIcpbefkQbTgcJ+O/IEVWR8TgRM6dbfi</span></span><br><span class="line"><span class="string">qw5vrthd8QoSrJG0sdgCMCJL6D7WIdgkzQl1MssqNMC+V8WR52mcmdm8qDVSB0Zk</span></span><br><span class="line"><span class="string">dXcfMqK9ML4q6CG3Ox1tPw==</span></span><br><span class="line"><span class="string">-----END CERTIFICATE-----</span></span><br><span class="line"><span class="string">[Sun Jul 14 02:07:00 PM CST 2024] Your cert is in: /root/.acme.sh/chwe.ddns.net_ecc/chwe.ddns.net.cer</span></span><br><span class="line"><span class="string">[Sun Jul 14 02:07:00 PM CST 2024] Your cert key is in: /root/.acme.sh/chwe.ddns.net_ecc/chwe.ddns.net.key</span></span><br><span class="line"><span class="string">[Sun Jul 14 02:07:00 PM CST 2024] The intermediate CA cert is in: /root/.acme.sh/chwe.ddns.net_ecc/ca.cer</span></span><br><span class="line"><span class="string">[Sun Jul 14 02:07:00 PM CST 2024] And the full chain certs is there: /root/.acme.sh/chwe.ddns.net_ecc/fullchain.cer</span></span><br></pre></td></tr></table></figure><h2 id="如何守护-Http-信息网络安全"><a href="#如何守护-Http-信息网络安全" class="headerlink" title="如何守护 Http 信息网络安全"></a>如何守护 Http 信息网络安全</h2><p>不在互联网上输入输出未加密的数据，客户端服务端通信时加密传输再解密；<br>不连接陌生的互联网，不接入陌生的代理；<br>升级 HTTPS；</p><h2 id="如何守护-Https-信息网络安全"><a href="#如何守护-Https-信息网络安全" class="headerlink" title="如何守护 Https 信息网络安全"></a>如何守护 Https 信息网络安全</h2><p>不连接陌生的互联网，不接入陌生的代理；<br>不安装不信任陌生的证书；<br>定期三省吾身证书链漏洞</p><h2 id="非常感谢"><a href="#非常感谢" class="headerlink" title="非常感谢"></a>非常感谢</h2><p>[^1]: Web 安全 中国科学技术大学[<a href="https://www.xuetangx.com/course/USTC08091001657/12423937">https://www.xuetangx.com/course/USTC08091001657/12423937</a> ]</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用社区版软件开发JavaWeb</title>
      <link href="/2022/07/31/%E4%BD%BF%E7%94%A8%E7%A4%BE%E5%8C%BA%E7%89%88%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91JavaWeb/"/>
      <url>/2022/07/31/%E4%BD%BF%E7%94%A8%E7%A4%BE%E5%8C%BA%E7%89%88%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91JavaWeb/</url>
      
        <content type="html"><![CDATA[<h1 id="使用社区版软件开发-JavaWeb"><a href="#使用社区版软件开发-JavaWeb" class="headerlink" title="使用社区版软件开发 JavaWeb"></a>使用社区版软件开发 JavaWeb</h1><h2 id="用到的社区版软件"><a href="#用到的社区版软件" class="headerlink" title="用到的社区版软件"></a>用到的社区版软件</h2><p>IDEA、vsCode、Dbeaver</p><h2 id="Dbeaver-连接数据库"><a href="#Dbeaver-连接数据库" class="headerlink" title="Dbeaver 连接数据库"></a>Dbeaver 连接数据库</h2><p>Dbeaver 是一款可视化数据库连接工具。<br>建议打开后先修改驱动安装位置，不然数据库驱动全默认下载到 C 盘。<br><img src="/img/%E4%BD%BF%E7%94%A8%E7%A4%BE%E5%8C%BA%E7%89%88%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91JavaWeb/2022-07-31-20-47-51.png" alt="修改驱动位置"></p><h2 id="idea-搭建后端项目"><a href="#idea-搭建后端项目" class="headerlink" title="idea 搭建后端项目"></a>idea 搭建后端项目</h2><h3 id="从-maven-创建后端-JavaWeb-项目"><a href="#从-maven-创建后端-JavaWeb-项目" class="headerlink" title="从 maven 创建后端 JavaWeb 项目"></a>从 maven 创建后端 JavaWeb 项目</h3><p>使用 Maven 创建 webapp 项目<br><img src="/img/%E4%BD%BF%E7%94%A8%E7%A4%BE%E5%8C%BA%E7%89%88%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91JavaWeb/2022-07-31-20-57-50.png" alt="创建webapp项目"><br>设置编译输出路径，可以先不搞这个，不是很必要<br><img src="/img/%E4%BD%BF%E7%94%A8%E7%A4%BE%E5%8C%BA%E7%89%88%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91JavaWeb/2022-07-31-21-01-00.png" alt="项目编译输出路径"><br><img src="/img/%E4%BD%BF%E7%94%A8%E7%A4%BE%E5%8C%BA%E7%89%88%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91JavaWeb/2022-07-31-21-02-26.png" alt="模块编译输出路径"></p><h3 id="添加-smart-Tomcat-插件支持"><a href="#添加-smart-Tomcat-插件支持" class="headerlink" title="添加 smart Tomcat 插件支持"></a>添加 smart Tomcat 插件支持</h3><p><img src="/img/%E4%BD%BF%E7%94%A8%E7%A4%BE%E5%8C%BA%E7%89%88%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91JavaWeb/2022-07-31-21-05-58.png" alt="安装Tomcat"><br>配置项目上下文路径，启动项目<br><img src="/img/%E4%BD%BF%E7%94%A8%E7%A4%BE%E5%8C%BA%E7%89%88%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91JavaWeb/2022-07-31-21-09-43.png" alt="配置项目上下文路径"></p><h2 id="vsCode-编写-js"><a href="#vsCode-编写-js" class="headerlink" title="vsCode 编写 js"></a>vsCode 编写 js</h2><h3 id="微软账户同步设置"><a href="#微软账户同步设置" class="headerlink" title="微软账户同步设置"></a>微软账户同步设置</h3><p>登录微软账户同步 vsCode 插件和设置，不会有人想在别的地方也要设置一边吧~</p><h3 id="设置自动保存"><a href="#设置自动保存" class="headerlink" title="设置自动保存"></a>设置自动保存</h3><p>帮你 CTRL+S<br><img src="/img/%E4%BD%BF%E7%94%A8%E7%A4%BE%E5%8C%BA%E7%89%88%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91JavaWeb/2022-07-31-22-02-02.png" alt="自动保存"></p><h3 id="添加-IntelliJ-IDEA-Keybindings-插件"><a href="#添加-IntelliJ-IDEA-Keybindings-插件" class="headerlink" title="添加 IntelliJ IDEA Keybindings 插件"></a>添加 IntelliJ IDEA Keybindings 插件</h3><p>一款 idea 快捷键插件，双 shift 找文件，ctrl+shift+f 全局搜索，ctrl+w 光标增域选择，ctrl+f4 关闭标签，你会忘了你是在 vscode 里。</p><h3 id="用于-JSP-文件的设置"><a href="#用于-JSP-文件的设置" class="headerlink" title="用于 JSP 文件的设置"></a>用于 JSP 文件的设置</h3><p>添加<code>java server page</code>插件，使文件语言模式能被编辑器标记为 jsp<br><img src="/img/%E4%BD%BF%E7%94%A8%E7%A4%BE%E5%8C%BA%E7%89%88%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91JavaWeb/2022-07-31-21-37-57.png" alt="jsp标记"><br>设置 Emmet 插件，使 jsp 的 h5 部分得到 Emmet 插件的支持。<br><img src="/img/%E4%BD%BF%E7%94%A8%E7%A4%BE%E5%8C%BA%E7%89%88%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91JavaWeb/2022-07-31-21-44-38.png" alt="jsp的h5快捷键支持"></p><h3 id="自定义用户片段"><a href="#自定义用户片段" class="headerlink" title="自定义用户片段"></a>自定义用户片段</h3><p>就是写 h5 的时候一个!感叹号就能触发的模板，Emmett 自带的 h5 模板不是我想要的。<br><img src="/img/%E4%BD%BF%E7%94%A8%E7%A4%BE%E5%8C%BA%E7%89%88%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91JavaWeb/2022-07-31-21-51-38.png" alt="用户片段入口"><br>能够支持设置 h5 和 jsp 的代码片段。，这里我只设置了 h5 的。<br><img src="/img/%E4%BD%BF%E7%94%A8%E7%A4%BE%E5%8C%BA%E7%89%88%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91JavaWeb/2022-07-31-22-12-49.png" alt="代码片段设置"><br>将用户片段置顶，因为默认情况下 Emmet 插件优先级大于用户片段。<br>进入 Settings，在上方搜索栏输入 snippet，设置为 top<br><img src="/img/%E4%BD%BF%E7%94%A8%E7%A4%BE%E5%8C%BA%E7%89%88%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91JavaWeb/2022-07-31-21-54-35.png" alt="用户片段置顶"></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>idea 社区版不支持 jsp 和 js，即使 copy 了一份 jsp 插件也是被禁用的。<br>单纯只用 idea 社区版完成 JavaWeb 开发是不可能的。<br>但这并不能阻挡我拥抱免费社区版软件的决心。<br>因此后端使用 idea，前端使用 vscode，数据库连接使用 dbeaver。</p><p>物质是一切生活情感、关系的基础。不能盲目追求免费开源用爱发电，看看 Apache 基金会，是受到了其他公司赞助和个人捐赠的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 前端 </tag>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> IDE </tag>
            
            <tag> 编辑器 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/2022/07/30/Spring/"/>
      <url>/2022/07/30/Spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="第一个-Spring-程序"><a href="#第一个-Spring-程序" class="headerlink" title="第一个 Spring 程序"></a>第一个 Spring 程序</h2><h3 id="下载-Spring"><a href="#下载-Spring" class="headerlink" title="下载 Spring"></a>下载 Spring</h3><p>Spring 有很多其他的包，但是对于 Spring 的 IOC 基础，只需要这些包就够了。</p><p>Spring 的<code>beans、content、core、expressssion</code>；还需要 Apache 的<code>commons-logging</code>；</p><h3 id="使用-Maven-下载-Spring"><a href="#使用-Maven-下载-Spring" class="headerlink" title="使用 Maven 下载 Spring"></a>使用 Maven 下载 Spring</h3><p>自有国情，可以去<a href="http://maven.aliyun.com/">http://maven.aliyun.com</a>搜索寻找 jar 包，进入网站后点击文件搜索即可。<br>搜索并查看 jar 包<br><img src="/img/Spring/2022-07-30-14-56-13.png" alt="搜索jar包"></p><p>点击文件名即可看到 jar 包对应的 maven 依赖<br><img src="/img/Spring/2022-07-30-15-00-08.png" alt="查看maven依赖"><br>maven 的<code>&lt;dependencies&gt;</code>部分</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.anaptecs.jeaf.owalibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>org.apache.commons.logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><p>① 创建一个类<code>HelloSpring.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloSpring</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单独一个say方法，打印输出say hello</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(HelloSpring.class+<span class="string">&quot;say hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>② 创建一个<code>beans.xml</code>文件<br>用来为<code>HelloSpring</code>注册 bean 的，beans.xml 文件的模板可以去 spring 官网找。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;ayao1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ayao.HelloSpring&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>③ 创建<code>AppTest.java</code>文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// ClassPathXmlApplicationContext bean = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// BeanFactory bean = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HelloSpring</span> <span class="variable">ayao1</span> <span class="operator">=</span> (HelloSpring)bean.getBean(<span class="string">&quot;ayao1&quot;</span>);</span><br><span class="line">        <span class="type">HelloSpring</span> <span class="variable">ayao2</span> <span class="operator">=</span> bean.getBean(<span class="string">&quot;ayao1&quot;</span>, HelloSpring.class);</span><br><span class="line">        ayao1.say(); <span class="comment">// HelloSpring.class+&quot;say hello&quot;</span></span><br><span class="line">        ayao2.say(); <span class="comment">// HelloSpring.class+&quot;say hello&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④ 运行<code>AppTest.java</code>中的 main 方法<br>我们在<code>beans.xml</code>中为<code>HelloSpring</code>通过 id 注册了 bean，<br>在<code>AppTest.java</code>中读取<code>beans.xml</code>文件，并用 id 通过 getBean 获取到了对象，并转换为我们想要的<code>HelloSpring</code>对象，然后就可以用对象调用<code>say()</code>方法了。</p><h2 id="IOC-控制反转"><a href="#IOC-控制反转" class="headerlink" title="IOC 控制反转"></a>IOC 控制反转</h2><h3 id="IOC-控制反转是什么"><a href="#IOC-控制反转是什么" class="headerlink" title="IOC 控制反转是什么"></a>IOC 控制反转是什么</h3><p>对象创建和对象之间的调用交给 Spring 管理，是低耦合的。</p><h3 id="IOC-原理"><a href="#IOC-原理" class="headerlink" title="IOC 原理"></a>IOC 原理</h3><p>xml 解析、工厂模式、反射。<br>IOC 容器就是对象工厂，读取 xml 配置文件，通过工厂模式用反射创建对象。</p><h3 id="IOC-的实现接口"><a href="#IOC-的实现接口" class="headerlink" title="IOC 的实现接口"></a>IOC 的实现接口</h3><p>Spring 提供了两个 IOC 的实现接口<code>BeanFactory</code>和<code>ApplicationContext</code><br>BeanFactory 是低级容器，ApplicationContext 是高级容器继承了 BeanFactory，正常开发直接用<code>ApplicationContext</code>就好了，除非你哪天有空去编译阅读 Spring 源码。</p><h3 id="IOC-两个实现接口的区别"><a href="#IOC-两个实现接口的区别" class="headerlink" title="IOC 两个实现接口的区别"></a>IOC 两个实现接口的区别</h3><p><code>BeanFactory</code>，读取 xml 配置文件不创建对象，getBean 才创建对象。<br><code>ApplicationContext</code>，读取 xml 配置文件并创建对象。除了<code>ClassPathXmlApplicationContext</code>ApplicationContext 还有一个实现类<code>FileSystemXmlApplicationContext</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="/img/Spring/2022-07-30-17-20-54.png"></p><h3 id="IOC-的实际应用"><a href="#IOC-的实际应用" class="headerlink" title="IOC 的实际应用"></a>IOC 的实际应用</h3><h4 id="Bean-管理"><a href="#Bean-管理" class="headerlink" title="Bean 管理"></a>Bean 管理</h4><p>Bean 管理就是<code>由Spring创建对象，注入属性</code>。<br>Bean 管理有两种实现方式：<br>由 Spring<code>基于xml</code>创建对象，注入属性。<br>由 Spring<code>基于注解</code>创建对象，注入属性。</p><h5 id="基于-xml"><a href="#基于-xml" class="headerlink" title="基于 xml"></a>基于 xml</h5><p><strong>创建对象</strong><br>请看第一个 Spring 程序 略……<br>创建对象时，一般默认使用类的无参构造方法创建对象。<br>java 类中默认包含无参构造，但如果类包含有参构造，则需要添加无参构造。<br><strong>注入属性</strong><br>注入属性，学名：依赖注入、DI（dependency injection）<br>注入属性有两种实现方式：<code>set方法注入、有参构造注入</code><br><strong># 方法一：set 方法注入</strong><br>① 创建<code>Student.java</code>，并设置属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String studentName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudentName</span><span class="params">(String studentName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.studentName = studentName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>② 在<code>beans.xml</code>使用<code>property</code>为 studentName 注入值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">略</span>……&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;ayao1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ayao.Student&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>③ 创建<code>AppTest.java</code>文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">ayao1</span> <span class="operator">=</span> (Student)bean.getBean(<span class="string">&quot;ayao1&quot;</span>);</span><br><span class="line">        <span class="comment">// Student&#123;studentName=&#x27;张三&#x27;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong># 方法一 续：set 注入语法糖 p 命名空间</strong><br>需要在 beans 标签添加<code>xmlns:p</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>  <span class="attr">略</span>……</span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;ayao1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ayao.Student&quot;</span> <span class="attr">p:studentName</span>=<span class="string">&quot;张三&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong># 方法二：有参构造注入</strong><br>这将会使用有参构造创建对象并注入属性。<br>① 创建<code>Student.java</code>，设置属性和有参构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String studentName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String studentName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.studentName = studentName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>② 在<code>beans.xml</code>使用<code>constructor-arg</code>为 studentName 注入值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">略</span>……&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;ayao1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ayao.Student&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;studentName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;constructor-arg index=&quot;0&quot; value=&quot;李四&quot;&gt;&lt;/constructor-arg&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>③ 创建<code>AppTest.java</code>文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">ayao1</span> <span class="operator">=</span> (Student)bean.getBean(<span class="string">&quot;ayao1&quot;</span>);</span><br><span class="line">        <span class="comment">// Student&#123;studentName=&#x27;李四&#x27;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="xml-注入-null-和特殊符号的处理方式"><a href="#xml-注入-null-和特殊符号的处理方式" class="headerlink" title="xml 注入 null 和特殊符号的处理方式"></a>xml 注入 null 和特殊符号的处理方式</h5><p>为属性注入<code>null</code>值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">略</span>……&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;ayao1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ayao.Student&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentName&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为属性注入特殊符号，使用<code>&lt;![CDATA[]]&gt;</code>注入，如<code>《红楼梦》</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">略</span>……&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;ayao1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ayao.Student&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentName&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[《红楼梦》]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="注入属性-外部-bean"><a href="#注入属性-外部-bean" class="headerlink" title="注入属性-外部 bean"></a>注入属性-外部 bean</h5><p>传统的 Service 调 Dao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MoneyDao</span> <span class="variable">moneyDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MoneyDaoImpl</span>();</span><br><span class="line">moneyDao.getMoney();</span><br></pre></td></tr></table></figure><p>Spring 使用 Bean 管理注入外部 Bean 属性，如在 MoneyService 的 bean 中注入 moneyDao 属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MoneyService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> MoneyDao moneyDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">newGetMoney</span><span class="params">()</span>&#123;</span><br><span class="line">        moneyDao.getMoney();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml 中注入外部 bean moneyDaoImpl</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;moneyService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;main.java.service.MoneyService&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;moneyDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;moneyDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;moneyDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;main.java.dao.MoneyDaoImpl&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试入口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">    <span class="type">MoneyService</span> <span class="variable">moneyService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;moneyService&quot;</span>, MoneyService.class);</span><br><span class="line">    moneyService.newGetMoney();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注入属性-内部-bean"><a href="#注入属性-内部-bean" class="headerlink" title="注入属性-内部 bean"></a>注入属性-内部 bean</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">略</span>……&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.Student&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;玲玲&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;classRoom&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;classRoom&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ClassRoom&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;classRoomName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;七年级1班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="注入属性-级联赋值"><a href="#注入属性-级联赋值" class="headerlink" title="注入属性-级联赋值"></a>注入属性-级联赋值</h5><p>教室 ClassRoom</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassRoom</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String classRoomName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClassRoom</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClassRoomName</span><span class="params">(String classRoomName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.classRoomName = classRoomName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ClassRoom&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;classRoomName=&#x27;&quot;</span> + classRoomName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>学生 Student</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String studentName;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> ClassRoom classRoom;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ClassRoom <span class="title function_">getClassRoom</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> classRoom;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudentName</span><span class="params">(String studentName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.studentName = studentName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClassRoom</span><span class="params">(ClassRoom classRoom)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.classRoom = classRoom;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;studentName=&#x27;&quot;</span> + studentName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, classRoom=&quot;</span> + classRoom +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>级联赋值，<code>classRoom.classRoomName</code>相当于 new ClassRoom().classRoomName</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">略</span>……&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.Student&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;玲玲&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;classRoom&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;classRoom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;classRoom.classRoomName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;十年级2班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;classRoom&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ClassRoom&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;constructor-arg name=&quot;classRoomName&quot; value=&quot;七年级1班&quot;&gt;&lt;/constructor-arg&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="注入属性-数组和集合"><a href="#注入属性-数组和集合" class="headerlink" title="注入属性-数组和集合"></a>注入属性-数组和集合</h5><p>略……</p><h5 id="FactoryBean-接口"><a href="#FactoryBean-接口" class="headerlink" title="FactoryBean 接口"></a>FactoryBean 接口</h5><p>普通 bean 的注册 class 和 getBean 返回值都是 HelloSpring<br><code>&lt;bean id=&quot;helloSpring&quot; class=&quot;ayao.HelloSpring&quot; &gt;&lt;/bean&gt;</code><br>工厂 bean 的注册 class 和 getBean 返回值可以不一样，是通过实现<code>FactoryBean</code>来完成的。<br>我们通过 Dog.java 和 AppTest.java 来演示这个例子。<br>Dog.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="comment">// FactoryBean&lt;String&gt;，比如这里将泛型设置为String</span></span><br><span class="line">    <span class="comment">// getBean的返回类型 修改为String</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line">        str = <span class="string">&quot;孙行者&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> FactoryBean.<span class="built_in">super</span>.isSingleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AppTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;dog&quot;</span>, String.class);</span><br><span class="line">        System.out.println(string); <span class="comment">// 孙行者</span></span><br><span class="line">        <span class="comment">//这里在Dog.java重写了getObject()方法，所以返回值的对象不再是Dog了。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="bean-是否单例、作用域"><a href="#bean-是否单例、作用域" class="headerlink" title="bean 是否单例、作用域"></a>bean 是否单例、作用域</h5><p>对象是否单例可以通过打印比较多个对象地址得到<code>println(Object)</code><br>Spring 的 bean 对象默认是单例的，我们可以调整<code>scope</code>设置成多实例对象。<code>singleton</code>单例、<code>prototype</code>多例。<br>singleton 的 bean 在加载配置文件时就创建对象且只创建一次。<br>prototype 的 bean 在 getBean 的时候才创建对象。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;bean id=&quot;student&quot; class=&quot;com.Student&quot; scope=&quot;singleton&quot;&gt;&lt;/bean&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.Student&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>scope</code>还能设置 bean 作用域，使用<code>request</code>或者<code>session</code>，当然这是 web 应用中的内容了。</p><h5 id="bean-的生命周期、后置处理器"><a href="#bean-的生命周期、后置处理器" class="headerlink" title="bean 的生命周期、后置处理器"></a>bean 的生命周期、后置处理器</h5><p>bean 的生命周期如下，其中 ③、④ 是非必要的，只有添加了后置处理器才会出现。<br>① 构造方法创建 bean 对象实例<br>② 注入属性和引用其他 bean<br>③<strong>后置处理器 before</strong><br>④bean 的初始化方法<br>⑤<strong>后置处理器 after</strong><br>⑥getBean<br>⑦ 销毁 bean<br>我们来实现一下后置处理器的情况，直接看下面的代码吧。<br>Dog.java 一个普通的 bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;①构造方法创建bean对象实例&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">&quot;②注入属性和引用其他bean&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initDog</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;④bean的初始化方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyDog</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;⑦销毁bean&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现了<code>BeanPostProcessor</code>接口的一个 bean，配置后置处理器需要用到。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    <span class="comment">// 实现了BeanPostProcessor接口才能重写的两个方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, java.lang.String beanName)</span> <span class="keyword">throws</span> org.springframework.beans.BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;⑤后置处理器before&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, java.lang.String beanName)</span> <span class="keyword">throws</span> org.springframework.beans.BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;⑥后置处理器after&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>beans.xml 中配置，<code>init-method</code>初始化方法，<code>destroy-method</code>销毁方法，<code>注册后置处理器的bean</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">略</span>……&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.Dog&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initDog&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroyDog&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;二狗&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bpp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.MyBeanPostProcessor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>来个 main 方法跑起来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"><span class="comment">//        ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;dog&quot;</span>, Dog.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;⑥getBean&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//销毁开始，将会调用destoryDog</span></span><br><span class="line">        ((ClassPathXmlApplicationContext)applicationContext).close();</span><br><span class="line"><span class="comment">//        applicationContext.close();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h5><p>使用<code>autowire</code>进行自动装配，可根据属性名或属性类型进行注入，<code>byName</code>、<code>byType</code></p><p>ByName 自动装配<br>使用自动装配，在 Person 中注入 Pet，实现代码如下<br>Pet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String pName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getpName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setpName</span><span class="params">(String pName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pName = pName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Person.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPet</span><span class="params">(Pet pet)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pet = pet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">personAction</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name+<span class="string">&quot;和&quot;</span>+pet.getpName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">略</span>……&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;pet&quot;</span> <span class="attr">class</span>=<span class="string">&quot;Pet&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小花&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;大明&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>AppTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;person&quot;</span>, Person.class);</span><br><span class="line">        person.personAction(); <span class="comment">// 大明和小花</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ByType 自动装配<br>被装配的 bean 的 id 不再重要，<code>hhh</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">略</span>……&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hhh&quot;</span> <span class="attr">class</span>=<span class="string">&quot;Pet&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小花&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;大明&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="基于注解"><a href="#基于注解" class="headerlink" title="基于注解"></a>基于注解</h5><p>注解简化了 xml 配置，注解作用在类、属性、方法上面。<br><strong>Bean 管理中用于创建对象的注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@Repository</span></span><br></pre></td></tr></table></figure><p>这四个注解功能都是一样的，用于创建 bean 实例。<br><strong>创建对象</strong><br>导入<code>spring-aop</code>的依赖<br>在<code>beans.xml</code>开启组件扫描</p>]]></content>
      
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用心得</title>
      <link href="/2022/07/25/Hexo%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/"/>
      <url>/2022/07/25/Hexo%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-使用心得"><a href="#Hexo-使用心得" class="headerlink" title="Hexo 使用心得"></a>Hexo 使用心得</h1><h2 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h2><p>请移步 Hexo 官网，略……</p><h2 id="Hexo-编辑"><a href="#Hexo-编辑" class="headerlink" title="Hexo 编辑"></a>Hexo 编辑</h2><p>请移步 Hexo 官网，略……</p><h2 id="Hexo-运行"><a href="#Hexo-运行" class="headerlink" title="Hexo 运行"></a>Hexo 运行</h2><p>可以使用 Hexo 自带的 node 运行，</p><p>也可以生成静态文件后通过 nginx 等 Web 容器运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清除已存在的静态文件</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="comment"># 生成静态文件，默认在public文件夹下</span></span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><h2 id="心仪的主题-——-Fluid-主题"><a href="#心仪的主题-——-Fluid-主题" class="headerlink" title="心仪的主题 —— Fluid 主题"></a>心仪的主题 —— Fluid 主题</h2><p>使用的是 Fluid 主题</p><h3 id="设置-Mac-风格代码块"><a href="#设置-Mac-风格代码块" class="headerlink" title="设置 Mac 风格代码块"></a>设置 Mac 风格代码块</h3><p>添加自定义样式文件到主题目录内的 css 文件夹，并使用配置。</p><p>在<code>_config.fluid.yml</code>编辑使用自定义配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 别忘了，你还差一个macstyle自定义样式文件</span></span><br><span class="line"><span class="attr">custom_css:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/css/macstyle</span></span><br></pre></td></tr></table></figure><p><strong>主题目录</strong></p><p>如果是 node 安装的，<code>node_modules/hexo-theme-fluid/source/css</code></p><p>如果是手动安装的，<code>themes/fluid/source/css</code></p><p>在<code>主题的css目录</code>内创建样式文件<code>文件后缀是styl</code>，文件内容如下</p><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里我文件名是macstyle.styl</span></span><br><span class="line"><span class="selector-class">.highlight</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#21252b</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span></span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">30px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">4</span>)</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">30px</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-pseudo">&amp;::before</span></span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#fc625d</span></span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">50%</span></span><br><span class="line">      <span class="attribute">box-shadow</span>: <span class="number">20px</span> <span class="number">0</span> <span class="number">#fdbc40</span>, <span class="number">40px</span> <span class="number">0</span> <span class="number">#35cd4b</span></span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&#x27; &#x27;</span></span><br><span class="line">      <span class="attribute">height</span>: <span class="number">12px</span></span><br><span class="line">      <span class="attribute">left</span>: <span class="number">12px</span></span><br><span class="line">      <span class="attribute">margin-top</span>: -<span class="number">20px</span></span><br><span class="line">      <span class="attribute">position</span>: absolute</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">12px</span></span><br></pre></td></tr></table></figure><h3 id="设置短代码显示风格"><a href="#设置短代码显示风格" class="headerlink" title="设置短代码显示风格"></a>设置短代码显示风格</h3><p>设置字体颜色，并去掉默认的背景色</p><p>位于<code>node_modules\hexo-theme-fluid\source\css\_pages\_post</code>的<code>markdown.styl</code>文件的 code 部分修改成如下</p><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">code</span></span><br><span class="line">    <span class="attribute">tab-size</span> <span class="number">4</span></span><br><span class="line">    <span class="comment">/*background-color var(--inlinecode-bg-color)*/</span></span><br><span class="line">    <span class="attribute">background-color</span> <span class="built_in">rgba</span>(<span class="number">27</span>, <span class="number">31</span>, <span class="number">35</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="attribute">transition</span> background-color .<span class="number">2s</span> ease-in-out</span><br><span class="line">    <span class="attribute">color</span> orange</span><br></pre></td></tr></table></figure><h3 id="其他杂碎"><a href="#其他杂碎" class="headerlink" title="其他杂碎"></a>其他杂碎</h3><p>需要编辑<code>_config.fluid.yml</code></p><h4 id="左上角小标题"><a href="#左上角小标题" class="headerlink" title="左上角小标题"></a>左上角小标题</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">blog_title:</span> <span class="string">&quot;Henry&#x27;s Hexo&quot;</span></span><br></pre></td></tr></table></figure><h4 id="搜索范围-全局搜索"><a href="#搜索范围-全局搜索" class="headerlink" title="搜索范围 全局搜索"></a>搜索范围 全局搜索</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">field:</span> <span class="string">all</span></span><br></pre></td></tr></table></figure><h4 id="首页大标题"><a href="#首页大标题" class="headerlink" title="首页大标题"></a>首页大标题</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">text:</span> <span class="string">&quot;十年树木，百年树人，千年成精，万年成魔&quot;</span></span><br></pre></td></tr></table></figure><h4 id="文章开头显示更新时间"><a href="#文章开头显示更新时间" class="headerlink" title="文章开头显示更新时间"></a>文章开头显示更新时间</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">updated:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="为移动设备的文章设置目录和跳到顶部按钮"><a href="#为移动设备的文章设置目录和跳到顶部按钮" class="headerlink" title="为移动设备的文章设置目录和跳到顶部按钮"></a>为移动设备的文章设置目录和跳到顶部按钮</h4><p>思路：为文章页面注入 js 和 css 样式，并修改 ejs 主题源代码。<br>通过加载 injector.js 来注入 js 和 css<br><code>hexoProject/scripts/injector.js</code><br><code>这里injector.js中指定了只有post文章才会触发注入</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//injector.js</span></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">injector</span>.<span class="title function_">register</span>(</span><br><span class="line">  <span class="string">&quot;head_end&quot;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/henry.css&quot;&gt;&lt;/link&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&quot;post&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">injector</span>.<span class="title function_">register</span>(</span><br><span class="line">  <span class="string">&quot;body_end&quot;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;script src=&quot;/js/henry.js&quot;&gt;&lt;/script&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&quot;post&quot;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>将主题的 post.ejs 添加修改如下内容，为隐藏的目录添加了 id，henryWong，添加了两个 icon 标签。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- post.ejs --&gt;</span><br><span class="line">    &lt;div class=&quot;side-col d-none d-lg-block col-lg-2&quot; id=&quot;henryWong&quot;&gt;</span><br><span class="line">      &lt;%- inject_point(&#x27;postRight&#x27;) %&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;a href=&quot;#&quot; class=&quot;henryNotMobile&quot; id=&quot;henryTop&quot;&gt;</span><br><span class="line">      &lt;i class=&quot;iconfont icon-arrowup&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line"></span><br><span class="line">    &lt;a href=&quot;javascript:void(0)&quot; class=&quot;henryNotMobile&quot; id=&quot;henryBook&quot;&gt;</span><br><span class="line">      &lt;i class=&quot;iconfont icon-book&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;/a&gt;</span><br></pre></td></tr></table></figure><p>注入的 js 内容如下，初始化页面时检测用户代理决定是否启用移动设备方案，和通过 icon 点击事件控制目录的显示隐藏<br><code>hexoProject/source/js/henry.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// henry.js</span></span><br><span class="line"><span class="keyword">let</span> tocFlag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (navigator.<span class="property">userAgent</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;Mobile&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;检查到移动设备登录&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 目录的样式布局定位只加载一次</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;henryWong&quot;</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;henryToc&quot;</span>);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;henryTop&quot;</span>).<span class="title function_">removeAttribute</span>(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;henryBook&quot;</span>).<span class="title function_">removeAttribute</span>(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bookClick = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;henryBook&quot;</span>);</span><br><span class="line"></span><br><span class="line">bookClick.<span class="property">onclick</span> = <span class="keyword">function</span> <span class="title function_">fBook</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!tocFlag) &#123;</span><br><span class="line">    <span class="title function_">showHenryToc</span>();</span><br><span class="line">    tocFlag = !tocFlag;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">hideHenryToc</span>();</span><br><span class="line">    tocFlag = !tocFlag;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注入的 css，写了目录、目录 icon、跳顶 icon 的布局和定位</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.henryToc</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">  inset: <span class="number">10%</span> <span class="number">0px</span> <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">132</span>, <span class="number">132</span>, <span class="number">132</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">540px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0px</span> auto;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">0%</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0%</span> <span class="number">8%</span> <span class="number">8%</span>;</span><br><span class="line">  <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">11%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#henryTop</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">99</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">2%</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">2%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#henryBook</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">99</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">2%</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">5%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.henryNotMobile</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更多杂碎请移步-Fluid-主题官网"><a href="#更多杂碎请移步-Fluid-主题官网" class="headerlink" title="更多杂碎请移步 Fluid 主题官网"></a>更多杂碎请移步 Fluid 主题官网</h3><h2 id="心仪的主题-——-butterfly-主题"><a href="#心仪的主题-——-butterfly-主题" class="headerlink" title="心仪的主题 —— butterfly 主题"></a>心仪的主题 —— butterfly 主题</h2><p>Fluid 默认的主题色调和功能基本满足我的需求，但是由于在移动设备上浏览时文章的 TOC 目录不会显示，自己写的前端设备判断和目录又比较难堪，所以找到了新的轮子 butterfly。</p><h3 id="开始中文的-butterfly"><a href="#开始中文的-butterfly" class="headerlink" title="开始中文的 butterfly"></a>开始中文的 butterfly</h3><p>hexo 根目录的_config.yml 修改下面内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>安装依赖<code>npm install hexo-generator-search</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>hexo 根目录的_config.yml 加入下面内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索功能，基于 hexo-generator-search 插件，若已安装其他搜索插件请关闭此功能，以避免生成多余的索引文件</span></span><br><span class="line"><span class="comment"># Search feature, based on hexo-generator-search. If you have installed other search plugins, please disable this feature to avoid generating redundant index files</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 搜索索引文件的路径，可以是相对路径或外站的绝对路径</span></span><br><span class="line">  <span class="comment"># Path for search index file, it can be a relative path or an absolute path</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">local-search.xml</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 文件生成在本地的位置，必须是相对路径</span></span><br><span class="line">  <span class="comment"># The location where the index file is generated locally, it must be a relative location</span></span><br><span class="line">  <span class="attr">generate_path:</span> <span class="string">local-search.xml</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 搜索的范围</span></span><br><span class="line">  <span class="comment"># Search field</span></span><br><span class="line">  <span class="comment"># Options: post | page | all</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 搜索是否扫描正文</span></span><br><span class="line">  <span class="comment"># If true, search will scan the post content</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h3><p>sticky 越大越靠前</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="section">sticky: 100</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h3 id="文章的顶部图和封面"><a href="#文章的顶部图和封面" class="headerlink" title="文章的顶部图和封面"></a>文章的顶部图和封面</h3><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">top<span class="emphasis">_img: /img/Java入门/2022-08-10-18-01-11.png</span></span><br><span class="line"><span class="emphasis">cover: /img/Java入门/2022-08-10-18-01-11.png</span></span><br><span class="line"><span class="emphasis">---</span></span><br></pre></td></tr></table></figure><h3 id="首页的文章封面布局"><a href="#首页的文章封面布局" class="headerlink" title="首页的文章封面布局"></a>首页的文章封面布局</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># 封面的位置</span></span><br><span class="line">  <span class="comment"># 三个值可配置 left , right , both</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span></span><br></pre></td></tr></table></figure><h3 id="Mac-风格代码块"><a href="#Mac-风格代码块" class="headerlink" title="Mac 风格代码块"></a>Mac 风格代码块</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_theme:</span> <span class="string">mac</span></span><br></pre></td></tr></table></figure><h3 id="醒目的标题"><a href="#醒目的标题" class="headerlink" title="醒目的标题"></a>醒目的标题</h3><p>能够将<code>标题</code>和<code>正文加粗</code>区分开来，非常实用<br>会改变 ol、ul、h1-h5 的样式</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 美化页面显示</span></span><br><span class="line"><span class="attr">beautify:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># site/post</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>生物</title>
      <link href="/2022/07/25/%E7%94%9F%E7%89%A9/"/>
      <url>/2022/07/25/%E7%94%9F%E7%89%A9/</url>
      
        <content type="html"><![CDATA[<h1 id="生物"><a href="#生物" class="headerlink" title="生物"></a>生物</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是为了阳台种植而记录的笔记，可惜没能好好进行实践。</p><h2 id="什么是生物？"><a href="#什么是生物？" class="headerlink" title="什么是生物？"></a>什么是生物？</h2><p>生物一般有以下特征：</p><p><strong>生物的一生需要不断从外界获得营养物质</strong></p><p>绿色植物通过吸收外界的水、无机盐、二氧化碳，进行光合作用制造出葡萄糖、淀粉等有机物用于自身生存的营养物质。</p><p>动物通过以植物或其他动物为食获取营养物质。</p><p><strong>大多数生物需要呼吸</strong></p><p>鱼类浮出水面换气；植物在有氧条件下呼吸，将有机化合物氧化，产生二氧化碳和水。</p><p><strong>生物能排出体内的废物</strong></p><p>人通过排尿、出汗、呼出气体排出体内废物；植物通过落叶排出废物。</p><p><strong>生物对外界应激性</strong></p><p>含羞草受到触摸时会合拢，动物发现天敌后会撒腿就跑。</p><p><strong>生物的繁殖</strong></p><p>植物通过种子繁殖；动物通过卵、胚胎繁殖。<br><strong>生物的遗传和变异</strong></p><p>生物的子代与亲代之间有许多相同的特征，但总有一部分特征不相同。</p><p><strong>大部分生物由细胞构成</strong></p><p>病毒是不由细胞构成的生物。</p><h2 id="生态系统与食物"><a href="#生态系统与食物" class="headerlink" title="生态系统与食物"></a>生态系统与食物</h2><h3 id="生态系统"><a href="#生态系统" class="headerlink" title="生态系统"></a>生态系统</h3><p>空间内的生物与环境构成了生态系统。</p><p>在生态系统中，植物通过光合作用合成有机物，提供给自身营养，也是其他动物的营养来源，<code>植物是生态系统中的生产者</code>；动物不能自己制造有机物，直接或间接以植物为食，<code>动物是生态系统中的消费者</code>；落叶等动植物残骸被细菌、真菌分解为无机物。<code>细菌和真菌是生态系统中的分解者</code></p><h3 id="食物链"><a href="#食物链" class="headerlink" title="食物链"></a>食物链</h3><p>生态系统中不同生物吃与被吃的关系形成了食物链。草 → 虫 → 小鸡 → 老鹰</p><h3 id="食物网"><a href="#食物网" class="headerlink" title="食物网"></a>食物网</h3><p>生态系统中，多条食物链，交错相连，形成食物网。</p><p>人类排放的有毒物质进入生态系统，通过食物链的不断累积，最终危害人类自身。</p><h2 id="生物圈"><a href="#生物圈" class="headerlink" title="生物圈"></a>生物圈</h2><p>生物圈是最大的生态系统，是地球上的生物和环境组成的生态系统。</p><p>生物圈是地球大气表面到陆地，江水海洋中的所有生态系统的组合，是最大的生态系统。</p><h2 id="从细胞到动物个体"><a href="#从细胞到动物个体" class="headerlink" title="从细胞到动物个体"></a>从细胞到动物个体</h2><p>生物体的生长，与细胞的生长、分裂、分化是分不开的。</p><h3 id="细胞生长"><a href="#细胞生长" class="headerlink" title="细胞生长"></a>细胞生长</h3><p>细胞吸收营养物质，体积从小变大，这就是细胞的生长。</p><h3 id="细胞分裂"><a href="#细胞分裂" class="headerlink" title="细胞分裂"></a>细胞分裂</h3><p>如一个细胞分裂成两个细胞，使细胞的数量增加。</p><h3 id="细胞分化"><a href="#细胞分化" class="headerlink" title="细胞分化"></a>细胞分化</h3><p>细胞分裂出了功能不同的细胞。</p><h3 id="组织"><a href="#组织" class="headerlink" title="组织"></a>组织</h3><p>相同功能、形态、结构的细胞组合在一起形成了组织。</p><p>人体有四种基本组织，上皮组织、肌肉组织、结缔组织、神经组织。</p><h3 id="器官"><a href="#器官" class="headerlink" title="器官"></a>器官</h3><p>不同组织按一定次序结合形成器官。</p><p>人体中的器官，大脑、胃、心脏、肝、肺、肾、眼、耳、甲状腺、唾液腺等。</p><h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><p>多个器官按一定次序组合构成系统。</p><p>人体中的系统，运动系统、呼吸系统、消化系统、循环系统、泌尿系统图、神经系统、内分泌系统、生殖系统等。</p><h2 id="从细胞到植物个体"><a href="#从细胞到植物个体" class="headerlink" title="从细胞到植物个体"></a>从细胞到植物个体</h2><p>像动物那样，植物也是受精卵分裂分化，形成组织、器官，形成植物。</p><h3 id="植物的组织"><a href="#植物的组织" class="headerlink" title="植物的组织"></a>植物的组织</h3><p>分生组织，分生细胞不断分裂分化，是成熟植物体还能不断生长的原因。</p><p>植物组织有，分生组织，保护组织，机械组织，输导组织，营养组织。</p><h3 id="绿色开花植物的器官"><a href="#绿色开花植物的器官" class="headerlink" title="绿色开花植物的器官"></a>绿色开花植物的器官</h3><p>根、茎、叶、花、果实、种子。</p><h4 id="营养器官"><a href="#营养器官" class="headerlink" title="营养器官"></a>营养器官</h4><p>根、茎、叶</p><h4 id="生殖器官"><a href="#生殖器官" class="headerlink" title="生殖器官"></a>生殖器官</h4><p>花、果实、种子</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>英语语法</title>
      <link href="/2022/07/07/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/07/07/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="英语语法"><a href="#英语语法" class="headerlink" title="英语语法"></a>英语语法</h1><h2 id="词法"><a href="#词法" class="headerlink" title="词法"></a>词法</h2><p>词法研究单词的词义和词性。<br>词义，一词多义，在日常的词汇量积累中掌握即可，因此略过。<br>比如中文的<code>包袱</code>：① 用布包起来的衣物包裹;② 精神上的负担。</p><p>这里我们主要讲词性。词性分为实词和虚词。</p><h3 id="实词"><a href="#实词" class="headerlink" title="实词"></a>实词</h3><h4 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h4><h4 id="副词"><a href="#副词" class="headerlink" title="副词"></a>副词</h4><h4 id="动词"><a href="#动词" class="headerlink" title="动词"></a>动词</h4><h5 id="谓语动词"><a href="#谓语动词" class="headerlink" title="谓语动词"></a>谓语动词</h5><h6 id="时态"><a href="#时态" class="headerlink" title="时态"></a>时态</h6><h6 id="语态"><a href="#语态" class="headerlink" title="语态"></a>语态</h6><h6 id="语气"><a href="#语气" class="headerlink" title="语气"></a>语气</h6><h6 id="主谓一致"><a href="#主谓一致" class="headerlink" title="主谓一致"></a>主谓一致</h6><h5 id="非谓语动词"><a href="#非谓语动词" class="headerlink" title="非谓语动词"></a>非谓语动词</h5><h6 id="不定式"><a href="#不定式" class="headerlink" title="不定式"></a>不定式</h6><h6 id="动名词"><a href="#动名词" class="headerlink" title="动名词"></a>动名词</h6><h6 id="分词（现在分词、过去分词）"><a href="#分词（现在分词、过去分词）" class="headerlink" title="分词（现在分词、过去分词）"></a>分词（现在分词、过去分词）</h6><h4 id="数词"><a href="#数词" class="headerlink" title="数词"></a>数词</h4><h4 id="形容词"><a href="#形容词" class="headerlink" title="形容词"></a>形容词</h4><h3 id="虚词"><a href="#虚词" class="headerlink" title="虚词"></a>虚词</h3><h4 id="冠词"><a href="#冠词" class="headerlink" title="冠词"></a>冠词</h4><h4 id="代词"><a href="#代词" class="headerlink" title="代词"></a>代词</h4><h4 id="介词"><a href="#介词" class="headerlink" title="介词"></a>介词</h4><h4 id="连词"><a href="#连词" class="headerlink" title="连词"></a>连词</h4><h4 id="感叹词"><a href="#感叹词" class="headerlink" title="感叹词"></a>感叹词</h4><h2 id="句法"><a href="#句法" class="headerlink" title="句法"></a>句法</h2><h3 id="简单句"><a href="#简单句" class="headerlink" title="简单句"></a>简单句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.主语 + 不及物动词 (S + Vi)</span><br><span class="line"></span><br><span class="line">​2.主语 + 及物动词 + 宾语 (S + Vt + O)</span><br><span class="line"></span><br><span class="line">​3.主语 + 连系动词 + 表语 (S + V系 + P)</span><br><span class="line"></span><br><span class="line">​4.主语 + 及物动词 + 间接宾语 + 直接宾语 (S + Vt + IO + DO)</span><br><span class="line"></span><br><span class="line">​5.主语 + 及物动词 + 宾语 + 宾语补足语 (S + Vt + O + OC)</span><br></pre></td></tr></table></figure><blockquote><p>① 句型：句子的谓语动词都能表达完整的意思。这类动词叫做不及物动词，后面可以跟副词、介词短语、状语从句等</p><p>② 句型：谓语动词都具有实义，都是主语产生的动作，但不能表达完整的意思，必须跟有一个宾语，动作的承受者，才能使意思完整。这类动词叫做及物动词。</p><p>③ 句型：句子谓语动词都不能表达一个完整的意思，必须加上一个表明主语身份或状态的表语构成复合谓语，才能表达完整的意思。这类动词叫做连系动词。表语也就是主语的补足语</p><p>④ 句型：有些及物动词可以有两个宾语,这两个宾语通常一个指人(间接宾语)；一个指物(直接宾语)</p><p>⑤ 句型：动词虽然是及物动词，但是只跟一个宾语还不能表达完整的意思，必须加上一个补充成分来补足宾语，才能使意思完整。</p><p>宾语补足语：位于宾语之后对宾语作出说明的成分。可以用作宾语补足语的有：名词，形容词，不定式，动名词，分词，介词短语等。</p></blockquote><h3 id="并列句"><a href="#并列句" class="headerlink" title="并列句"></a>并列句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">简单句 + **并列连词and,or,but,for等拼接** = 并列句</span><br></pre></td></tr></table></figure><blockquote><p>由并列连词连接、含有两个或更多主谓结构的句子叫并列句。</p></blockquote><h3 id="省略句"><a href="#省略句" class="headerlink" title="省略句"></a>省略句</h3><p>简单句 + <strong>省略主语和谓语的一些成分</strong> &#x3D; 省略句</p><h3 id="倒装句"><a href="#倒装句" class="headerlink" title="倒装句"></a>倒装句</h3><p>简单句 + <strong>主语谓语适当颠倒</strong> &#x3D; 倒装句</p><blockquote><p>倒装句分为完全倒装&amp;不完全倒装</p></blockquote><h3 id="主从复合句"><a href="#主从复合句" class="headerlink" title="主从复合句"></a>主从复合句</h3><p>简单句 + <strong>从属连词</strong> &#x3D; 主从复合句</p><blockquote><p>主从复合句细分</p><ul><li>名词性从句（主语从句、宾语从句、表语从句、同位语从句）</li><li>定语从句（限制性定语从句、非限制性定语从句）</li><li>状语从句（时间、地点、原因、结果、方式、目的、条件、让步、比较，【9 种】）</li></ul></blockquote><h3 id="独立主格结构（未完待续）"><a href="#独立主格结构（未完待续）" class="headerlink" title="独立主格结构（未完待续）"></a>独立主格结构（未完待续）</h3><h3 id="强调句型（未完待续）"><a href="#强调句型（未完待续）" class="headerlink" title="强调句型（未完待续）"></a>强调句型（未完待续）</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>移动光猫DT741-csg</title>
      <link href="/2022/06/28/%E7%A7%BB%E5%8A%A8%E5%85%89%E7%8C%ABDT741-csg/"/>
      <url>/2022/06/28/%E7%A7%BB%E5%8A%A8%E5%85%89%E7%8C%ABDT741-csg/</url>
      
        <content type="html"><![CDATA[<h1 id="移动光猫-DT741-csg"><a href="#移动光猫-DT741-csg" class="headerlink" title="移动光猫 DT741-csg"></a>移动光猫 DT741-csg</h1><h2 id="登录最高权限"><a href="#登录最高权限" class="headerlink" title="登录最高权限"></a>登录最高权限</h2><p>超级账号：<code>admin</code></p><p>密码：<code>Cmcc10086#</code></p><p>位置坐标：0771</p><p>在登录页面可以直接用下面的脚本在浏览器控制台注入，登录管理员账号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username&quot;</span>).<span class="property">value</span> = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;logincode&quot;</span>).<span class="property">value</span> = <span class="string">&quot;Cmcc10086#&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;showpassword&quot;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span><br><span class="line"><span class="title function_">dosubmit</span>();</span><br></pre></td></tr></table></figure><h2 id="开启-ipv6-连接"><a href="#开启-ipv6-连接" class="headerlink" title="开启 ipv6 连接"></a>开启 ipv6 连接</h2><p>略</p><h2 id="关闭-ipv6-防火墙"><a href="#关闭-ipv6-防火墙" class="headerlink" title="关闭 ipv6 防火墙"></a>关闭 ipv6 防火墙</h2><p>安全 → 防火墙 → IPv6Session 防火墙开关</p><h2 id="ipv6-可玩性"><a href="#ipv6-可玩性" class="headerlink" title="ipv6 可玩性"></a>ipv6 可玩性</h2><h3 id="远程桌面"><a href="#远程桌面" class="headerlink" title="远程桌面"></a>远程桌面</h3><p>可以 PC 远程 PC，也可以 Android 远程 PC</p><p><strong>1）PC 远程 PC</strong></p><p>cmd <code>mstsc</code></p><p>主机：<code>ipv6地址</code></p><p>用户名：略</p><p>密码：略</p><p><strong>2）Android 远程 PC</strong></p><p>手机需要安装<code>RD Client</code></p><p>pc name：<code>ipv6地址</code></p><h3 id="访问-ipv6-项目"><a href="#访问-ipv6-项目" class="headerlink" title="访问 ipv6 项目"></a>访问 ipv6 项目</h3><p>访问者支持 ipv6 才能访问 ipv6 项目</p><p><a href="http://[2409:8a5c:1421:19f0:94ec:9d:2f18:7c95]:8080/">http://[2409:8a5c:1421:19f0:94ec:9d:2f18:7c95]:8080/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>软件测试</title>
      <link href="/2022/06/28/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
      <url>/2022/06/28/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="软件测试"><a href="#软件测试" class="headerlink" title="软件测试"></a>软件测试</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>软件测试的首要目的就是提高软件的质量。</p><h2 id="开发自测时使用的技术"><a href="#开发自测时使用的技术" class="headerlink" title="开发自测时使用的技术"></a>开发自测时使用的技术</h2><h3 id="postman"><a href="#postman" class="headerlink" title="postman"></a>postman</h3><p>postman 接口测试工具，新建请求后，输入请求，raw-json，把 json 格式的报文一贴，请求后观察等待响应就好了。</p><h3 id="junit"><a href="#junit" class="headerlink" title="junit"></a>junit</h3><p>tdd 测试驱动开发(Test-Driven Development)<br>把需求拆分成方法，尝试把方法流程图画出来，提出输出假设，确定输入内容，需要判断的条件，需要处理的异常，确定输出内容，编写并测试验证提出的假设。<br>可以理解成，我希望这个方法（接口）给我返回什么数据，我需要在使用方法（接口）时输入什么规则的数据，而方法中业务流程的正确性就是编码内容。</p><p>例如：一个判断是否是偶数的方法<br>最开始时，UserService 是没有方法的实现的，先在 UserService 类名上使用 ALT + Insert 生成 UserServiceTest 测试类<br>UserServiceTest 测试类中使用 ALT + Insert 生成@Test 测试方法<br>assert 断言假设方法的返回值<br>方法可以在测试类中先 userService.evenNumber 再 ALT + Enter 在原非测试类中生成 evenNumber 方法进行编码实现<br>assertEquals 将断言值与方法的返回值比较，相同则测试通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">evenNumber</span><span class="params">(<span class="type">int</span> i)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=<span class="number">0</span> &amp;&amp; i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">evenNumberTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line">        assertAll(</span><br><span class="line">                ()-&gt; assertEquals(<span class="literal">true</span>,userService.evenNumber(<span class="number">0</span>)), <span class="comment">//when i &gt;= 0 and i%2==0</span></span><br><span class="line">                ()-&gt; assertEquals(<span class="literal">false</span>,userService.evenNumber(<span class="number">3</span>)), <span class="comment">//when i &gt;= 0 and i%2!=0</span></span><br><span class="line">                ()-&gt; assertThrows(Exception.class,()-&gt; &#123;userService.evenNumber(-<span class="number">2</span>);&#125;) <span class="comment">//when i &lt; 0</span></span><br><span class="line"><span class="comment">//                ()-&gt; assertTimeout() 方法运行超出规定时间则测试不通过</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-Mock-自测单元"><a href="#Spring-Mock-自测单元" class="headerlink" title="Spring-Mock 自测单元"></a>Spring-Mock 自测单元</h3><p>Spring-Mock 插件可以在开发 spring 项目时结合 junit 进行开发自测，模拟 request，测试带 request 的方法就方便多了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 别忘了导包</span></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mock.web.MockHttpServletRequest;</span><br><span class="line"><span class="type">MockHttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MockHttpServletRequest</span>();</span><br></pre></td></tr></table></figure><h3 id="Fiddler-抓包"><a href="#Fiddler-抓包" class="headerlink" title="Fiddler 抓包"></a>Fiddler 抓包</h3><p>抓包，获取 web 软件请求响应的内容，帮助分析 web 系统的质量，观察涉密字段明文传输，系统的请求时间等。</p><h3 id="Acunetix-漏洞扫描"><a href="#Acunetix-漏洞扫描" class="headerlink" title="Acunetix 漏洞扫描"></a>Acunetix 漏洞扫描</h3><p>扫描 web 系统的漏洞……开发噩梦</p><h2 id="从开发到测试"><a href="#从开发到测试" class="headerlink" title="从开发到测试"></a>从开发到测试</h2><p>为了确保我们开发完的软件是我们想要开发的软件，开发完后都会进行自我测试。</p><p>功能测试、可用性测试、界面测试、数据库测试，用心的开发一般在开发自测阶段就已经包含在开发自测阶段且测试通过了。</p><p>但是因为开发人员的数量和精力等限制，单靠开发者自己是无法完成其他：性能测试、兼容性测试、安全性测试、呼叫外包测试……诸如此类的测试的。</p><p>下面就来讲讲开发自测无法涵盖到的其他种类测试如何展开。</p><h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><p>生不逢时，学校教学的都还是单体应用，与当今企业级项目流行的集群、分布式、高并发、微服务……都不沾边。</p><p>其实企业级项目也是由单体应用一步步升级过来的，可能你的小项目只是缺少了性能测试。</p><h4 id="性能测试的目的"><a href="#性能测试的目的" class="headerlink" title="性能测试的目的"></a>性能测试的目的</h4><p>通过<code>测试系统或接口的性能瓶颈</code>，从而可以实现以下目的：<br>系统峰值稳定性<br>系统内新功能上线的性能影响<br>验证技术架构升级对性能的提升<br>性能调优<br>物理机网络和硬件资源相对于该软件系统的性价比规划</p><p>借培训机构老师吉言：三百个并发，三千个并发，三万个并发，三十万个并发，乃至三百万个并发的方式我都会教到你</p><h4 id="常用性能测试软件"><a href="#常用性能测试软件" class="headerlink" title="常用性能测试软件"></a>常用性能测试软件</h4><p><strong>Loadrunner, JMeter</strong></p><h4 id="使用案例-接口性能测试-测试用例"><a href="#使用案例-接口性能测试-测试用例" class="headerlink" title="使用案例 接口性能测试 测试用例"></a>使用案例 接口性能测试 测试用例</h4><ul><li>性能指标</li></ul><p>并发量：我们通常指的是相对并发量<br>相对并发量，如一秒内 500 个请求数量，500&#x2F;s<br>绝对并发量，某一时刻的请求数量</p><p>吞吐量：单位时间(s)内处理请求的数量，一秒内有多少数量的请求响应<br>QPS(QueryPS)数据查询吞吐量、TPS(TransactionPS)事务操作吞吐量</p><p>响应时间：从请求开始到响应结束的完整时间</p><p>期望结果，吞吐量&gt;&#x3D;并发量</p><ul><li>性能测试针对的目标接口</li><li>性能测试环境<br>在无法对生产环境停机测试时（对用户关闭服务，仅限测试使用），我们需要复刻一个关于生产环境的性能测试环境，<code>完美复刻</code>，<code>物理机数量下降复刻</code><br>比如预期结果 10W&#x2F;s 的并发，20 台机<br><code>完美复刻</code><br>预期结果 10W&#x2F;s 的并发，20 台机，负载均衡后平均一台机要受到 5000&#x2F;s 并发<br><code>物理机数量下降复刻</code><br>一台机 5000&#x2F;s 并发</li></ul><h5 id="负载测试"><a href="#负载测试" class="headerlink" title="负载测试"></a>负载测试</h5><p>不断加大并发，直到系统不满足需求的性能指标，出现性能瓶颈，拐点（通过性能指标监控的拐点得知性能瓶颈）<br><code>期望结果</code><br>得到系统承载的极限并发</p><p><code>测试步骤</code><br>设计线程数量，我们直接设计一秒 5000 个线程不就好了？可以，但是我们在测试时很难绝对控制 5000&#x2F;s 的并发数量</p><p>通常使用下面公式来设计线程数量<br>如，当并发时间单位是&#x2F;s 秒时<br><code>线程数量</code> * 单次请求到响应消耗的时间 &#x3D; 1s<br><code>线程数量</code> &#x3D; 并发时间单位(1s) &#x2F; 单次请求到响应消耗的时间</p><p>通过 jmeter、多线程代码等手段负载测试，慢慢增加，最终达到设计的线程数量</p><h5 id="压力测试（稳定性测试）"><a href="#压力测试（稳定性测试）" class="headerlink" title="压力测试（稳定性测试）"></a>压力测试（稳定性测试）</h5><p>极限并发下，系统能否稳定</p><h3 id="Jmeter-负载测试实战"><a href="#Jmeter-负载测试实战" class="headerlink" title="Jmeter 负载测试实战"></a>Jmeter 负载测试实战</h3><p>JMeter 可以用于 Web 应用程序测试，还可以测试静态和动态资源，比如静态文件、Java 程序、CGI 脚本、数据库等等，Jmeter 可对服务器、网络或对象模拟巨大的网络负载，在不同压力类别下测试它们的强度和分析整体性能。</p><p>安装 Jmeter，略……</p><p>需要在官网下载<a href="https://jmeter-plugins.org/install/Install/">plugins-manager.jar</a>，放在 jmeter 安装路径的 lib&#x2F;ext 目录，然后重启 Jmeter</p><p>打开插件管理，安装 Custom Thread Groups 插件<br><img src="/img/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/2023-03-12-21-56-34.png" alt="打开插件管理"><br>安装 Custom Thread Groups 插件，并重启<br><img src="/img/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/2023-03-12-22-00-00.png"><br>可能因网络原因下载失败，多试几次或者科学下载</p><h2 id="搭建性能指标监控"><a href="#搭建性能指标监控" class="headerlink" title="搭建性能指标监控"></a>搭建性能指标监控</h2><h3 id="prometheus-数据源"><a href="#prometheus-数据源" class="headerlink" title="prometheus 数据源"></a>prometheus 数据源</h3><p>先下载 prometheus 数据源<br>默认配置解压进入文件夹后直接使用命令<code>./prometheus</code>启动即可<br>Prometheus 界面<br><a href="http://localhost:9090/">http://localhost:9090</a><br><img src="/img/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/2023-03-12-19-59-22.png" alt="Prometheus界面"></p><h3 id="Grafana-监控面板"><a href="#Grafana-监控面板" class="headerlink" title="Grafana 监控面板"></a>Grafana 监控面板</h3><p>安装后使用<code>service grafana-server start</code>命令启动<br>如果是解压版的可以用<code>grafana-server web</code>启动<br>管理员账号密码默认是 admin&#x2F;admin<br>首次登陆需要修改管理员密码<br>Grafana 界面<br><a href="http://localhost:3000/">http://localhost:3000/</a><br>设置添加 prometheus 数据源<br><img src="/img/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/2023-03-12-20-11-09.png" alt="添加 prometheus数据源"></p><p>此时可以添加 dashboard，也就是监控面板了，在刚配好的 Prometheus Data Source 的设置中有一个标签就是 dashboard，我们导入 Prometheus 2.0 Stats 这个面板，就能看到我们 Prometheus 的一些基本监控情况了，这其实就是导入了一个别人写好的面板配置，并且连接我们自己 Prometheus 的监控数据做展示。<br><img src="/img/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/2023-03-12-20-25-39.png" alt="添加面板"></p><h3 id="添加-exporter"><a href="#添加-exporter" class="headerlink" title="添加 exporter"></a>添加 exporter</h3><p>监控机器的状态，包括硬盘、CPU、流量等。因为 Prometheus 已经有了很多现成的常用 exporter，所以我们直接用其中的<a href="https://github.com/prometheus/node_exporter/releases">node_exporter</a>。这是将一个个机器抽象成节点监控，和 nodejs 没关系<br><code>./node_exporter</code>运行节点监控采集服务</p><p>修改 prometheus 的配置文件，以添加 node_exporter</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&quot;prometheus&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># metrics_path defaults to &#x27;/metrics&#x27;</span></span><br><span class="line">    <span class="comment"># scheme defaults to &#x27;http&#x27;.</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&quot;localhost:9090&quot;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&quot;node_server&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&quot;localhost:9100&quot;</span>]</span><br></pre></td></tr></table></figure><p>改完 prometheus 的配置文件后，重新运行 prometheus<br><img src="/img/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/2023-03-12-20-38-35.png" alt="添加 exporter"></p><h3 id="jmeter-和-grafana"><a href="#jmeter-和-grafana" class="headerlink" title="jmeter 和 grafana"></a>jmeter 和 grafana</h3><p>在使用 jmeter 测试时，可以使用 grafana 监控 jmeter 的工作，更清晰直观<br><code>jmeter + influxdb + grafana</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux入门</title>
      <link href="/2022/06/21/Linux%E5%85%A5%E9%97%A8/"/>
      <url>/2022/06/21/Linux%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-入门"><a href="#Linux-入门" class="headerlink" title="Linux 入门"></a>Linux 入门</h1><h2 id="linux-包管理器"><a href="#linux-包管理器" class="headerlink" title="linux 包管理器"></a>linux 包管理器</h2><table><thead><tr><th>操作系统</th><th>格式</th><th>工具</th></tr></thead><tbody><tr><td>Debian</td><td>.deb</td><td>apt, apt-cache, apt-get, dpkg</td></tr><tr><td>Ubuntu</td><td>.deb</td><td>apt, apt-cache, apt-get, dpkg</td></tr><tr><td>CentOS</td><td>.rpm</td><td>yum</td></tr><tr><td>Fedora</td><td>.rpm</td><td>dnf</td></tr><tr><td>FreeBSD</td><td>Ports, .txz</td><td>make, pkg</td></tr></tbody></table><p>apt 是一个命令行工具，是用来和用户进行交互的，可以简单理解为不建议在脚本中使用。<br>apt-get 命令应该用在脚本中。<br>对于语法而言，apt 和 apt-get 在大多数情况下都是一样的。</p><h2 id="日志保存和打印"><a href="#日志保存和打印" class="headerlink" title="日志保存和打印"></a>日志保存和打印</h2><p>运行并将日志按时间<code>年月日</code>命名，处理后的文件名是<code>ayao-年月日.log</code>即格式化后：<code>ayao-19990203.log</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> java-jar ayao.jar &gt;&gt; ./ayao-`<span class="built_in">date</span> +<span class="string">&quot;%Y%m%d&quot;</span>`.<span class="built_in">log</span> &amp;</span><br></pre></td></tr></table></figure><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询进程id</span></span><br><span class="line"><span class="comment">#比如 nginx</span></span><br><span class="line">ps -ef | grep nginx | grep -v grep | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span></span><br><span class="line"><span class="comment">#14204</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#kill 14204</span></span><br><span class="line"><span class="built_in">kill</span> `ps -ef | grep nginx | grep -v grep | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>移动魔百盒CM311-5s</title>
      <link href="/2022/06/19/%E7%A7%BB%E5%8A%A8%E9%AD%94%E7%99%BE%E7%9B%92CM311-5s/"/>
      <url>/2022/06/19/%E7%A7%BB%E5%8A%A8%E9%AD%94%E7%99%BE%E7%9B%92CM311-5s/</url>
      
        <content type="html"><![CDATA[<h2 id="移动魔百盒-CM311-5s-安装第三方桌面"><a href="#移动魔百盒-CM311-5s-安装第三方桌面" class="headerlink" title="移动魔百盒 CM311-5s 安装第三方桌面"></a>移动魔百盒 CM311-5s 安装第三方桌面</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>移动魔百盒 CM311-5s，支持 wifi，蓝牙，蓝牙语音遥控，但是<code>盒子生态过于封闭</code>，目前还没有适配的刷机包，所以有了安装第三方桌面的想法。</p><h3 id="硬件参数"><a href="#硬件参数" class="headerlink" title="硬件参数"></a>硬件参数</h3><p>商品名称：魔百和 CM311-5s<br>商品编号：100035117726<br>商品毛重：200.00g<br>商品产地：中国大陆<br>功能：Wi-Fi，教育 CPU<br>核心数：四核<br>网口规格：百兆网口<br>投屏协议：不支持<br>专属模式：其他<br>Wi-Fi 连接：双频 Wi-Fi 5<br>内容源：其他<br>输出分辨率：1080P<br>遥控器：红外遥控<br>恢复出厂设置的重置密码：10086<br><img src="/img/%E7%A7%BB%E5%8A%A8%E9%AD%94%E7%99%BE%E7%9B%92CM311-5s/2024-04-18-00-21-31.png"></p><h3 id="准备工作与思路"><a href="#准备工作与思路" class="headerlink" title="准备工作与思路"></a>准备工作与思路</h3><p>能开热点的 windows、mac 或 linux 系统，因为需要利用 hosts 文件的特性，将配置的域名解析到 hosts 指定的 IP 地址。</p><p>利用盒子播放某些视频时会请求固定的域名触发自动下载安装<code>咪咕极速.apk</code>的特性。</p><p>将 gamedownload.taipan.bja.bcs.ottcn.com 域名解析到新指定的 IP 地址 175.24.235.166</p><p>这个新 ip 目录下含有楼主设置的一个<code>当贝应用.apk</code>文件</p><p>原本对 gamedownload.taipan.bja.bcs.ottcn.com 的解析将会由<code>咪咕极速版.apk</code>，转变为<code>当贝应用.apk</code></p><h3 id="开始工作与实践"><a href="#开始工作与实践" class="headerlink" title="开始工作与实践"></a>开始工作与实践</h3><p>（1）<strong>修改电脑<code>hosts</code>文件</strong></p><p>需要管理员身份打开 hosts 文件，具体路径：<code>C:\Windows\System32\drivers\etc</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在下面添加一行（这个ip目录下含有楼主设置的一个当贝应用apk文件）：</span></span><br><span class="line"><span class="number">175.24</span>.<span class="number">235.166</span> gamedownload.taipan.bja.bcs.ottcn.com</span><br></pre></td></tr></table></figure><p>保存后记得在 cmd 使用命令刷新<code>ipconfig /flushdns</code></p><p>（2）<strong>使用安卓手机连接测试</strong></p><p>使用安卓手机连接修改 hosts 完毕后电脑开的热点并访问链接<a href="http://gamedownload.taipan.bja.bcs.ottcn.com/upgrade/nams/app/1269/1649925894696migujisu-beijing.apk">http://gamedownload.taipan.bja.bcs.ottcn.com/upgrade/nams/app/1269/1649925894696migujisu-beijing.apk</a></p><p>将会得到一个 16M 大小的<code>apk</code>文件，查看安装包图标或安装后确认是<code>当贝应用.apk</code>，说明前面的 hosts 修改已经生效。<br>（3）<strong>使用魔百盒复现手机连接的测试结果</strong><br>首先，确保之前魔百盒内没有安装<code>咪咕极速</code>，可以使用遥控蓝牙语音口令<code>卸载咪咕极速</code>将咪咕极速卸载。<br>后面可能要看脸了，因为要访问一个能触发下载安装咪咕极速（那个域名）的视频，或者说你记得有哪些视频可以触发咪咕极速的下载，也可以直接搜索后访问，等安装咪咕极速的提示走完，顺利的话你的魔百盒内已将<code>当贝应用</code>安装进去。</p><p>（4）<strong>配置与使用</strong></p><p>遥控蓝牙语音指令<code>打开当贝桌面</code>，即可进入当贝桌面。</p><p>遥控蓝牙语音指令<code>打开桌面</code>，也可以点击遥控的<code>主页</code>按钮，即可进入桌面选择，选择原装系统桌面和当贝桌面。</p><h3 id="开始工作与实践-v2"><a href="#开始工作与实践-v2" class="headerlink" title="开始工作与实践_v2"></a>开始工作与实践_v2</h3><ul><li><p>查看咪咕视频下载请求的 host 域名和 path<br><img src="/img/%E7%A7%BB%E5%8A%A8%E9%AD%94%E7%99%BE%E7%9B%92CM311-5s/2024-04-17-00-06-58.png"><br>分析网络流量可以看到系统升级后，host 和 path 需要请求的是<br><code>http://update.bja.bcs.ottcn.com/upgrade/nams/app/1269/1703487281827migujisu_APK_beijing_v1.5.1_Release_20231214110717_signed_20231214152404_sec_signed(1).apk</code></p></li><li><p>使用 caddy 快速搭建 80 端口的 http 静态资源下载服务器<br>指定静态资源下载服务器的 root 目录，并确保子目录有对应的 apk 文件（原先的当贝应用 apk 文件）即可<br><code>C:/rootDir/upgrade/nams/app/1269/1703487281827migujisu_APK_beijing_v1.5.1_Release_20231214110717_signed_20231214152404_sec_signed(1).apk</code></p></li><li><p>修改 hosts 文件</p></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在下面添加一行：</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">137.1</span> update.bja.bcs.ottcn.com</span><br></pre></td></tr></table></figure><p><code>ping update.bja.bcs.ottcn.com</code><br>如果域名解析不正确试试<code>ipconfig /flushdns</code></p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>感谢原楼主提供的当贝桌面资源 ip 服务，大家快去白嫖。[^1]</p><p>我们可以自己抓取电视盒子访问安装软件的请求地址，根据抓来的请求地址架设一套服务，修改 hosts 解析到架设的 ip 服务，再请求域名解析访问到修改 hosts 后架设的 ip 服务即可。</p><h2 id="外接-USB-存储设备"><a href="#外接-USB-存储设备" class="headerlink" title="外接 USB 存储设备"></a>外接 USB 存储设备</h2><p>FAT32 的 U 盘，可以识别得到<br>不过 FAT32 传文件时有 4G 大小限制，有空试试 exFAT 或别的格式，exfat 也可以，只是我想玩的 proot 容器的 Debian 系统无法运行，暂时不清楚根本原因<br><img src="/img/%E7%A7%BB%E5%8A%A8%E9%AD%94%E7%99%BE%E7%9B%92CM311-5s/2023-07-27-23-37-44.png"></p><h2 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h2><h3 id="系统时间问题"><a href="#系统时间问题" class="headerlink" title="系统时间问题"></a>系统时间问题</h3><p>用 date 命令可以看到现在的时间是 1970 年（实际上正确的现在时间是 2024 年），这会影响到很多基于时间的比较和同步，比如我的 grafana 就直接挂掉了没有数据，还有日志时间，文件创建修改时间都是 1970……</p><p><img src="/img/%E7%A7%BB%E5%8A%A8%E9%AD%94%E7%99%BE%E7%9B%92CM311-5s/2024-04-21-16-26-18.png"></p><ul><li>Android 系统时间同步流程<br>①<del>使用 sim 卡通过基站同步</del>我们插不了 sim 卡啊<br>② 通过网络上的时间服务器同步<br>内网环境下则需要一台自己的 NTP 服务器。Network Time Protocol(懒得搭建时间服务器了)</li></ul><p><code>应用软件软件里的时间不再可靠</code><br><img src="/img/%E7%A7%BB%E5%8A%A8%E9%AD%94%E7%99%BE%E7%9B%92CM311-5s/2024-04-21-16-58-54.png"></p><h3 id="解决时间同步问题"><a href="#解决时间同步问题" class="headerlink" title="解决时间同步问题"></a>解决时间同步问题</h3><p>先通过 WiFi 连接到互联网，安卓系统会自动从 NTP 服务器同步时间；<br>然后再插入内网的网线，断开外网 WiF，date 命令可以看到时间已正确同步，不再是 1970 年；</p><h3 id="Alist"><a href="#Alist" class="headerlink" title="Alist"></a>Alist</h3><p>需要先安装 termux<br><code>termux-app_v0.118.0+github-debug_armeabi-v7a.apk</code></p><p><code>pkg install alist</code><br><code>alist server</code>记得看一下日志输出的 admin 用户默认随机密码，等会进去改成自己的密码<br>测试了一下是可以读写的 USB 存储设备的。</p><p>可以试试 USB 外接一些大存储的硬盘，<br>USB 移动硬盘<br><code>USB的nv硬盘盒子+硬盘</code>目前我用的这个方案当缓存盘用，省电轻便，准备有空再来两个归档盘</p><h3 id="termux-media-play-床头音频播放器"><a href="#termux-media-play-床头音频播放器" class="headerlink" title="termux-media-play 床头音频播放器"></a>termux-media-play 床头音频播放器</h3><p>这玩意不是有 3.5mm 的音频输出孔嘛，别浪费了，插个耳机或者喇叭音响变身床头音乐盒<br>直接播放文件夹内所有音乐<code>termux-media-play play xxx.mp3</code>，命令只能接一个文件名，可以配合红外手机遥控调节音量</p><p>sox 方案也可以播音频，但是在我使用一段时间后 sox 报错了，需要重启才能正常<br><code>pkg install sox</code><br>命令可以接多个文件名<br><code>play ./*/*.mp3</code><br>sox: Sorry, there is no default audio device configured<br>或许这个依赖有用，但是我已经局域网了没机会尝试，<code>apt install libsox-fmt-all</code></p><h3 id="语音引擎"><a href="#语音引擎" class="headerlink" title="语音引擎"></a>语音引擎</h3><p><code>termux-tts-engines</code>返回空，那就是没有内置语音引擎？感觉安装几个<br>安装后要去安卓系统设置无障碍那里启用，小米和科大讯飞居然是一样的声音<br><img src="/img/%E7%A7%BB%E5%8A%A8%E9%AD%94%E7%99%BE%E7%9B%92CM311-5s/2023-10-07-11-33-33.png"><br><code>termux-tts-speak msg……</code>一般用这个就可以朗读 msg 了<br>如果想切换现有引擎的话可以<br><code>termux-tts-speak -e &quot;com.xiaomi.mibrain.speech&quot; &#39;大家转载文章注意标明文章出处啊&#39;</code></p><h3 id="caddy"><a href="#caddy" class="headerlink" title="caddy"></a>caddy</h3><h3 id="code-server"><a href="#code-server" class="headerlink" title="code-server"></a>code-server</h3><h3 id="pulseaudio"><a href="#pulseaudio" class="headerlink" title="pulseaudio"></a>pulseaudio</h3><h2 id="自启动配置"><a href="#自启动配置" class="headerlink" title="自启动配置"></a>自启动配置</h2><p>termux 自启动和启动项配置<br><code>vim ~/.bashrc</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">termux-wake-lock</span><br><span class="line">sshd</span><br><span class="line">(<span class="built_in">cd</span> /data/data/com.termux/files/home &amp;&amp; bash start-debian.sh &gt; /dev/null 2&gt;&amp;1 &amp;)</span><br></pre></td></tr></table></figure><p>chmod +x ~&#x2F;.bashrc<br>下面的命令需要配合 termux-boot<br>cp ~&#x2F;.bashrc ~&#x2F;.termux&#x2F;boot&#x2F;autoTask<br>chmod +x ~&#x2F;.termux&#x2F;boot&#x2F;autoTask</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>[^1]: CM311-5s 安装第三方桌面[<a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&tid=8237740%5D">https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=8237740]</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>gitea版本管理</title>
      <link href="/2022/06/17/gitea%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
      <url>/2022/06/17/gitea%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="gitea-版本管理"><a href="#gitea-版本管理" class="headerlink" title="gitea 版本管理"></a>gitea 版本管理</h1><h2 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 git</h2><p>略……</p><h2 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h2><p>需要有 MySQL、PostgreSQL、MSSQL 或 SQLite3 其中一个用于 gitea 存储数据，目前我用 Mariadb 也不是不行，略……</p><h2 id="获取-gitea"><a href="#获取-gitea" class="headerlink" title="获取 gitea"></a>获取 gitea</h2><p>从<code>https://dl.gitea.io/gitea</code>找到适配您系统的二进制安装地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget -O gitea https://dl.gitea.io/gitea/1.16.8/gitea-1.16.8-linux-arm64</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">curl -O https://dl.gitea.io/gitea/1.16.8/gitea-1.16.8-linux-arm64</span><br><span class="line"><span class="comment"># 设置运行权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x gitea</span><br></pre></td></tr></table></figure><h2 id="初始化和配置-gitea"><a href="#初始化和配置-gitea" class="headerlink" title="初始化和配置 gitea"></a>初始化和配置 gitea</h2><p>在安装目录下使用<code>./gitea web</code>启动 gitea，访问<code>localhost:3000</code>即可访问 gitea，首次进入还可以进行配置，后续可以在 gitea 所在的目录内的<code>/custom/conf/app.ini</code>修改配置</p><h2 id="初始化或运行失败"><a href="#初始化或运行失败" class="headerlink" title="初始化或运行失败"></a>初始化或运行失败</h2><p>gitea 不允许以 root 用户启动，需要切换到另外的用户运行，我们使用<code>useradd hyao</code>添加新的 linux 用户。</p><p>检查<code>app.ini</code>的<code>RUN_USER</code>是否为非 root 用户。</p><h2 id="push-失败"><a href="#push-失败" class="headerlink" title="push 失败"></a>push 失败</h2><p>为 hyao 用户的 git 设置用户名和邮箱<code>vim ~/.gitconfig</code></p><h2 id="设置-gitea-自启动"><a href="#设置-gitea-自启动" class="headerlink" title="设置 gitea 自启动"></a>设置 gitea 自启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su - hyao -c /usr/local/git-workspace/gitea web</span><br><span class="line"><span class="comment"># 切换到非root用户hyao并运行安装目录下的gitea</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>联想Z5刷机</title>
      <link href="/2022/06/11/%E8%81%94%E6%83%B3Z5%E5%88%B7%E6%9C%BA/"/>
      <url>/2022/06/11/%E8%81%94%E6%83%B3Z5%E5%88%B7%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="联想-Z5-刷机"><a href="#联想-Z5-刷机" class="headerlink" title="联想 Z5 刷机"></a>联想 Z5 刷机</h1><h2 id="开启-USB-调试"><a href="#开启-USB-调试" class="headerlink" title="开启 USB 调试"></a>开启 USB 调试</h2><p>设置-系统-关于本机-ZUI 版本</p><p>连续点击多次<code>ZUI版本</code>开启开发者模式</p><p>设置-系统-开发者选项-调试-USB 调试</p><p><code>开启USB调试</code></p><h2 id="安装-PC-端驱动和-9008-刷机工具"><a href="#安装-PC-端驱动和-9008-刷机工具" class="headerlink" title="安装 PC 端驱动和 9008 刷机工具"></a>安装 PC 端驱动和 9008 刷机工具</h2><ul><li><code>9008通用驱动</code></li><li><code>9008刷机工具（QPST.WIN.2.7.451.2）</code></li><li><code>联想USB驱动（LenovoUsbDriver_1.0.0.exe）</code><br>fastboot 用到</li><li>USB 端口补丁（好像是为了适配 USB3.0）</li></ul><h2 id="确认连接是否成功"><a href="#确认连接是否成功" class="headerlink" title="确认连接是否成功"></a>确认连接是否成功</h2><h3 id="无法识别的-USB-设备"><a href="#无法识别的-USB-设备" class="headerlink" title="无法识别的 USB 设备"></a>无法识别的 USB 设备</h3><p><code>！跟这台计算机连接的前一个USB设备工作不正常，Windows无法识别它。</code></p><p>win7 及以上，更改高级电源设置，确保<code>USB选择性暂停设置已禁用</code></p><h2 id="进入官方-rec-的方法"><a href="#进入官方-rec-的方法" class="headerlink" title="进入官方 rec 的方法"></a>进入官方 rec 的方法</h2><p>联想 Z5 进入 recovery 模式的方法</p><p>手机关机后，按住<code>音量加</code>，接上充电线，直到进入机器人倒地松开按键，这时可以拔掉数据线。然后按住<code>电源键</code>的同时短按一下<code>音量加</code>即可进入 rec。</p><h2 id="刷-miui-开机之后，建议必禁包名"><a href="#刷-miui-开机之后，建议必禁包名" class="headerlink" title="刷 miui 开机之后，建议必禁包名"></a>刷 miui 开机之后，建议必禁包名</h2><p><code>adb shell pm disable-user packageName</code><br><code>adb shell pm enable packageName</code><br>packageName 如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">com.miui.analytics（小米广告分析，必删）</span><br><span class="line">com.miui.systemAdSolution（小米系统广告解决方案，必删）</span><br><span class="line">com.android.quicksearchbox 搜索</span><br><span class="line">com.miui.hybrid 快应用</span><br><span class="line">com.miui.hybrid.accessory 快应用服务</span><br></pre></td></tr></table></figure><p>快应用原理是混合开发用 webview 接入任意的 web 页面，这些接入快应用的任意 web 页面都可以看作是已安装的应用程序；<br>但实际上在移动端，企业们不想要<del>web 页面</del>而是喜欢自己弄一套封闭的 app 生态，来逃避原有的规则束缚干坏事，用户无法通过 web 页面使用服务，只能下载 apk，所以块应用就没有存在的必要了。</p><h2 id="可选包名-packageName"><a href="#可选包名-packageName" class="headerlink" title="可选包名 packageName"></a>可选包名 packageName</h2><p>com.miui.analytics（小米广告分析，必删）<br>com.miui.systemAdSolution（小米系统广告解决方案，必删）<br>com.miui.virtualsim 全球上网<br>com.android.email 电子邮件<br>com.miui.backup 备份<br>com.miui.notes 便签<br>com.miui.hybrid 快应用<br>com.miui.hybrid.accessory 快应用服务<br>com.xiaomi.scanner 扫一扫<br>com.android.quicksearchbox 搜索<br>com.miui.voiceassist 小爱同学<br>com.miui.player 音乐<br>com.miui.video 视频<br>com.miui.backup 备份<br>com.miui.cloudbackup 桌面备份<br>com.miui.bugreport 用户反馈<br>com.miui.touchassistant 悬浮球<br>com.android.printspooler 打印处理服务<br>com.android.bips 默认打印服务<br>com.xiaomi.gamecenter 游戏<br>com.xiaomi.gamecenter.sdk.service 游戏服务<br>com.miui.userguide 用户手册<br>com.miui.cloudservice 小米云服务<br>com.android.midrive 小米云盘<br>com.miui.yellowpage 生活黄页<br>com.miui.screenrecorder 屏幕录制<br>com.android.browser 浏览器<br>com.miui.contentextension 传送门<br>com.android.providers.userdictionary 用户字典<br>com.xiaomi.payment 米币支付<br>com.xiaomi.drivemode 驾车模式<br>com.android.stk USIM 卡应用<br>com.xiaomi.simactivate.service 小米 SIM 卡激活服务<br>com.sohu.inputmethod.sogou.xiaomi 搜狗输入法小米版<br>com.miui.personalassistant 智能助理<br>com.android.calllogbackup 小米云服务中备份通话记录的<br>com.miui.systemAdSolution msa 小米广告推送服务<br>com.xiaomi.scanner 扫一扫<br>com.miui.analytics Analytics(未知)<br>com.dsi.ant.server ANT HAL Service(未知)<br>com.svox.pico Pico TTS 语音识别系统<br>com.android.thememanager 个性主题<br>com.miui.compass 指南针<br>com.miui.aod 万象熄屏</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nodejs入门</title>
      <link href="/2022/06/05/nodejs%E5%85%A5%E9%97%A8/"/>
      <url>/2022/06/05/nodejs%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="nodejs-入门"><a href="#nodejs-入门" class="headerlink" title="nodejs 入门"></a>nodejs 入门</h1><p>nodejs 是基于 chrome V8 引擎的可以脱离浏览器运行的 js。</p><h2 id="下载安装和环境配置"><a href="#下载安装和环境配置" class="headerlink" title="下载安装和环境配置"></a>下载安装和环境配置</h2><p>这里介绍解压版的环境配置<br>node 集成了 npm 包管理器，我们可以在解压的根目录下新建这两个文件夹<code>node_global</code>，<code>node_cache</code>方便后面的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PATH 设置为node和npm可执行文件所在路径</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:/opt/node_v8/bin&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:/opt/node_v8/node_global&quot;</span></span><br><span class="line"><span class="comment"># 现在可以在命令行中用 npm -v和 node -v测试一下是否安装成功</span></span><br><span class="line"><span class="comment">#为npm配置global和cache</span></span><br><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;/opt/node_v8/node_global&quot;</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;/opt/node_v8/node_cache&quot;</span></span><br></pre></td></tr></table></figure><h2 id="第一个-nodejs-程序"><a href="#第一个-nodejs-程序" class="headerlink" title="第一个 nodejs 程序"></a>第一个 nodejs 程序</h2><p>创建<code>hello.js</code>，内容如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello.js run&quot;</span>); <span class="comment">// hello.js run</span></span><br></pre></td></tr></table></figure><p>运行 hello.js</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 两个命令都可以运行</span></span><br><span class="line">node hello.js</span><br><span class="line">node hello</span><br></pre></td></tr></table></figure><h2 id="nodejs-作为服务端"><a href="#nodejs-作为服务端" class="headerlink" title="nodejs 作为服务端"></a>nodejs 作为服务端</h2><p>与 Java 的 import 类似，nodejs 使用<code>require</code>导包</p><p>创建<code>nodeServer.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nodeServer.js</span></span><br><span class="line"><span class="comment">// 导入http的包</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="comment">// 创建一个httpserver服务，设置服务端响应内容，监听8888端口。</span></span><br><span class="line">http</span><br><span class="line">  .<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">request, response</span>) &#123;</span><br><span class="line">    response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&quot;Content-type&quot;</span>: <span class="string">&quot;text/plain&quot;</span> &#125;);</span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&quot;Welcome to  nodejs server&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">listen</span>(<span class="number">8888</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;nodejs server http://localhost:8888&quot;</span>);</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node nodeServer.js</span><br></pre></td></tr></table></figure><p>浏览器访问<br><a href="http://localhost:8888/">http://localhost:8888</a> 能看到<code>Welcome to  nodejs server</code>就是成功了。</p><h2 id="nodejs-连接-Mysql-数据库"><a href="#nodejs-连接-Mysql-数据库" class="headerlink" title="nodejs 连接 Mysql 数据库"></a>nodejs 连接 Mysql 数据库</h2><p>安装 mysql 驱动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mysql</span><br></pre></td></tr></table></figure><p>新建<code>database.js</code>连接 mysql 数据库</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">&quot;mysql&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&quot;123456&quot;</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">connection.<span class="title function_">connect</span>();</span><br><span class="line"></span><br><span class="line">connection.<span class="title function_">query</span>(<span class="string">&quot;SELECT 1 + 1 AS solution&quot;</span>, <span class="keyword">function</span> (<span class="params">error, results, fields</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The solution is: &quot;</span>, results[<span class="number">0</span>].<span class="property">solution</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">connection.<span class="title function_">end</span>();</span><br></pre></td></tr></table></figure><h2 id="Es6-常用特性"><a href="#Es6-常用特性" class="headerlink" title="Es6 常用特性"></a>Es6 常用特性</h2><h3 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a>let 和 const</h3><p><code>let</code>定义变量，<code>const</code>定义常量</p><p>let 就是为定义局部变量而生的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;孙行者&quot;</span>;</span><br><span class="line"><span class="comment">// 常量</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="title class_">Math</span>.<span class="property">PI</span>;</span><br></pre></td></tr></table></figure><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;李大明&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//es6模板字符串</span></span><br><span class="line"><span class="keyword">let</span> newStr = <span class="string">`我是<span class="subst">$&#123;person.name&#125;</span>，今年<span class="subst">$&#123;person.age&#125;</span>岁`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传统拼接</span></span><br><span class="line"><span class="keyword">let</span> oldStr = <span class="string">&#x27;我是&#x27;</span>+person.<span class="property">name</span>+<span class="string">&#x27;，今年&#x27;</span>+person.<span class="property">age</span><span class="string">&#x27;岁&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置参数默认值a=100,b=3</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a = <span class="number">100</span>, b = <span class="number">3</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">sun</span>(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统函数</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 箭头函数 去掉function用箭头</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">sum</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 箭头函数 去掉return</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">sum</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br></pre></td></tr></table></figure><p><code>如果return前有代码块则不能去掉return</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> obj * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数 只有一个参数时可以去掉括号()</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">map</span>(<span class="function">(<span class="params">obj</span>) =&gt;</span> obj * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//觉得可读性有点差可以尝试还原一下</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">map</span>(<span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> obj * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="对象简写"><a href="#对象简写" class="headerlink" title="对象简写"></a>对象简写</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统对象</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;孙行者&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">skill</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我会打妖怪&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// es6对象</span></span><br><span class="line"><span class="comment">// 对象内容是以key:value存在的</span></span><br><span class="line"><span class="comment">// key和value变量名相同时，可只定义一次</span></span><br><span class="line"><span class="comment">// value是函数时，可以去掉:function</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;孙行者&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">  name,</span><br><span class="line">  age,</span><br><span class="line">  <span class="title function_">skill</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我会打妖怪&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;孙行者&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">skill</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我会打妖怪&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 获取对象的属性和方法 传统方法</span></span><br><span class="line"><span class="keyword">var</span> name = data.<span class="property">name</span>;</span><br><span class="line"><span class="keyword">var</span> age = data.<span class="property">age</span>;</span><br><span class="line"><span class="keyword">var</span> skill = data.<span class="title function_">skill</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = data[<span class="string">&quot;name&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> age = data[<span class="string">&quot;age&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> skill = data[<span class="string">&quot;skill&quot;</span>]();</span><br><span class="line"><span class="comment">// 获取对象的属性和方法 es6</span></span><br><span class="line"><span class="keyword">var</span> &#123; name, age, skill &#125; = data;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">var</span> name = data.<span class="property">name</span>;</span><br><span class="line"><span class="keyword">var</span> age = data.<span class="property">age</span>;</span><br><span class="line"><span class="keyword">var</span> skill = data.<span class="title function_">skill</span>();</span><br></pre></td></tr></table></figure><h3 id="对象传播操作符…"><a href="#对象传播操作符…" class="headerlink" title="对象传播操作符…"></a>对象传播操作符…</h3><p>对象传播操作符<code>...</code>将前后对象内容拆分解构互补，传播符后将解构为一个新的对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;孙行者&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">skill</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会打妖怪&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在解构时进行对象传播...</span></span><br><span class="line"><span class="keyword">var</span> &#123;skill...person&#125; = data;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">var</span> skill = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会打妖怪&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;孙行者&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Map-处理数组"><a href="#Map-处理数组" class="headerlink" title="Map 处理数组"></a>Map 处理数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">map</span>(<span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> obj * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理数组对象</span></span><br><span class="line"><span class="keyword">var</span> person = [</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">name</span>: <span class="string">&quot;大明&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">name</span>: <span class="string">&quot;玲玲&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">24</span>, <span class="attr">name</span>: <span class="string">&quot;萨姆&quot;</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> newPerson = person.<span class="title function_">map</span>(<span class="function">(<span class="params">ele</span>) =&gt;</span> &#123;</span><br><span class="line">  ele.<span class="property">age</span> = ele.<span class="property">age</span> + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> ele;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="reduce-处理数组之和"><a href="#reduce-处理数组之和" class="headerlink" title="reduce 处理数组之和"></a>reduce 处理数组之和</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> result = arr.<span class="title function_">reduct</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="NPM-包管理器"><a href="#NPM-包管理器" class="headerlink" title="NPM 包管理器"></a>NPM 包管理器</h2><p>npm 是 nodejs 包管理器，现在安装 nodejs 后自带 npm，相当于前端的 Maven。</p><p>npm 仓库<a href="https://npmjs.com/">https://npmjs.com</a></p><h3 id="创建基于-npm-的-nodejs-工程"><a href="#创建基于-npm-的-nodejs-工程" class="headerlink" title="创建基于 npm 的 nodejs 工程"></a>创建基于 npm 的 nodejs 工程</h3><p>使用<code>npm init</code>，将当前目录设置为工程目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br><span class="line"><span class="comment"># 交互命令操作后将会生成一个package.json</span></span><br><span class="line">npm init -y</span><br><span class="line"><span class="comment"># 或者添加-y参数跳过交互，使用默认设置快速新建工程</span></span><br></pre></td></tr></table></figure><p>可以编辑<code>package.json</code>进行修改</p><h3 id="安装和使用第三方模块依赖驱动"><a href="#安装和使用第三方模块依赖驱动" class="headerlink" title="安装和使用第三方模块依赖驱动"></a>安装和使用第三方模块依赖驱动</h3><p>使用<code>npm install 模块名</code>，安装第三方模块，安装的模块会存放于项目里的<code>node_modules</code>文件夹内</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">npm install mysql</span><br><span class="line"><span class="comment"># 简写</span></span><br><span class="line">npm i mysql</span><br><span class="line"><span class="comment"># 连写</span></span><br><span class="line">npm install mysql jquery</span><br><span class="line"><span class="comment"># 指定版本号</span></span><br><span class="line">npm install jquery@2.1.x</span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">npm uninstall mysql jquery</span><br></pre></td></tr></table></figure><p>如果安装模块很慢，可以安装<code>cnpm</code>后使用<code>cnpm install mysql</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">cnpm install mysql</span><br></pre></td></tr></table></figure><p>使用时要先导入模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入模块</span></span><br><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">&quot;mysql&quot;</span>);</span><br></pre></td></tr></table></figure><p>创建项目时生成的<code>package.json</code>中包含了很多信息，安装模块后还会增加<code>dependencies</code>字段记录安装的模块版本号，方便后期复用。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;helloworld&quot;</span><span class="punctuation">,</span> <span class="comment">// 项目名</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;这个开发者已摆烂，什么都没有留下&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span> <span class="comment">//入口</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 自定义脚本，使用 npm run test运行</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yelowShine&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span> <span class="comment">//开源协议</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mysql&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.18.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在工程根目录内已存在<code>package.json</code>的情况下，只需要<code>npm install</code>即可下载<code>dependencies</code>中的全部模块方便复用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="Babel-转码"><a href="#Babel-转码" class="headerlink" title="Babel 转码"></a>Babel 转码</h2><p>es6 的语法不能直接运行在 nodejs 的 v8 引擎中，为了将 es6 代码转为 es5 代码，于是 Babel 诞生了。</p><h3 id="安装-Babel"><a href="#安装-Babel" class="headerlink" title="安装 Babel"></a>安装 Babel</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g babel-cli</span><br></pre></td></tr></table></figure><h3 id="配置-babelrc"><a href="#配置-babelrc" class="headerlink" title="配置.babelrc"></a>配置.babelrc</h3><p>项目根目录下新建<code>.babelrc</code>文件，用来设置转码规则和插件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .babelrc</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;presets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;es2015&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="安装转码器"><a href="#安装转码器" class="headerlink" title="安装转码器"></a>安装转码器</h3><p>安装对应版本转码器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-preset-es2015</span><br></pre></td></tr></table></figure><h3 id="转码并输出"><a href="#转码并输出" class="headerlink" title="转码并输出"></a>转码并输出</h3><p><code>一般地，在src写代码，然后转码输出到dist作为浏览器可执行文件。</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将src目录的所有文件转码后输出到dist目录</span></span><br><span class="line">babel src -d dist</span><br></pre></td></tr></table></figure><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>模块化遵循 commonjs 规范，最新的标准则是 es6 规范。目前广泛使用的是 es6 模块化规范。</p><h3 id="commonjs-模块化"><a href="#commonjs-模块化" class="headerlink" title="commonjs 模块化"></a>commonjs 模块化</h3><p>创建一个<code>numUtil.js</code>定义工具方法，<code>module.exports</code>将方法导出为模块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// numUtil.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sub</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  sum,</span><br><span class="line">  sub,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>require</code>引入模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="built_in">require</span>(<span class="string">&quot;./numUtil.js&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">sub</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><h3 id="es6-模块化"><a href="#es6-模块化" class="headerlink" title="es6 模块化"></a>es6 模块化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分别暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="title function_">sum</span>(a,b)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="title function_">sub</span>(a,b)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 默认暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="title function_">sum</span>(a,b):&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">sub</span>(a,b):&#123;</span><br><span class="line">        <span class="keyword">return</span> a-b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引入模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入分别暴露</span></span><br><span class="line"><span class="keyword">import</span> &#123; sum, sub &#125; <span class="keyword">from</span> <span class="string">&quot;./numUtil.js&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sub</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="comment">// 引入默认暴露</span></span><br><span class="line"><span class="keyword">import</span> num <span class="keyword">from</span> <span class="string">&quot;./numUtil.js&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">sub</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><h2 id="WebPack-打包"><a href="#WebPack-打包" class="headerlink" title="WebPack 打包"></a>WebPack 打包</h2><p>WebPack 是前端静态资源打包工具，将多种静态资源转换成一个静态文件，减少页面请求，提升安全性。当前很多脚手架如 Vue-cli、uniapp 内部是集成了 WebPack 的。</p><p>安装 WebPack</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g webpack webpack-cli</span><br></pre></td></tr></table></figure><p>查看 WebPack 版本号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack -v</span><br></pre></td></tr></table></figure><h3 id="使用-WebPack-打包合并-JS"><a href="#使用-WebPack-打包合并-JS" class="headerlink" title="使用 WebPack 打包合并 JS"></a>使用 WebPack 打包合并 JS</h3><p>新建 nodejs 项目，在项目根目录新建一个 src 目录，在 src 存放两个需要合并的 js 文件 util.js 和 common.js，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// common.js</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">info</span> = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(str);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// util.js</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">add</span> = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 src 新建一个入口文件<code>main.js</code>将模块集中进行引入，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&quot;./util&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="title function_">requier</span>(<span class="string">&quot;./common&quot;</span>);</span><br><span class="line">common.<span class="title function_">info</span>(<span class="string">&quot;hello webpack&quot;</span>, util.<span class="title function_">add</span>(<span class="number">100</span>, <span class="number">100</span>));</span><br></pre></td></tr></table></figure><p>在项目根目录定义 webpack.config.js 文件配置打包规则，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 从入口文件开始编译打包</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">//配置合并打包后输出到根目录的dist/bundle.js文件</span></span><br><span class="line">    <span class="comment">// 导出到哪个文件夹</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">    <span class="comment">// 导出的文件名</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>执行 webpack 查看效果<br>执行命令<code>webpack</code>就能生成<code>./dist/bundle.js</code>打包合并的文件了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">webpack</span><br><span class="line"><span class="comment"># 热打包，监听有新的修改保存后会重新打包</span></span><br><span class="line">webpack -w</span><br></pre></td></tr></table></figure><h3 id="使用-WebPack-打包合并-CSS"><a href="#使用-WebPack-打包合并-CSS" class="headerlink" title="使用 WebPack 打包合并 CSS"></a>使用 WebPack 打包合并 CSS</h3><p>WebPack 本身只能处理 JavaScript 模块，处理其他类型的文件需要使用 loader 进行转换。<br>css-loader 将 css 装载到 JavaScript，style-loader 让 JavaScript 认识 css。<br>2021 年 4 月后可直接打包 css，不用再安装 loader</p><p>安装 Loader</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev style-loader css-loader</span><br></pre></td></tr></table></figure><p>webpack.config.js 文件配置 css 打包规则</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 从入口文件开始编译打包</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">//配置合并打包后输出到根目录的dist/bundle.js文件</span></span><br><span class="line">    <span class="comment">// 导出到哪个文件夹</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">    <span class="comment">// 导出的文件名</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="comment">// 项目中所有.css文件进行打包</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 src 内新建 style.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在入口文件 main.js 导入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&quot;./util&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="title function_">requier</span>(<span class="string">&quot;./common&quot;</span>);</span><br><span class="line">common.<span class="title function_">info</span>(<span class="string">&quot;hello webpack&quot;</span>, util.<span class="title function_">add</span>(<span class="number">100</span>, <span class="number">100</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入css</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;./style.css&quot;</span>);</span><br></pre></td></tr></table></figure><p>项目根目录使用命令打包查看效果<code>webpack</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java入门</title>
      <link href="/2022/06/05/Java%E5%85%A5%E9%97%A8/"/>
      <url>/2022/06/05/Java%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-入门"><a href="#Java-入门" class="headerlink" title="Java 入门"></a>Java 入门</h1><p>先编译，后解释<br>先把.java 文件通过 javac 编译为.class 字节码文件，再交给 jvm 解释运行。</p><h2 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h2><p>编译是<code>.java</code> -&gt; <code>.class</code>，<br>那么反编译就是<code>.class</code> -&gt; <code>.java</code><br>反编译后得到的*.java 和原始代码文件几乎完全相同，甚至能够得到某些注解帮我们实现的内容，除了注释文字。</p><h3 id="通过-jdk-的-javap-实现反编译"><a href="#通过-jdk-的-javap-实现反编译" class="headerlink" title="通过 jdk 的 javap 实现反编译"></a>通过 jdk 的 javap 实现反编译</h3><blockquote><p>反编译命令 javap -p xxx.class</p></blockquote><p><img src="/img/Java%E5%85%A5%E9%97%A8/2022-08-18-12-20-57.png" alt="javap反编译"></p><h3 id="通过-jad-工具实现反编译-推荐"><a href="#通过-jad-工具实现反编译-推荐" class="headerlink" title="通过 jad 工具实现反编译 推荐"></a>通过 jad 工具实现反编译 推荐</h3><p>不同的反编译工具可以得到不同的结果，多尝试，看看谁更强大。</p><blockquote><p>jad -sJava xxx.class</p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="Java-的起源和生态"><a href="#Java-的起源和生态" class="headerlink" title="Java 的起源和生态"></a>Java 的起源和生态</h3><p>设计于 1995 年，是基于 C 和 C++创建的<br>与平台无关，一次编写到处运行。<br><img src="/img/Java%E5%85%A5%E9%97%A8/2023-07-01-14-01-43.png"><br>从下图可以看出，跨平台的特性来自编译器和 JVM<br><img src="/img/Java%E5%85%A5%E9%97%A8/2023-07-01-14-06-46.png"></p><h4 id="Java-的生态和应用场景"><a href="#Java-的生态和应用场景" class="headerlink" title="Java 的生态和应用场景"></a>Java 的生态和应用场景</h4><ul><li>Java Card<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;智能卡，SIM 卡</li><li>Java ME Micro-Edition<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;智能电视，机顶盒，嵌入式设备</li><li>Java SE Standard-Edition<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;标准版是开始学习 Java 的版本，因为包含了需要运行代码的工具（编译器 和 Java 虚拟机），和一些强大的类和 api</li><li>Java MP Micro-Profile<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;如果说 Spring Cloud 是以 SpingBoot 为核心和基础的微服务架构，那么 MicroProfile 则是将传统 JavaEE 轻量化以适应微服务时代的一个体系。</li><li>Java EE Enterprise-Edition<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java EE 企业版支持为企业创建应用程序。这包括 Web 服务，通过 Java 消息异步传递消息，以及用于共享代码的企业 JavaBeans。<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;此外，对于用户界面，您还可以创建 servlet、JSP 和 JSF 应用程序，尽管我们看到使用它们的次数越来越少。<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;大多数情况下，我们看到 Java 被用在企业中，也就是我们所说的企业后端，用来创建可重用、可共享的代码，这些代码可以被许多不同的应用程序使用。这可以采取 Web 服务的形式，这也是我们今天看到的 Java 的典型使用方式</li></ul><p>这些不同的 Java 版本（Java SE，Java EE……），只是安装时符合版本的规范，但是我们可以自己扩展动态变化为其他版本，比如我可以使用 Java SE 添加 servlet-api 后开发出 Java EE 规范的东西，<br>之前见过一些文章是根据自身需求魔改精简 JDK、JRE 的……</p><h3 id="Java-的企业级应用场景"><a href="#Java-的企业级应用场景" class="headerlink" title="Java 的企业级应用场景"></a>Java 的企业级应用场景</h3><p>我们使用 Java 的一件事是 Web 服务，但是现在，您不会再看到 Java 在用户界面中被大量使用（JSP、JSF 很少见了），所以<code>目前Java主要使用在后端处理（Web的服务器端）</code>。<br>这些 Web 服务通常是 Http 协议的服务，当然还有其他协议。<br><img src="/img/Java%E5%85%A5%E9%97%A8/2023-07-02-13-48-33.png"><br>JAX-WS API 支持 SOAP 协议服务实现，我们可以在其中定义自己的接口和支持的方法类型。<br>JAX-RS API 支持利用 HTTP 传输和 HTTP 中可用的操作的 REST 协议服务实现，并且可以处理不同类型的数据。<br>SOAP 只能处理 XML，但 REST 服务可以处理我们想要的任何类型的数据，XML，JSON，纯文本，任何我们想要的。<br>因此，内置函数和 API 可以将 Java 对象转换为 XML 或 JSON，发送到另一个 Web 服务，然后返回结果并将其转换回 Java。<br><img src="/img/Java%E5%85%A5%E9%97%A8/2023-07-02-14-17-50.png"><br>Java EE 应用程序必须部署到 WebLogic 或 WebSphere，JBoss 或 Tomcat 等服务器上。这些类型的服务器或容器托管 Java EE 应用进程。它们为企业 Java Bean(EJB)提供支持，这些符合 Java EE 规范的服务器或容器(如 Tomcat)实现了可重用的逻辑和 Web 容器。例如，在这里，我们看到支持前端组件（如 servlet，Java Server Pages 和 Java Server Faces）的<code>Web容器</code>。<code>EJB 容器</code>支持业务逻辑和后端组件。<br>容器提供了安全性、并发性、事务管理和生命周期管理，因此开发人员不必处理这些问题。</p><h3 id="Java-语言的常用设计"><a href="#Java-语言的常用设计" class="headerlink" title="Java 语言的常用设计"></a>Java 语言的常用设计</h3><p>这些设计的好处，在初始应用开发时感受不深，但在对代码进行重构或二次开发的时候就能体会到了……</p><h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><p>由于面向对象的应用程序通过所谓的垃圾收集来管理它们自己的内存分配和回收，从历史上看，与编译语言相比，代码的性能会受到轻微的影响<br>简单的 JVM 模型<br><code>Stack栈</code>，常量，实际对象的引用<br><code>Heap堆</code>，对象<br><img src="/img/Java%E5%85%A5%E9%97%A8/2023-07-02-23-45-32.png"><br><img src="/img/Java%E5%85%A5%E9%97%A8/2023-07-02-23-58-55.png"><br><img src="/img/Java%E5%85%A5%E9%97%A8/2023-07-03-00-02-31.png"><br><img src="/img/Java%E5%85%A5%E9%97%A8/2023-07-03-00-06-07.png"></p><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>将属性和行为封装在对象内部，通常是在类里，属性私有化 private</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>子类继承父类的属性和行为，也可以添加更多的属性和行为</p><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p><code>编译时多态</code><br>体现在方法的重载时，方法名相同，参数列表不同<br><code>运行时多态</code><br>在继承关系中，不同子类对一些行为有不同的方式，<br>比如我们想执行呼吸行为时，运行时环境会根据呼吸行为的具体对象类型来选择正确的对象类型，来执行正确的行为<br><img src="/img/Java%E5%85%A5%E9%97%A8/2023-07-01-16-29-40.png"><br>蓝色呼吸行为 -&gt; 鱼类 -&gt; 用鳃呼吸<br>橙色呼吸行为 -&gt; 狗类 -&gt; 用鼻子呼吸<br>或者看看下面这个多态的使用场景<br><img src="/img/Java%E5%85%A5%E9%97%A8/2023-07-10-23-16-19.png"><br>Tailored 重写了 getPrice()，所以运行时使用的是 Tailored 的 getPrice()<br>Standard 没有重写 getPrice()，所以运行时使用的是 Clothing 的 getPrice()</p><h4 id="UML-统一建模语言"><a href="#UML-统一建模语言" class="headerlink" title="UML 统一建模语言"></a>UML 统一建模语言</h4><p>方便我们分析业务需求，为代码结构建模，并描述应用程序部署<br><img src="/img/Java%E5%85%A5%E9%97%A8/2023-07-01-19-07-49.png"></p><h3 id="JavaApis"><a href="#JavaApis" class="headerlink" title="JavaApis"></a>JavaApis</h3><p>Collection 集合<br>stream 流<br>I&#x2F;O<br>concurrency 多线程</p><ul><li>JDBC Java 数据库连接协议(Java Database Connectivity Protocol)<br>Java 通过 JDBC 连接到数据库并执行 SQL 语句</li><li>JPA (Java Persistence API)<br>通过 JPA 将 Java 对象写入关系型数据库，或者从关系数据库查询然后创建 Java 对象作为结果<br>所以被称为对象关系映射<br><img src="/img/Java%E5%85%A5%E9%97%A8/2023-07-01-00-43-28.png"></li></ul><h2 id="八大基本数据类型"><a href="#八大基本数据类型" class="headerlink" title="八大基本数据类型"></a>八大基本数据类型</h2><table><thead><tr><th>数据类型</th><th>bit 位</th><th>Byte 字节</th></tr></thead><tbody><tr><td>byte 字节</td><td>8</td><td>1</td></tr><tr><td>short 短整型</td><td>16</td><td>2</td></tr><tr><td>int 整型</td><td>32</td><td>4</td></tr><tr><td>long 长整型</td><td>64</td><td>8</td></tr><tr><td>float 单精度浮点数</td><td>32</td><td>4</td></tr><tr><td>double 双精度浮点数</td><td>64</td><td>8</td></tr><tr><td>chart 字符型</td><td>16</td><td>2</td></tr><tr><td>boolean 布尔型</td><td>8</td><td>1</td></tr></tbody></table><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><h4 id="byte"><a href="#byte" class="headerlink" title="byte"></a>byte</h4><h4 id="short"><a href="#short" class="headerlink" title="short"></a>short</h4><h4 id="int"><a href="#int" class="headerlink" title="int"></a>int</h4><p>对整型 int 使用不同进制进行赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 10进制的33   */</span><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">33</span>;</span><br><span class="line"><span class="comment">/* 8进制        */</span><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">033</span>;</span><br><span class="line"><span class="comment">/* 16进制       */</span><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0X33</span>; 或<span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0x33</span>;</span><br></pre></td></tr></table></figure><h4 id="long"><a href="#long" class="headerlink" title="long"></a>long</h4><p>表示 long 类型时，后面要加 L 或 l，否则默认 int 类型，造成精度丢失</p><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><h4 id="float"><a href="#float" class="headerlink" title="float"></a>float</h4><p>如果要表示 float 类型，要在小数后加上 F 或 f，否则默认 double 类型</p><h4 id="double"><a href="#double" class="headerlink" title="double"></a>double</h4><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><h4 id="chart"><a href="#chart" class="headerlink" title="chart"></a>chart</h4><p>用于存储一个单一字符，占两个字节。需要用’’引起来。还可以使用字符对应的 Unicode 编码上的数字来赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&#x27;汉&#x27;</span>; 或 <span class="type">char</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">27721</span>;</span><br></pre></td></tr></table></figure><h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><h4 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h4><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="一元运算符（单目运算符）"><a href="#一元运算符（单目运算符）" class="headerlink" title="一元运算符（单目运算符）"></a>一元运算符（单目运算符）</h3><p>运算所需变量为一个的运算符，所以 n 元运算符是运算所需变量为 n 个的运算符……</p><h2 id="访问权限修饰符"><a href="#访问权限修饰符" class="headerlink" title="访问权限修饰符"></a>访问权限修饰符</h2><p><img src="/img/Java%E5%85%A5%E9%97%A8/2022-08-17-17-40-24.png"></p><h3 id="public"><a href="#public" class="headerlink" title="public"></a>public</h3><p>public 修饰：类、属性、方法</p><h3 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h3><p>protected 修饰：</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="初始化顺序"><a href="#初始化顺序" class="headerlink" title="初始化顺序"></a>初始化顺序</h2><h2 id="关闭-Java"><a href="#关闭-Java" class="headerlink" title="关闭 Java"></a>关闭 Java</h2><p><code>System.exit(0)</code>正常关闭<br><code>System.exit(int 非零)</code>非正常关闭</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>try、catch、finally、throw、throws</p><p><code>try</code> 异常监控范围；<code>catch</code> 在异常监控范围内捕获到异常；<code>finally</code> 不是必须的，finally 中的代码块总会被执行；<code>throw</code>在方法内抛出异常；<code>throws</code>在方法定义时抛出异常</p><h3 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java.lang.Throwable</span></span><br><span class="line"><span class="comment">    Error:严重错误,一般只能修改自己的代码,尽量避免</span></span><br><span class="line"><span class="comment">            StackOverflowError 栈溢出错误</span></span><br><span class="line"><span class="comment">            OutOfMemoryError   内存不足错误</span></span><br><span class="line"><span class="comment">    Exception:异常</span></span><br><span class="line"><span class="comment">        1)编译时异常:编译就不让通过,报异常信息(IDEA中有红色的波浪线)</span></span><br><span class="line"><span class="comment">            IOException:输入输出异常</span></span><br><span class="line"><span class="comment">            FileNotFoundException:文件未找到异常</span></span><br><span class="line"><span class="comment">            ClassNotFoundException:类未找到异常</span></span><br><span class="line"><span class="comment">            UnKnownHostException:未知主机异常</span></span><br><span class="line"><span class="comment">        2)运行时异常:RuntimeException</span></span><br><span class="line"><span class="comment">            NullPointerException:空指针异常</span></span><br><span class="line"><span class="comment">            ArrayIndexOutOfBoundsException:数组下标越界异常</span></span><br><span class="line"><span class="comment">            ClassCastException:类转换异常</span></span><br><span class="line"><span class="comment">            NumberFormatException:数值格式化异常</span></span><br><span class="line"><span class="comment">            InputMIssMatchException:输入类型不匹配异常</span></span><br><span class="line"><span class="comment">            ArithmeticException:算术异常</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h3><p>利用零不能做除数，制造异常，进行异常捕获</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a/<span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;try中的代码块出现了异常&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;finally中的代码块总是会被执行&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常捕获多个异常"><a href="#异常捕获多个异常" class="headerlink" title="异常捕获多个异常"></a>异常捕获多个异常</h3><p>catch 中捕获的异常类型必须是从小范围到大范围，因为大范围的一捕获就没有小范围什么事了，<code>catch从大范围到小范围的编译是不能通过的</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a/<span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;try中的代码块出现了异常&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Throwable t)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;try中的代码块出现了异常&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常抛出"><a href="#异常抛出" class="headerlink" title="异常抛出"></a>异常抛出</h3><p>异常抛出可以避免程序中断。throws 并没有真正解决或处理异常,只是把异常抛给调用者.调用者要继<br>续处理这个异常,调用者要么继续 throws,要么进行 try-catch-finally 的处理.<br>try-catch-finally 是真正在处理异常,一旦处理完,就不会影响后续代码的执行.<br>（1）在定义方法时抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exFn</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有我善后——finally"><a href="#有我善后——finally" class="headerlink" title="有我善后——finally"></a>有我善后——finally</h3><p>finally 不受 return 的影响<br>在开发中,IO 流,网络 Socket,数据库的连接等资源的使用,我们要放在<br>finally 代码块中去关闭.因为 JVM(java 虚拟机)不会自动进行外部资源的关闭,也不会对外部资源<br>进行垃圾回收.所以这些操作必须方法 finally 当中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exFn2</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        System.out.println(num2/num1);</span><br><span class="line">        System.out.println(<span class="string">&quot;try&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (ArithmeticException e)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;catch ArithmeticException&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）在方法内手动抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a/b;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;try中的代码块出现了异常&quot;</span>);</span><br><span class="line">    <span class="comment">//使用throw关键字,手动抛出异常,new Exception或其子类(String 参数)</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="标准的异常日志处理写法"><a href="#标准的异常日志处理写法" class="headerlink" title="标准的异常日志处理写法"></a>标准的异常日志处理写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a/<span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    log.error(<span class="string">&quot;try中的代码块出现了异常&quot;</span>,e,e.getMessage())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反射-Reflection"><a href="#反射-Reflection" class="headerlink" title="反射 Reflection"></a>反射 Reflection</h2><p>反射 Reflection，可以在程序在执行时，取得类的内部信息，对类的属性和方法进行读写。</p><p><strong>一般地</strong></p><p>import 导包 → new 对象 → 对象的属性和方法</p><p><strong>反射时</strong></p><p>获取类的 Class 对象 → 非 new 形式实例化对象 → 操作类的属性方法……</p><h3 id="Class-对象"><a href="#Class-对象" class="headerlink" title="Class 对象"></a>Class 对象</h3><p>程序运行时，一个类在内存中只有一个 Class 对象，类的属性和行为都封装在对应的 Class 对象中。<code>在编码时，获取Class对象，是反射的开始</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 获取class对象 */</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.oace.Student&quot;</span>);</span><br><span class="line"><span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> student.getClass();</span><br><span class="line"><span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> Student.class;</span><br><span class="line"><span class="comment">/* 获取父类class对象 */</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c4</span> <span class="operator">=</span> c1.getSuperclass();</span><br><span class="line"><span class="comment">/* 仅限基本内置类型的包装类 */</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c5</span> <span class="operator">=</span> Integer.TYPE;</span><br></pre></td></tr></table></figure><h3 id="谁配拥有-Class-对象"><a href="#谁配拥有-Class-对象" class="headerlink" title="谁配拥有 Class 对象"></a>谁配拥有 Class 对象</h3><p>类、接口、一维数组、二维数组、注解、枚举、基本数据类型包装类、void</p><h3 id="Class-对象能干什么"><a href="#Class-对象能干什么" class="headerlink" title="Class 对象能干什么"></a>Class 对象能干什么</h3><p>使用反射操作 private 修饰的元素 Method、Field、Constructor 时需要<code>setAccessible(true);</code>设置可访问</p><h3 id="反射获取类名、属性、方法、构造方法"><a href="#反射获取类名、属性、方法、构造方法" class="headerlink" title="反射获取类名、属性、方法、构造方法"></a>反射获取类名、属性、方法、构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.oace.Student&quot;</span>);</span><br><span class="line"><span class="comment">//获取类名</span></span><br><span class="line">c1.getName(); <span class="comment">//获得全类名 com.oace.Student</span></span><br><span class="line">c1.getSimpleName(); <span class="comment">//获得类名 Student</span></span><br><span class="line"><span class="comment">//获取属性</span></span><br><span class="line">Fields [] fields = c1.getDeclaredFields(); <span class="comment">//获取类的所有属性</span></span><br><span class="line">fields = c1.getFields(); <span class="comment">//获取类public修饰的属性</span></span><br><span class="line"><span class="type">Filed</span> <span class="variable">field</span> <span class="operator">=</span> c1.getDeclaredField(<span class="string">&quot;userName&quot;</span>); <span class="comment">//获取类的指定属性</span></span><br><span class="line"><span class="comment">//获取方法</span></span><br><span class="line">Method [] methods = c1.getDeclaredMethods(); <span class="comment">//获取类的全部方法</span></span><br><span class="line">methods = c1.getDeclaredMethods(); <span class="comment">//获取类和父类的public修饰方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> c1.getDeclaredMethod(<span class="string">&quot;methodName&quot;</span>,方法参数的形参占位……); <span class="comment">//获取指定方法</span></span><br><span class="line"><span class="comment">//获取构造方法</span></span><br><span class="line">Constructor [] constructors = c1.getDeclaredConstructors();<span class="comment">//全部构造方法</span></span><br><span class="line">constructors = c1.getDeclaredConstructors();<span class="comment">//public构造方法</span></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c1.getDeclaredConstructor(构造方法参数的行参占位……);<span class="comment">//指定构造方法</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="反射实例化对象"><a href="#反射实例化对象" class="headerlink" title="反射实例化对象"></a>反射实例化对象</h3><p><code>newInstance</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.oace.Student&quot;</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">studen</span> <span class="operator">=</span> (Student)c1.newInstance(); <span class="comment">//无参构造实例化对象</span></span><br><span class="line"></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c1.getDeclaredConstructor(<span class="string">&quot;String.class&quot;</span>);<span class="comment">//构造方法实例化对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">studen</span> <span class="operator">=</span> (Student)constructor.newInstance(<span class="string">&quot;孙行者&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="反射操作属性"><a href="#反射操作属性" class="headerlink" title="反射操作属性"></a>反射操作属性</h3><p><code>filed.set(实例对象,属性新值);</code>也就是下面的</p><p><code>userName.set(student,&quot;孙行者&quot;);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取Class对象</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.oace.Student&quot;</span>);</span><br><span class="line"><span class="comment">//实例化实体对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student)c1.Instance();</span><br><span class="line"><span class="comment">//获取属性</span></span><br><span class="line"><span class="type">Filed</span> <span class="variable">userName</span> <span class="operator">=</span> c1.getDeclaredField(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line"><span class="comment">//操作属性</span></span><br><span class="line">userName.setAccessible(<span class="literal">true</span>);<span class="comment">//设置该属性可访问</span></span><br><span class="line">userName.set(student,<span class="string">&quot;孙行者&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="反射执行方法"><a href="#反射执行方法" class="headerlink" title="反射执行方法"></a>反射执行方法</h3><p><code>method.invoke(实例对象,参数……);</code>也就是下面的</p><p><code>setName.invoke(student,&quot;孙行者&quot;);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取Class对象</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.oace.Student&quot;</span>);</span><br><span class="line"><span class="comment">//实例化实体对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student)c1.Instance();</span><br><span class="line"><span class="comment">//获取方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">setName</span> <span class="operator">=</span> c1.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>,String.class); <span class="comment">//获取指定方法</span></span><br><span class="line"><span class="comment">//执行方法</span></span><br><span class="line">setName.invoke(student,<span class="string">&quot;孙行者&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="反射获取注解信息"><a href="#反射获取注解信息" class="headerlink" title="反射获取注解信息"></a>反射获取注解信息</h3><p>略……</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组就是相同数据类型的一组数据的集合，数组中每一组数据叫做元素。</p><ul><li>数组的长度是固定的,初始化之后长度就不可变</li><li>数组名保存的是数组的内存地址</li><li>数组长度 &#x3D; 元素个数</li></ul><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Int [] array = <span class="keyword">new</span> <span class="title class_">Int</span>[<span class="number">3</span>];</span><br><span class="line">Int [] array2 = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数据类型 []数组名 = new 数据类型[数组长度];</span></span><br><span class="line"><span class="comment">数据类型 []数组名 = &#123;元素,元素,元素...&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">### 对象数组</span><br><span class="line">```java</span><br><span class="line">Student [] arrayStudent = <span class="keyword">new</span> <span class="title class_">Student</span> [<span class="number">3</span>];</span><br><span class="line"> arrayStudent [<span class="number">0</span>]  = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;大明&quot;</span>,<span class="number">11</span>);</span><br><span class="line"> arrayStudent [<span class="number">1</span>]  = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;玲玲&quot;</span>,<span class="number">18</span>);</span><br><span class="line"> arrayStudent [<span class="number">2</span>]  = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;萨姆&quot;</span>,<span class="number">24</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">### 数组的遍历</span><br><span class="line">for、foreach遍历数组。</span><br><span class="line">涉及数组的修改常用for循环来遍历，foreach遍历修改数组不会修改原数组。</span><br><span class="line">```java</span><br><span class="line">for (int i = 0; i &lt; array_001.length; i++) &#123;</span><br><span class="line">    System.out.print(array_001[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (int i : array_001) &#123;</span><br><span class="line">    System.out.print(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//返回数组的字符串形式，常用于查看数组元素</span><br><span class="line">Arrays.toString[array_001]</span><br></pre></td></tr></table></figure><h3 id="数组的初始值"><a href="#数组的初始值" class="headerlink" title="数组的初始值"></a>数组的初始值</h3><p>略……</p><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>二维数组是较为常用的多维数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> [][] i = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][];</span><br><span class="line"><span class="type">int</span> []a = &#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line"><span class="type">int</span> []b = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">int</span> []c = &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">i[<span class="number">0</span>] = a;</span><br><span class="line">i[<span class="number">1</span>] = b;</span><br><span class="line">i[<span class="number">2</span>] = c;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数据类型 [][]数组名 = new 数据类型[一维的长度][二维的长度];</span></span><br><span class="line"><span class="comment">注意：一维的长度必须有值，二维的长度可以省略，若二维的长度有值，代表每个二维长度都相同。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="可变长参数"><a href="#可变长参数" class="headerlink" title="可变长参数"></a>可变长参数</h2><p>一般地方法参数的个数是固定的，可变长参数能使方法接受动态个数的参数，动态参数的部分是类型一致的。</p><p>使用场景：当方法的参数列表数据类型已经确定,但是参数个数不确定</p><p><strong>可变长参数注意事项</strong>：</p><p>1.一个方法的参数列表,只能使用一个可变参数</p><p>2.如果方法还有其他参数,其他参数必须写在可变参的前面,可变参必须写在参数列表的最后</p><p>3.一种特殊的写法 Object… obj,可接收所有类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可变长参数本质上是传入可变长参数的数组</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(String str,<span class="type">int</span> ... arrayInt)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrayInt.length; i++) &#123;</span><br><span class="line">        sum += arrayInt[i];</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> sum(<span class="literal">null</span>,<span class="number">1</span>,<span class="number">3</span>); <span class="comment">// 4</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num002</span> <span class="operator">=</span> sum(<span class="literal">null</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>包装类与八大基本数据类型息息相关，每种基本数据类型都有其对于的包装类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    // byte Byte</span></span><br><span class="line"><span class="comment">    // short Short</span></span><br><span class="line"><span class="comment">    // int Integer</span></span><br><span class="line"><span class="comment">    // long Long</span></span><br><span class="line"><span class="comment">    // float Float</span></span><br><span class="line"><span class="comment">    // double Double</span></span><br><span class="line"><span class="comment">    // boolean Boolean</span></span><br><span class="line"><span class="comment">    // char Character</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="自动装箱"><a href="#自动装箱" class="headerlink" title="自动装箱"></a>自动装箱</h3><p>基本数据类型自动转换为引用类型(包装类)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如这里int类型的2自动转存为Integer</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h3 id="自动拆箱"><a href="#自动拆箱" class="headerlink" title="自动拆箱"></a>自动拆箱</h3><p>引用类型(包装类)自动转换为基本数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> integer;</span><br><span class="line">    i = <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h3 id="包装类运算"><a href="#包装类运算" class="headerlink" title="包装类运算"></a>包装类运算</h3><p>引用类型(包装类)可与基本数据类型直接运算。</p><h2 id="集合的实现类们"><a href="#集合的实现类们" class="headerlink" title="集合的实现类们"></a>集合的实现类们</h2><p>collections, array lists, link lists, sets, stacks, queues.<br>虽然 Java 存在数组类型，但是，对于更复杂、灵活的功能，提供了一个集合 API，使我们能够使用不同类型的集合、数组列表、链接列表、集合、堆栈、队列。<br>集合 API 的基础使用就是对不同类型集合的增删改查和排序</p><h3 id="Collection-接口"><a href="#Collection-接口" class="headerlink" title="Collection 接口"></a>Collection 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Collection:单列集合</span></span><br><span class="line"><span class="comment">//      List子接口:存储有序,可重复的数据</span></span><br><span class="line"><span class="comment">//      Set子接口:存储无序,不可重复的数据</span></span><br><span class="line"><span class="comment">//Map不是Collection的子接口,Map是双列集合,键值对的形式key---value</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//interface Collection是一个接口,不能直接使用,需要使用其接口实现类.例如ArrayList</span></span><br><span class="line">    <span class="type">Collection</span> <span class="variable">coll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();<span class="comment">//接口指向实现类对象</span></span><br><span class="line">    <span class="comment">//add(参数) 将参数添加到子类对象中</span></span><br><span class="line">    coll.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    <span class="comment">//Collection中只能添加引用类型的元素,下面为什么可以执行,下面发生了自动装箱</span></span><br><span class="line">    coll.add(<span class="number">100</span>);<span class="comment">//int--&gt;Integer,自动装箱</span></span><br></pre></td></tr></table></figure><h3 id="List-集合"><a href="#List-集合" class="headerlink" title="List 集合"></a>List 集合</h3><p>List 集合就是列表，ArrayList 是无序列表，LinkedList 是有序列表，ajax 返回集合给前端时显示的是[obj1,obj2,obj3,…]</p><h4 id="List-集合遍历"><a href="#List-集合遍历" class="headerlink" title="List 集合遍历"></a>List 集合遍历</h4><p>List 集合用于存储对象元素集合，在 List 中添加或查询元素是经常用到的。还有对 List 集合的遍历，遍历 List 集合可以使用普通 for 循环、迭代器、增强 for 循环 foreach，<code>需涉及到集合修改时使用普通for循环遍历</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayListDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//增  add(Object obj)加到尾部  add(int index,Object obj)插队,插入到指定位置</span></span><br><span class="line">        <span class="comment">//删remove(int index)remove(Object obj)</span></span><br><span class="line">        <span class="comment">//改set(int index,Object obj)替换指定下标的元素</span></span><br><span class="line">        <span class="comment">//查get(int index)  indexOf(Object obj)   lastIndexOf(Object obj)  contains(Object obj)</span></span><br><span class="line">        <span class="comment">//长度 size()  下标最大是 size()-1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//ArrayList&lt;E&gt;  泛型&lt;E&gt;  其中E可以用任何引用类型来替换</span></span><br><span class="line">        <span class="comment">//表示该列表只能存储Student类型的数据,不能存储其他类型的元素</span></span><br><span class="line">        ArrayList&lt;Student&gt; studentArrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        studentArrayList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;hyao&quot;</span>,<span class="number">11</span>));</span><br><span class="line">        studentArrayList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;cc&quot;</span>,<span class="number">13</span>));</span><br><span class="line">        <span class="comment">//studentArrayList.add(&quot;Anna&quot;); 错误,违反泛型约束</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// contains</span></span><br><span class="line">        <span class="comment">// 默认比较元素地址是否相同，可以在实体类重写equals方法就能灵活的根据成员变量的值来判断是否为同一个元素</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">cc</span> <span class="operator">=</span> studentArrayList.contains(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;cc&quot;</span>, <span class="number">13</span>));</span><br><span class="line">        <span class="comment">//如果忘记重写Student实体类的equals方法,再调用contains时,也会去调用Object类中的equals方法</span></span><br><span class="line">        <span class="comment">//类似indexOf(Object obj) lastIndexOf(Object obj) remove(Object obj)都会调用到equals()方法</span></span><br><span class="line">        System.out.println(cc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合三种方式</span></span><br><span class="line">        <span class="comment">//如果是遍历集合进行修改使用普通for循环即可</span></span><br><span class="line">        <span class="comment">//因为增强for循环foreach是使用迭代器实现的</span></span><br><span class="line">        <span class="comment">//而迭代器是依赖于集合的,如果再使用迭代器的过程中,对集合进行修改,会造成冲突,所以会出现并发修改异常</span></span><br><span class="line">        <span class="comment">//ConcurrentModificationException,并发修改异常,</span></span><br><span class="line">        function1(studentArrayList);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 1)使用迭代器进行循环遍历</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">function1</span><span class="params">(ArrayList&lt;Student&gt; studentArrayList)</span> &#123;</span><br><span class="line">        <span class="comment">//获取迭代器</span></span><br><span class="line">        Iterator&lt;Student&gt; iterator = studentArrayList.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2)使用普通for循环进行遍历</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">function2</span><span class="params">(ArrayList&lt;Student&gt; studentArrayList)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; studentArrayList.size(); i++) &#123;</span><br><span class="line">            System.out.println(studentArrayList.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3)使用增强for循环(foreach)进行遍历</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">function3</span><span class="params">(ArrayList&lt;Student&gt; studentArrayList)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Student student : studentArrayList) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="List-集合排序"><a href="#List-集合排序" class="headerlink" title="List 集合排序"></a>List 集合排序</h4><p><strong>快速排序</strong></p><p>快速排序使用<code>Collections.sort(list)</code>对一般的包装类和引用数据类型 List 集合进行升序排序，不支持实体类集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; integerList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        integerList.add(<span class="number">11</span>);</span><br><span class="line">        integerList.add(<span class="number">24</span>);</span><br><span class="line">        integerList.add(<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">ArrayList&lt;String&gt; strList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        strList.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        strList.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        strList.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="comment">// 默认是升序排序，不支持实体类</span></span><br><span class="line">Collections.sort(integerList); <span class="comment">// 11, 18, 24</span></span><br><span class="line">Collections.sort(strList); <span class="comment">// a, b, c</span></span><br></pre></td></tr></table></figure><p><strong>自定义排序</strong></p><p>直接对需要排序的 List 集合<code>studentList</code>进行如下操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Student&gt; studentList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        studentList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>));</span><br><span class="line">        studentList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Dog&quot;</span>,<span class="number">24</span>));</span><br><span class="line">        studentList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">Collections.sort(studentList, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line">                <span class="comment">//return o2.getAge() - o1.getAge(); //按age降序</span></span><br><span class="line">                <span class="keyword">return</span> o1.getAge() - o2.getAge(); <span class="comment">//按age升序</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">/* [</span></span><br><span class="line"><span class="comment">    Student&#123;name=&#x27;Jerry&#x27;, age=10&#125;,</span></span><br><span class="line"><span class="comment">    Student&#123;name=&#x27;Tom&#x27;, age=12&#125;,</span></span><br><span class="line"><span class="comment">    Student&#123;name=&#x27;Dog&#x27;, age=24&#125;</span></span><br><span class="line"><span class="comment">    ]*/</span></span><br></pre></td></tr></table></figure><p><strong>实体类集合封装 compareTo 方法再进行排序</strong></p><p>实体类先实现<code>Comparable&lt;T&gt;</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写<code>compareTo</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span> &#123;</span><br><span class="line">        <span class="comment">//return this.getAge() - o.getAge(); //this可以省略不写,年龄升序排序</span></span><br><span class="line">        <span class="keyword">return</span> o.getAge() - getAge();<span class="comment">//年龄降序排序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用重写的排序</p><p>直接使用<code>Collections.sort(list)</code>调用泛型 List 集合中实体类重写的排序方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(studentList);</span><br></pre></td></tr></table></figure><h4 id="List-排序原理和扩展"><a href="#List-排序原理和扩展" class="headerlink" title="List 排序原理和扩展"></a>List 排序原理和扩展</h4><p>简单来说就是先比较再排序，我们在实体类重写的<code>compareTo</code>除了用于排序，本身就是一个用于比较的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">12</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Dog&quot;</span>,<span class="number">24</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> tom.compareTo(dog); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure><h4 id="List-进行二分查找"><a href="#List-进行二分查找" class="headerlink" title="List 进行二分查找"></a>List 进行二分查找</h4><p>使用二分查找前必须先排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//将所有指定元素添加到指定 集合 中。</span></span><br><span class="line">Collections.addAll(list,<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>,<span class="string">&quot;田七&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;list = &quot;</span> + list);</span><br><span class="line"><span class="comment">//使用二分查找前必须先排序，排序</span></span><br><span class="line">Collections.sort(list);</span><br><span class="line">System.out.println(list);</span><br><span class="line"><span class="comment">//二分查找，输出索引</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Collections.binarySearch(list, <span class="string">&quot;田七&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;index = &quot;</span> + index);</span><br></pre></td></tr></table></figure><h3 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set 集合"></a>Set 集合</h3><h4 id="Set-集合遍历"><a href="#Set-集合遍历" class="headerlink" title="Set 集合遍历"></a>Set 集合遍历</h4><p>Set 集合不能使用普通 for 循环,因为 Set 集合没有下标 index。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">HashSet&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        set.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法一:使用迭代器进行循环遍历</span></span><br><span class="line">        Iterator&lt;String&gt; iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法二:使用增强for循环进行循环遍历</span></span><br><span class="line">        <span class="keyword">for</span> (String s : set) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="Set-集合元素唯一"><a href="#Set-集合元素唯一" class="headerlink" title="Set 集合元素唯一"></a>Set 集合元素唯一</h4><p>对 Set 类型的集合进行添加元素时，因为 Set 集合元素唯一性，重复的元素不会再次添加进 Set 集合中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HashSet&lt;String&gt; strSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        strSet.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        strSet.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        strSet.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        strSet.add(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// [李四, 张三, 王五]</span></span><br></pre></td></tr></table></figure><p><strong>实体类泛型 Set 集合的元素唯一</strong></p><p>实体类泛型 Set 集合的元素唯一，需要通过 equals()方法去判断元素是否重复,不同的 equals()重写,会得到不同的结果。一般还要重写 hashCode()方法。</p><p>实体类重写 equals()和 hasCode()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) o;</span><br><span class="line">        <span class="keyword">if</span> (id==student.id) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Set-集合存储数据无序"><a href="#Set-集合存储数据无序" class="headerlink" title="Set 集合存储数据无序"></a>Set 集合存储数据无序</h4><p>尝试遍历输出 set 集合你会发现，输出元素的顺序和 add 添加存储的顺序是不一样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HashSet&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        set.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// [李四, 张三, 王五]</span></span><br></pre></td></tr></table></figure><p><strong>实体类泛型 Set 集合元素输出顺序</strong><br>与重写的 hashCode()有关，下面将学生用户的 id 作为 hashCode，则实体类泛型 Set 集合元素将按学生用户 id 的 hashCode 顺序输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="有序的-Set-集合-LinkHashSet"><a href="#有序的-Set-集合-LinkHashSet" class="headerlink" title="有序的 Set 集合 LinkHashSet"></a>有序的 Set 集合 LinkHashSet</h4><p>继承了 HashSet，LinkedHashSet 底层是哈希表(数组+红黑树)+链表:多使用链表结构,可以记录元素的存储顺序,从而实现了有序的 Set。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LinkedHashSet&lt;String&gt; linkedHashSet = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">        linkedHashSet.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        linkedHashSet.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        <span class="comment">// [张三,李四]</span></span><br></pre></td></tr></table></figure><h4 id="转为-LinkHashSet-集合去重且有序"><a href="#转为-LinkHashSet-集合去重且有序" class="headerlink" title="转为 LinkHashSet 集合去重且有序"></a>转为 LinkHashSet 集合去重且有序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要在Product实体类中重写equals、hashCode 略……</span></span><br><span class="line">ArrayList&lt;Product&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Product</span>(<span class="string">&quot;1001&quot;</span>,<span class="string">&quot;小米10&quot;</span>,<span class="number">4999.99</span>,<span class="number">100000</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Product</span>(<span class="string">&quot;1001&quot;</span>,<span class="string">&quot;小米10&quot;</span>,<span class="number">4599.99</span>,<span class="number">90000</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Product</span>(<span class="string">&quot;1001&quot;</span>,<span class="string">&quot;小米10&quot;</span>,<span class="number">4699.99</span>,<span class="number">80000</span>));</span><br><span class="line"></span><br><span class="line">LinkedHashSet&lt;Product&gt; set = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;(list);</span><br></pre></td></tr></table></figure><h3 id="Map-集合"><a href="#Map-集合" class="headerlink" title="Map 集合"></a>Map 集合</h3><p>Map 集合存入 key 键的值不能重复,如果 key 重复会将原来的 value 值覆盖，一般 put 方法返回 null，如果 value 被覆盖了，则返回被覆盖的 value。<br>同样的，实体类泛型 Map 集合也是要重写 equals 方法和 hashCode 方法才能确保 key 的唯一性。</p><h4 id="Map-集合遍历"><a href="#Map-集合遍历" class="headerlink" title="Map 集合遍历"></a>Map 集合遍历</h4><p>Map 遍历方法一：通过 keySet()获取此映射中所有键存入 Set 集合中，通过遍历 Set 中的映射（原 Map 中的键），配合 get(Object key)实现遍历 Map。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Map&lt;String,Integer&gt; Map&lt;姓名,成绩&gt;</span></span><br><span class="line">Map&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;赵同学&quot;</span>,<span class="number">96</span>);</span><br><span class="line">map.put(<span class="string">&quot;钱同学&quot;</span>,<span class="number">92</span>);</span><br><span class="line">map.put(<span class="string">&quot;孙同学&quot;</span>,<span class="number">91</span>);</span><br><span class="line">map.put(<span class="string">&quot;李同学&quot;</span>,<span class="number">99</span>);</span><br><span class="line">Set&lt;String&gt; keys = map.keySet();<span class="comment">//得到所有key的set集合</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String key : keys)&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">    System.out.println(key + <span class="string">&quot;--&gt;&quot;</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Map 遍历方法二：通过 entrySet()将此映射存入 Set 集合中，通过遍历 Set&lt;Map.Entry&lt;K,V&gt;&gt;，同时调用 getKey()和 getValue 获取对应的 key 和 value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;张三老婆&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;李四老婆&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;王五老婆&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;赵六&quot;</span>,<span class="string">&quot;赵六老婆&quot;</span>);</span><br><span class="line"><span class="comment">//可以把键值对映射关系,试下理解为结婚证</span></span><br><span class="line"><span class="comment">//调用map.entrySet()方法,得到一大堆结婚证</span></span><br><span class="line"><span class="comment">//我们通过查询每一张结婚证,可以找到对应的丈夫和妻子</span></span><br><span class="line">Set&lt;Map.Entry&lt;String,String&gt;&gt; entries = map.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String,String&gt; entry : entries)&#123;</span><br><span class="line">    <span class="comment">//K getKey() 返回与此项对应的键。</span></span><br><span class="line">    <span class="comment">//V getValue() 返回与此项对应的值。</span></span><br><span class="line">    System.out.println(entry.getKey() + <span class="string">&quot;--&gt;&quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="无序的-Map-集合-HashMap"><a href="#无序的-Map-集合-HashMap" class="headerlink" title="无序的 Map 集合 HashMap"></a>无序的 Map 集合 HashMap</h4><p>HashMap 是非常高效的，缺点是迭代 HashMap 的顺序并不是放置键值对的顺序,也几就是我们讲的无序，存储顺序和取出顺序是不一致的。<br><a href="#Map%E9%9B%86%E5%90%88%E9%81%8D%E5%8E%86">使用 HashMap 的例子</a></p><h4 id="有序的-Map-集合-LinkHashMap"><a href="#有序的-Map-集合-LinkHashMap" class="headerlink" title="有序的 Map 集合 LinkHashMap"></a>有序的 Map 集合 LinkHashMap</h4><p>LinkedHashMap 通过维护一个双向链表,保证了运输迭代的顺序，存储顺序和取出顺序是一致的。<br>Key 和 Vaule 都允许为空,又因为 key 不允许重复,所以只能有一个 key 为 null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LinkedHashMap&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;Beijing&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;李四&quot;</span>, <span class="string">&quot;Shanghai&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;王五&quot;</span>, <span class="string">&quot;Tianjin&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;赵六&quot;</span>, <span class="string">&quot;广州&quot;</span>);</span><br><span class="line">    Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line">    <span class="keyword">for</span> (String s : keySet) &#123;</span><br><span class="line">        System.out.println(s + <span class="string">&quot;--&gt;&quot;</span> + map.get(s));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="可排序的-Map-集合-TreeMap"><a href="#可排序的-Map-集合-TreeMap" class="headerlink" title="可排序的 Map 集合 TreeMap"></a>可排序的 Map 集合 TreeMap</h4><p>TreeMap 会自动调用排序方法，自定义泛型类时需要提前配置比较方法<a href="####%E5%8F%AF%E6%8E%92%E5%BA%8F%E7%9A%84Map%E9%9B%86%E5%90%88TreeMap">自定义排序</a>，根据 key 对象中的某个属性比较，否则会报错。<br><strong>快速排序</strong><br>一般的包装类作为 key 时，根据 key 对 TreeMap 自动进行默认的升序排序，也可以自定义升序降序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">TreeMap&lt;Integer, String&gt; numTreeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">numTreeMap.put(<span class="number">9</span>,<span class="string">&quot;赵政委&quot;</span>);</span><br><span class="line">numTreeMap.put(<span class="number">5</span>,<span class="string">&quot;李云龙&quot;</span>);</span><br><span class="line">numTreeMap.put(<span class="number">2</span>,<span class="string">&quot;楚云飞&quot;</span>);</span><br><span class="line">numTreeMap.put(<span class="number">7</span>,<span class="string">&quot;杨秀芹&quot;</span>);</span><br><span class="line"></span><br><span class="line">Set&lt;Integer&gt; integers = numTreeMap.keySet();</span><br><span class="line"><span class="keyword">for</span> (Integer integer : integers) &#123;</span><br><span class="line">    System.out.println(integer +<span class="string">&quot;，&quot;</span>+ numTreeMap.get(integer));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2，楚云飞</span></span><br><span class="line"><span class="comment">// 5，李云龙</span></span><br><span class="line"><span class="comment">// 7，杨秀芹</span></span><br><span class="line"><span class="comment">// 9，赵政委</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//手动设置升序、降序</span></span><br><span class="line">TreeMap&lt;Integer, String&gt; numTreeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">        <span class="comment">//return o1 - o2;//升序</span></span><br><span class="line">        <span class="keyword">return</span> o2 - o1; <span class="comment">//降序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>自定义排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">TreeMap&lt;Phone, String&gt; phoneTreeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Phone&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Phone o1, Phone o2)</span> &#123;</span><br><span class="line">                <span class="comment">//return o1 - o2;//升序</span></span><br><span class="line">                <span class="keyword">return</span> o2.getPrice() - o1.getPrice(); <span class="comment">//降序</span></span><br><span class="line">            &#125;</span><br><span class="line">&#125;);</span><br><span class="line">phoneTreeMap.put(<span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&quot;小米&quot;</span>,<span class="number">6666</span>),<span class="string">&quot;雷军&quot;</span>);</span><br><span class="line">phoneTreeMap.put(<span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&quot;华为&quot;</span>,<span class="number">8888</span>),<span class="string">&quot;任正非&quot;</span>);</span><br><span class="line">phoneTreeMap.put(<span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&quot;苹果&quot;</span>,<span class="number">7777</span>),<span class="string">&quot;乔布斯&quot;</span>);</span><br><span class="line">Set&lt;Map.Entry&lt;Phone, String&gt;&gt; phoneEntries = phoneTreeMap.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Phone, String&gt; phoneEntry : phoneEntries) &#123;</span><br><span class="line">    <span class="type">Phone</span> <span class="variable">key</span> <span class="operator">=</span> phoneEntry.getKey();</span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> phoneEntry.getValue();</span><br><span class="line">    System.out.println(key.getBrand() +<span class="string">&quot;，&quot;</span>+ key.getPrice() +<span class="string">&quot;，&quot;</span>+ value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实体类集合封装 compareTo 方法再进行排序</strong><br>实体类先实现<code>Comparable&lt;T&gt;</code>接口<br>重写<code>compareTo</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Phone&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> String brand; <span class="comment">//品牌</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> price;<span class="comment">//价格</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Phone</span><span class="params">(String brand, <span class="type">int</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBrand</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Phone o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price-o.getPrice(); <span class="comment">//升序</span></span><br><span class="line"><span class="comment">//      return o.getPrice()-price; //降序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在封装或重写比较器可用的情况下，TreeMap 会自动排序，直接遍历输出即可得到排序后的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">TreeMap&lt;Phone, String&gt; phoneETreeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">phoneETreeMap.put(<span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&quot;小米&quot;</span>,<span class="number">6666</span>),<span class="string">&quot;雷军&quot;</span>);</span><br><span class="line">phoneETreeMap.put(<span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&quot;华为&quot;</span>,<span class="number">8888</span>),<span class="string">&quot;任正非&quot;</span>);</span><br><span class="line">phoneETreeMap.put(<span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&quot;苹果&quot;</span>,<span class="number">7777</span>),<span class="string">&quot;乔布斯&quot;</span>);</span><br><span class="line">Set&lt;Phone&gt; phones = phoneETreeMap.keySet();</span><br><span class="line"><span class="keyword">for</span> (Phone phone : phones) &#123;</span><br><span class="line">    System.out.println(phone.getBrand() +<span class="string">&quot;，&quot;</span>+ phone.getPrice() +<span class="string">&quot;，&quot;</span>+ phoneETreeMap.get(phone));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 小米，6666，雷军</span></span><br><span class="line"><span class="comment">// 苹果，7777，乔布斯</span></span><br><span class="line"><span class="comment">// 华为，8888，任正非</span></span><br></pre></td></tr></table></figure><h4 id="线程安全的-Map"><a href="#线程安全的-Map" class="headerlink" title="线程安全的 Map"></a>线程安全的 Map</h4><p>Hashtable、ConcurrentSkipListMap<br>略……</p><h2 id="泛型-Generics"><a href="#泛型-Generics" class="headerlink" title="泛型 Generics"></a>泛型 Generics</h2><h3 id="为什么要用泛型，我们看看泛型是如何改变历史的"><a href="#为什么要用泛型，我们看看泛型是如何改变历史的" class="headerlink" title="为什么要用泛型，我们看看泛型是如何改变历史的"></a>为什么要用泛型，我们看看泛型是如何改变历史的</h3><p>需求：<br>创建一个类，打印 Integer 类型的变量</p><h3 id="在没有泛型之前"><a href="#在没有泛型之前" class="headerlink" title="在没有泛型之前"></a>在没有泛型之前</h3><p>&#x2F;&#x2F;todo……</p><h2 id="String-类"><a href="#String-类" class="headerlink" title="String 类"></a>String 类</h2><p>由双引号包围的是字符串，字符串”hello”保存在常量池中，new String( )保存在堆中，<br>使用 new String()创建字符串对象会在堆中创建对象，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>+<span class="string">&quot;c&quot;</span>; <span class="comment">// &quot;ab&quot;+&quot;c&quot;编译时会转换成&quot;abc&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abcde&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="常用-String-API"><a href="#常用-String-API" class="headerlink" title="常用 String API"></a>常用 String API</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">str.length()</span><br><span class="line"><span class="comment">//获取字符串长度</span></span><br><span class="line">str.indexOf(“str1”)</span><br><span class="line">       <span class="comment">//索引子字符串首次出现的位置，存在返回索引下标，不存在返回-1</span></span><br><span class="line">str.lastIndexOf(“str1”)</span><br><span class="line">       <span class="comment">//索引子字符串最后一次出现的位置，存在返回索引下标，不存在返回-1</span></span><br><span class="line">str.substring(<span class="type">int</span> beginIndex)</span><br><span class="line"><span class="comment">//截取字符串</span></span><br><span class="line">str.trim()</span><br><span class="line"><span class="comment">//去除首尾空格</span></span><br><span class="line">str.replace(“str1”,”str2”)</span><br><span class="line"><span class="comment">//替换，将str1替换为str2</span></span><br><span class="line">   str.replaceAll()</span><br><span class="line"><span class="comment">//替换，支持正则表达式</span></span><br><span class="line">str.replaceAll(“\\s”,””)</span><br><span class="line"><span class="comment">//去除字符串中所有空格</span></span><br><span class="line">str.endsWith(“str1”)</span><br><span class="line"><span class="comment">//判断字符串是否以指定字符串str1结尾，返回Boolean布尔值</span></span><br><span class="line">str.startsWith(“str1”)</span><br><span class="line"><span class="comment">//判断字符串是否以指定字符串str1开头，返回Boolean布尔值</span></span><br><span class="line">str.equals(“str1”)</span><br><span class="line"><span class="comment">//判断字符串是否相等</span></span><br><span class="line">   str.equalsIgnoreCase(“str1”)</span><br><span class="line"><span class="comment">//判断字符串是否相等，忽略大小写</span></span><br><span class="line">str.toUpperCase()</span><br><span class="line"><span class="comment">//变大写</span></span><br><span class="line">str.toLowerCase()</span><br><span class="line"><span class="comment">//变小写</span></span><br><span class="line">str.split(“分割符”)</span><br><span class="line"><span class="comment">//以指定分割符分割字符串，课指定分割后的片段数，返回字符串数组</span></span><br></pre></td></tr></table></figure><h3 id="StringBuffer-类"><a href="#StringBuffer-类" class="headerlink" title="StringBuffer 类"></a>StringBuffer 类</h3><p>常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">append() <span class="comment">//拼接StringBuffer字符串</span></span><br><span class="line">setCharAt()</span><br><span class="line">insert()</span><br><span class="line">reverse()</span><br><span class="line">delete()</span><br><span class="line"><span class="comment">//很多方法与String类似</span></span><br></pre></td></tr></table></figure><h3 id="StringBuffer-类-1"><a href="#StringBuffer-类-1" class="headerlink" title="StringBuffer 类"></a>StringBuffer 类</h3><p>方法与 String、StringBuffer 类似</p><h3 id="String-三者的区别"><a href="#String-三者的区别" class="headerlink" title="String 三者的区别"></a>String 三者的区别</h3><h4 id="String-三者互转换"><a href="#String-三者互转换" class="headerlink" title="String 三者互转换"></a>String 三者互转换</h4><p>String、StringBuffer、StringBuilder 三者能够互转。<br><img src="/img/Java%E5%85%A5%E9%97%A8/2022-08-17-18-36-01.png" alt="三者互转"></p><h4 id="线程安全与效率"><a href="#线程安全与效率" class="headerlink" title="线程安全与效率"></a>线程安全与效率</h4><p><img src="/img/Java%E5%85%A5%E9%97%A8/2022-08-17-18-39-44.png" alt="线程安全&amp;效率"></p><h4 id="合理使用-String-三者"><a href="#合理使用-String-三者" class="headerlink" title="合理使用 String 三者"></a>合理使用 String 三者</h4><p>如下图所示，合理使用 String、StringBuffer、StringBuilder<br><img src="/img/Java%E5%85%A5%E9%97%A8/2022-08-17-18-42-23.png" alt="StringX3使用"></p><h2 id="时间与日期"><a href="#时间与日期" class="headerlink" title="时间与日期"></a>时间与日期</h2><p>时间原点 1970 年 1 月 1 日 0 时 0 分 0 秒,格林威治时间</p><h2 id="I-x2F-O-框架"><a href="#I-x2F-O-框架" class="headerlink" title="I&#x2F;O 框架"></a>I&#x2F;O 框架</h2><p><img src="/img/Java%E5%85%A5%E9%97%A8/2022-08-09-16-32-57.png" alt="I/O框架"></p><h3 id="File-类"><a href="#File-类" class="headerlink" title="File 类"></a>File 类</h3><p>File 对象，表示磁盘上的文件或目录。<br>File 类没有提供读写文件的方法。<br>File 的静态属性 String separator 存储了当前系统的路径分隔符。<br>在 UNIX 或 Linux 中，此字段为‘&#x2F;’，在 Windows 中，为‘\\’</p><h4 id="File-的构造方法"><a href="#File-的构造方法" class="headerlink" title="File 的构造方法"></a>File 的构造方法</h4><p><code>public File(String pathname)</code><br>以 pathname 为路径创建 File 对象，可以是绝对路径或者相对路径</p><p><code>public File(String parent,String child) </code><br>以 parent 为父路径，child 为子路径创建 File 对象。</p><p><code>public File(File dirObj,String child) </code><br>以 File 为父路径，child 为子路径创建 File 对象。</p><h4 id="文件名和路径"><a href="#文件名和路径" class="headerlink" title="文件名和路径"></a>文件名和路径</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getName()</span><br><span class="line">getPath()</span><br><span class="line">getAbsoluteFile()</span><br><span class="line">getAbsolutePath()</span><br><span class="line">getParent()</span><br><span class="line">toPath()</span><br><span class="line">renameTo(File newName)</span><br></pre></td></tr></table></figure><h4 id="文件检测"><a href="#文件检测" class="headerlink" title="文件检测"></a>文件检测</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exists()</span><br><span class="line">canWrite()</span><br><span class="line">canRead()</span><br><span class="line">isFile()</span><br><span class="line">isDirectory()</span><br></pre></td></tr></table></figure><h4 id="获取文件信息"><a href="#获取文件信息" class="headerlink" title="获取文件信息"></a>获取文件信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lastModified()</span><br><span class="line">length()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">createNewFile()</span><br><span class="line">delete()</span><br></pre></td></tr></table></figure><h4 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir()</span><br><span class="line">mkdirs()</span><br><span class="line">delete()</span><br><span class="line">list()</span><br><span class="line">listFiles()</span><br></pre></td></tr></table></figure><h3 id="字节和字符"><a href="#字节和字符" class="headerlink" title="字节和字符"></a>字节和字符</h3><h4 id="字符编码发展史"><a href="#字符编码发展史" class="headerlink" title="字符编码发展史"></a>字符编码发展史</h4><p><img src="/img/Java%E5%85%A5%E9%97%A8/2023-03-26-16-32-16.png" alt="字符编码发展史"></p><h4 id="字节-byte"><a href="#字节-byte" class="headerlink" title="字节 byte"></a>字节 byte</h4><p>bit 比特位:计算机是使用二进制来保存数据的,只有两个值,0 或 1<br>1byte&#x3D;8bit,1 个字节等于 8 比特位,开辟空间的最小单位是字节<br>一个英文字母&#x3D;1byte&#x3D;8bit 1 个英文字母是 1 个字节，也就是 8 位<br>在 GBK 或者 GB2312 编码下,一个汉字占 2byte&#x3D;16bit 1 个汉字是两个字节，也就是 16 比特位</p><h4 id="字符-char"><a href="#字符-char" class="headerlink" title="字符 char"></a>字符 char</h4><p>Java 默认采用 unicode 来表示字符，java 中的一个 char 是 2 个字节，一个中文或英文字符的 unicode 编码都占 2 个字节，但如果采用其他编码方式，一个字符占用的字节数则各不相同。<br>在 GB2312 或 GBK 编码中(GBK 是对 GB2312 的升级和扩容)，一个英文字符需要 1 个字节，一个汉字字符存储需要 2 个字节。<br>在 UTF-8 编码中，一个英文字母存储需要 1 个字节，一个汉字字符储存需要 3 到 4 个字节,常用汉字 3 个字节,少部分不常用汉字占 4 个字节<br>在 UTF-16 编码中，一个英文字母字符存储需要 2 个字节，一个汉字字符储存需要 3 到 4 个字节。<br>在 UTF-32 编码中，世界上任何字符的存储都需要 4 个字节。</p><h3 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h3><p>流向内存的是<code>输入流</code>，内存流出的是<code>输出流</code>；<br>读写 8 位二进制的字节是<code>字节流</code>，读写 16 位二进制的字符是<code>字符流</code></p><p>字节流是万能的<br>字符流用到了缓存，一定程度上可以提升程序效率</p><h2 id="网络-I-x2F-O-socket"><a href="#网络-I-x2F-O-socket" class="headerlink" title="网络 I&#x2F;O socket"></a>网络 I&#x2F;O socket</h2><p>网络 I&#x2F;O，就是通过 socket 建立连接，然后使用流来传输信息</p><h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><p><img src="/img/Java%E5%85%A5%E9%97%A8/2024-02-12-18-39-43.png"></p><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><p>除了服务端需要设置监听端口,<br>实际上客户端也是需要一个端口来和服务端建立连接进行通讯<br>这个端口是 TCP&#x2F;IP 来分配的，是不确定的，是随机的</p><h4 id="socket-收发字节流对象"><a href="#socket-收发字节流对象" class="headerlink" title="socket 收发字节流对象"></a>socket 收发字节流对象</h4><p>客户端使用字节流向服务器发送 Hello,I am client001<br>然后断开连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloSocketClient</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9999</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(host,port);</span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">    outputStream.write(<span class="string">&quot;Hello,I am client001&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">    socket.shutdownOutput();</span><br><span class="line">    outputStream.close();</span><br><span class="line">    socket.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloSocketServer</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9999</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(port);</span><br><span class="line">    <span class="comment">//block wait client connect</span></span><br><span class="line">    <span class="type">Socket</span> <span class="variable">accept</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> accept.getInputStream();</span><br><span class="line">    <span class="type">byte</span>[] bufferBytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ((readLen = inputStream.read(bufferBytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">      System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bufferBytes, <span class="number">0</span>, readLen));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    accept.shutdownInput();</span><br><span class="line">    inputStream.close();</span><br><span class="line">    accept.close();</span><br><span class="line">    serverSocket.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到客户端&#x2F;服务端都有 Socket 对象<br>这些 Socket 对象都可以通过使用 getInputStream() &#x2F; getOutputStream() 来进行字节流传输 输入 &#x2F; 输出给对方<br>上面只演示了客户端发送给服务端，事实上还可以扩写服务端发送给客户端，这里不再演示</p><h4 id="socket-收发字符流对象"><a href="#socket-收发字符流对象" class="headerlink" title="socket 收发字符流对象"></a>socket 收发字符流对象</h4><p>众所周知，字节流和字符流可以相互转换，所以我想这节的代码你可以用上一节字节流的代码然后转换成字符流</p><p>OutputStream -&gt; Writer<br>InputStream -&gt; Reader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);</span></span><br><span class="line"><span class="comment">//没想到吧我后面偷偷换成了BufferWriter缓存字符流，缓存字符流比字符流有更多扩展方法</span></span><br><span class="line"><span class="type">BufferWriter</span> <span class="variable">bufferWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(outputStream));</span><br><span class="line">bufferWriter.writer(<span class="string">&quot;hello,I am client002&quot;</span>);</span><br><span class="line">bufferedWriter.newLine();<span class="comment">//添加一个换行符，类似于socket.shutdownOutput() 表示输出内容结束</span></span><br><span class="line">bufferedWriter.flush();<span class="comment">//字符流从内存的缓存区冲入socket通道</span></span><br></pre></td></tr></table></figure><p>在关闭字符流时会强制性地将缓冲区中的内容进行输出，但是如果没有关闭，缓冲区中的内容是无法输出的。<br>如果不想在关闭时再输出字符流的内容也行，使用 Writer 的 flush()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream));</span><br><span class="line">bufferedReader.readLine();<span class="comment">//读取newLine换行结束标记之前的所有字符，返回字符串</span></span><br></pre></td></tr></table></figure><h3 id="UDP-略……"><a href="#UDP-略……" class="headerlink" title="UDP 略……"></a>UDP 略……</h3><h2 id="JVM——Java-虚拟机"><a href="#JVM——Java-虚拟机" class="headerlink" title="JVM——Java 虚拟机"></a>JVM——Java 虚拟机</h2><p>JVM 只是一个软件，是会不断更新的，下面的内容仅供参考……</p><h3 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h3><h4 id="什么是类加载机制"><a href="#什么是类加载机制" class="headerlink" title="什么是类加载机制"></a>什么是类加载机制</h4><p>在整个运行时，<code>解释器</code>和<code>编译器</code>的相互配合，使 Java 程序几乎能够达到和编译型语言一样的执行速度。</p><ul><li>解释器<br>Java 文件通过 javac 编译成 class 字节码文件，然后由 jvm 加载字节码，运行时解释器将 class 字节码解释为机器码来执行。</li><li>编译器<br>在程序运行期间，即时编译器会将该部分 class 字节码编译成机器码，以获得更高的执行效率。</li></ul><p>编译器是更专业的人做的，我管不了，<br>但是我们应该了解<code>jvm加载字节码的这个过程，这个过程就是类加载机制</code></p><h4 id="类加载的目的"><a href="#类加载的目的" class="headerlink" title="类加载的目的"></a>类加载的目的</h4><p>类加载就是把一份被 javac 编译过的 class 字节码文件，通过加载，生成某种形式的 Class 数据结构进入内存，程序可以调用这个数据结构来构造出 object，这个过程是在运行时进行的，这也是 Java 动态拓展性的根基。</p><h4 id="类加载-amp-类的生命周期"><a href="#类加载-amp-类的生命周期" class="headerlink" title="类加载 &amp; 类的生命周期"></a>类加载 &amp; 类的生命周期</h4><p><code>连接 = 验证 + 准备 + 解析</code><br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-01-07-19-09-13.png" alt="类加载 &amp; 类的生命周期"></p><h5 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h5><p><code>类加载只包括，加载、连接、初始化，这三个过程。</code><br><code>用户能做的是加载和初始化两个阶段</code></p><h5 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h5><p>上面这张图得知，从 javac 编译到卸载就是类的生命周期。</p><ul><li><code>加载</code><br><code>加载，是一个读取class文件，将其转化为某种静态数据结构存储在方法区内，并在堆中生成一个便于用户调用的java.lang.Class类型的对象的过程。</code><br>这里读取的 class 文件不一定指的是本地的 class 文件，泛指各种来源的二进制流，比如说来自于网络、来自于数据库、甚至是实时生成的 class；其中像很著名的动态代理技术就是使用到了实时计算出来的 class，然后实例化代理对象。<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-01-07-19-07-38.png"></li><li>验证<br>对文件格式的检验其实是发生在加载阶段的，如果通过才能够加载，加载之后，此时方法区内虽然已经存在在该 class 的静态结构，堆中也存在了该 Class 类型的对象，但是并不代表着 JVM 已经认可了这个类，如果程序需要使用这个类就必须进行连接，而连接的第一步就是进一步对这个类进行验证。<br><code>简单来说就是对class静态结构进行语法和语义的分析，保证其不会产生危害JVM虚拟机的行为。</code><br>但是这并不意味着验证结束了，还有一段对符号引用进行验证的步骤，发生在解析阶段。<br>不得不说这个验证模块有屎山的雏形了，搞不好哪天就重构了。</li><li>准备<br>在前面元数据字节码验证通过后，这时候会进入准备阶段<br><code>准备阶段就是为该类中定义的静态变量赋零0值</code><br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-01-07-19-11-32.png"></li><li>解析<br><code>解析就是将符号引用替换为直接引用</code><br>值得注意的是，<code>解析</code>阶段是灵活的，它可以在初始化之后再进行，实现“后期绑定”，也就是多态。<br><code>当解析完成意味着整个连接部分完成，外部加载的Java类已经成功的引入到了你的程序中。</code><br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-01-07-19-12-02.png"></li><li><ul><li>静态解析<br><code>如果A引用的B是一个具体的实现类，那么就称为静态解析。</code><br>在 A 被编译为 A.class 的过程中，并且 A 中引入了 B，那么在编译阶段，A 是不知道 B 有没有被编译的，而且此时 B 也一定没有被加载，所以 A 肯定不知道 B 的实际地址。此时在 A.class 文件中，将使用一个符号比如 S 来代表 B 的地址，那个 S 就被成为符号引用，在运行时，如果 A 发生了类加载，到解析阶段会发现 B 还未被加载，那么将会触发 B 的类加载，将 B 加载到 JVM 虚拟机中，此时 A 中 B 的符号引用将会被替换成 B 的实际地址直接引用。</li></ul></li><li><ul><li>动态解析<br><code>如果A引用的B是一个抽象类或者是接口，那么就称为动态解析</code><br>如果 A 引用的 B 是一个抽象类或者是接口，那么 B 可能有两个实现类 C 和 D，此时 B 的具体实现并不明确，直到运行过程中发生了调用，此时虚拟机调用栈将会得到具体的类型信息，这时候再进行解析，就能用明确的实际地址直接引用来替换符号引用了。<br>这样子就通过“后期绑定”实现了多态，底层对应了 invokeDynamic 这条字节码指令。</li></ul></li><li><code>初始化</code><br><code>初始化阶段会判断代码中是否存在主动的资源初始化动作，如果有就执行。不包括该类的构造函数，只有显示的调用new指令，才会调用构造函数，进行对象的实例化。 主动的资源初始化动作包括：成员变量的赋值动作，静态变量的赋值动作，以及静态代码块逻辑。</code><br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-01-07-19-12-45.png"></li></ul><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><h4 id="类加载器规范"><a href="#类加载器规范" class="headerlink" title="类加载器规范"></a>类加载器规范</h4><ul><li>启动类加载器 Bootstrap ClassLoader</li><li>非启动类加载器 Other<br>也就是说类加载器至少要实现这两个加载器，不同的 JVM 虚拟机可以有不同的实现方式</li></ul><h4 id="类加载器——以-HotSpot-虚拟机的实现为例"><a href="#类加载器——以-HotSpot-虚拟机的实现为例" class="headerlink" title="类加载器——以 HotSpot 虚拟机的实现为例"></a>类加载器——以 HotSpot 虚拟机的实现为例</h4><ul><li>启动类加载器 Bootstrap ClassLoader<br>基于 c&#x2F;c++实现，无法作为对象被程序引用，主要用来加载 Java 的核心类库，比如 JAVA_HOME&#x2F;lib，或者启动参数指定的核心类库，并且只加载白名单 java&#x2F;javax&#x2F;sun 开头的包<br>DriverManager.class.getClassLoader() 如果是 null 就说明这个类是被 Bootstrap ClassLoader 加载的</li><li>非启动类加载器 Other<br>基于 Java 实现，继承自 java.lang.ClassLoader，加载逻辑由 defineClass()处理，可以作为对象被引用</li><li><ul><li>Extension ClassLoader</li></ul></li><li><ul><li>Application ClassLoader<br>平时编写的 Java 程序几乎都是 Application ClassLoader 加载的</li></ul></li><li><ul><li>User ClassLoader<br>和前面两个 ClassLoader 不同，User ClassLoader 能够加载任意来源的 class 字节码文件的二进制流</li></ul></li></ul><p>JVM 规范：每个类加载器都有属于自己的命名空间<br>即使你用不同的加载器加载了限定名一样的类，JVM 也会认为这是两个不同的类，所以不同加载器创建的两个限定名一样的类实例 instanceof 是 false</p><h4 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h4><p>默认情况下，一个限定名的类只会被一个类加载器加载并解析使用，这样在程序中它就是唯一的。<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-02-05-20-12-03.png"></p><h4 id="双亲委派模型的破坏-第一次"><a href="#双亲委派模型的破坏-第一次" class="headerlink" title="双亲委派模型的破坏 第一次"></a>双亲委派模型的破坏 第一次</h4><p>重写 loadClass()，如果要保留双亲委派则重写 findClass()而不是 loadClass()</p><h4 id="双亲委派模型的破坏-第二次"><a href="#双亲委派模型的破坏-第二次" class="headerlink" title="双亲委派模型的破坏 第二次"></a>双亲委派模型的破坏 第二次</h4><p>JDK 内部提供一组接口规范，但当你去调用 jdk 中的接口时，接口所在的类将会引起，第三方类库的加载<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-02-05-20-08-41.png"></p><h4 id="双亲委派模型的破坏-第三次"><a href="#双亲委派模型的破坏-第三次" class="headerlink" title="双亲委派模型的破坏 第三次"></a>双亲委派模型的破坏 第三次</h4><p>热部署</p><h3 id="从硬件到-Java-编程语言的-内存模型映射"><a href="#从硬件到-Java-编程语言的-内存模型映射" class="headerlink" title="从硬件到 Java 编程语言的 内存模型映射"></a>从硬件到 Java 编程语言的 内存模型映射</h3><p>硬件内存模型的目标是为了让汇编代码能够运行在一个具有一致性的内存视图上。</p><p>随着高级语言的流行，工程师开始设计编程语言的内存模型，这是为了能够使用该语言编程的时候也能拥有一个具有一致性的内存视图。</p><h4 id="硬件内存模型"><a href="#硬件内存模型" class="headerlink" title="硬件内存模型"></a>硬件内存模型</h4><p>CPU 的处理速度与内存的读写速度不是同一级别的，所以要在 CPU 和内存之间加上缓存<br>这样就呈现了<br>CPU &lt;-&gt; CPU[CPU Registers] &lt;-&gt; CPU[Cache Memory] &lt;-&gt; RAM[Main Memory]<br>的访问结构</p><p>这种结构在单 CPU 的时期运行起来没有问题，但是当一台计算机引入多个 CPU 时，访问结构就变成了<br>CPU.a &lt;-&gt; CPU.a.[CPU Registers] &lt;-&gt; CPU.a.[Cache Memory] &lt;-&gt; RAM[Main Memory]<br>CPU.b &lt;-&gt; CPU.b[CPU Registers] &lt;-&gt; CPU.b.[Cache Memory] &lt;-&gt; RAM[Main Memory]</p><p>这样会导致多个 CPU 缓存之间会不同步，针对这个问题，解决方法是使用缓存一致性协议，并且把等待唤醒从同步改成异步，那样另一个 CPU 在等待的时候就可以先去做别的事情</p><p>CPU.a &lt;-&gt; CPU.a.[CPU Registers] &lt;-&gt; CPU.a.[Cache Memory] &lt;-&gt; 缓存一致性协议 &lt;-&gt; RAM[Main Memory]<br>CPU.b &lt;-&gt; CPU.b[CPU Registers] &lt;-&gt; CPU.b.[Cache Memory] &lt;-&gt; 缓存一致性协议 &lt;-&gt; RAM[Main Memory]</p><p><img src="/img/Java%E5%85%A5%E9%97%A8/2024-01-21-23-58-12.png"><br>CPU 缓存一致性协议，大致可以分为两类，窥探型和基于目录型。<br>既然此时另一个 CPU 会去做别的事情，那么就发生了指令的重排序的问题，但是 CPU 在指令重排的情况下依然需要保证程序执行结果的正确性。</p><ul><li>指令重排问题不是本章重点，但我也记录一下相关知识点关键词<br>store buffer<br>store forwarding<br>invalid queue<br>写屏障<br>内存屏障</li></ul><h4 id="Java-内存模型"><a href="#Java-内存模型" class="headerlink" title="Java 内存模型"></a>Java 内存模型</h4><p>在 Java 内存模型中基于<code>线程间的通信方式</code>来实现主存与本地内存之间的数据传输与同步</p><p><img src="/img/Java%E5%85%A5%E9%97%A8/2024-01-21-20-53-17.png"><br>线程间的通信方式：内存读写指令<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-01-21-22-41-50.png" alt="线程间的通信方式——内存读写指令"><br>Java 内存模型中也存在着指令重排序问题，这会导致多线程程序中出现可见性问题，这是需要我们去解决的</p><p>多个 CPU 缓存之间会不同步，多线程</p><h4 id="JVM-和计算机的内存映射关系"><a href="#JVM-和计算机的内存映射关系" class="headerlink" title="JVM 和计算机的内存映射关系"></a>JVM 和计算机的内存映射关系</h4><p><img src="/img/Java%E5%85%A5%E9%97%A8/2024-01-21-20-55-22.png"></p><h3 id="JVM-中的内存的分区"><a href="#JVM-中的内存的分区" class="headerlink" title="JVM 中的内存的分区"></a>JVM 中的内存的分区</h3><p>和某些操作系统类似，JVM 也将连续的内存抽象为不同的内存区域<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-01-27-10-27-07.png"></p><h4 id="被所有线程共享-x2F-仅被当前线程独占"><a href="#被所有线程共享-x2F-仅被当前线程独占" class="headerlink" title="被所有线程共享 &#x2F; 仅被当前线程独占"></a>被所有线程共享 &#x2F; 仅被当前线程独占</h4><p>按照 被所有线程共享 &#x2F; 仅被当前线程独占 的内存分区<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-01-27-10-31-19.png"><br>从上面的内存分区可以得知，<br>对象都是在<code>Heap 堆</code>上分配的，所以在并发读写对象时，就需要考虑线程安全性；<br>而方法内局部变量，是分配在<code>JVM Stacks 虚拟机栈</code>上的，只供当前线程独占，就不需要考虑线程安全性</p><h4 id="程序计数器-硬件-x2F-JVM-软件"><a href="#程序计数器-硬件-x2F-JVM-软件" class="headerlink" title="程序计数器 硬件&#x2F;JVM 软件"></a>程序计数器 硬件&#x2F;JVM 软件</h4><ul><li><ul><li>硬件<br>程序计数器是 CPU 的寄存器，用来存储指令地址，提供给处理器去执行</li></ul></li><li><ul><li>JVM 软件<br><code>程序计数器是用来存储对应线程的字节码指令地址，提供给执行引擎去处理执行。</code><br>我们可以从侧面论证这点，下面使用 javap 反编译后，可以看到字节码指令之间的偏移量，bytecode index，这就是程序计数器所需要读取的数据，可以看到 11:goto 2，这正体现了源码中的循环逻辑。<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-01-27-10-51-26.png"></li></ul></li></ul><h4 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h4><p>Java 方法栈<br>程序执行的过程对应着方法的调用，方法的调用对应着栈帧的入栈和出栈。<br>比如下面这个例子，假设代码运行后首先 call 到了 funcA，那么将 funcA 封装成栈帧入栈<br>因为 funcA 里面又 call 到了 funcB，所以 funcB 随后也封装成栈帧入栈<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-01-28-23-54-32.png"><br>然后先执行 funcB 中的逻辑，等于 funcB 栈帧出栈；<br>再执行 funcA 中的逻辑，等于 funcA 栈帧出栈</p><h5 id="栈帧"><a href="#栈帧" class="headerlink" title="栈帧"></a>栈帧</h5><p>栈帧，可以暂时认为是方法调用的一种封装。</p><p>栈帧的生成是根据程序运行时的实际情况来决定的<br>在编译期间，无法确定 Java 方法栈的深度，编译器是无法检查出 Stackoverflow 这种异常的</p><ul><li>局部变量表<br>编译期间就能够存储函数的入参，<br>函数内的局部变量，8 大基本数据类型，对象的引用地址，返回值地址</li><li>操作数栈<br>在操作系统中，操作数是指令的一部分<br>而在 JVM 层面中，操作数栈主要有两个作用：<br>① 用栈来存储函数内的变量以及中间结果<br>② 方便指令顺序读取操作数<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-01-30-22-48-58.png"><br>上面是一个栈帧的情况，如果我们的程序运行了多个函数，并且产生了方法的调用，那就对应下面多个栈帧的情况<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-01-30-22-57-36.png"><br>根据上图代码，在运行的时候，虚拟机栈中应该会出现两个栈帧 A 和 B；<br>首先执行栈帧 B，我们可以想象 n 和 m 将会作为两个操作数入栈，通过求和字节码指令计算结果，将计算结果存入局部变量表，实际上栈帧 B 的结果后面将会成为栈帧 A 的操作数；<br>然后执行栈帧 B，将栈帧 B 的局部变量表中的计算结果复制到栈帧 A 的操作数栈。<br>当然 JVM 在实现这部分的时候并不是复制，而是有设计了重叠的区域。</li><li>动态链接<br>Java 中的多态就是通过栈帧中的动态链接实现的。<br>每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态链接。<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-01-31-23-28-26.png"><br>感兴趣的可以反编译该源码看看</li><li>返回地址<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-02-01-22-57-40.png"></li><li><ul><li>正常返回<br>若方法 B 正常返回，则说明栈帧 B 运行完成，接下来会运行栈帧 A，由于方法 B 是被方法 A 调用的，那么栈帧 B 在退出虚拟机的时候，需要把返回信息共享给栈帧 A 的操作数栈，同时需要修改程序计数器的值，让程序能够继续执行下去。</li></ul></li><li><ul><li>异常返回<br>若方法 B 异常返回，需要通过额外的异常处理器表处理，其他和程序计数器相关的逻辑基本和正常返回一致。</li></ul></li></ul><p>本地方法栈<br>非 Java 语言实现的函数，往往是由 c&#x2F;cpp 来实现的，和操作系统相关的底层函数</p><h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><p>方法区是 JVM 规范，不同的 JVM 可能有着不同的方法区实现，我们以 HotSpot 虚拟机为例:<br>HotSpot 在 JDK8 前使用永久代来实现方法区，在 JDK8 后使用元空间实现方法区<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-02-05-15-21-30.png"><br><strong><del>永久代</del></strong><br>永久代的设置大小，可以通过启动参数来指定，但其中存储的数据大小是动态变化的，若阈值设置的太小则可能导致频繁的类卸载或者是内存溢出问题；设置的太大可能存在空间浪费。<br><strong>元空间</strong><br>使用元空间重构了方法区的实现</p><h5 id="类型信息"><a href="#类型信息" class="headerlink" title="类型信息"></a>类型信息</h5><ul><li>类签名</li><li>属性</li><li>方法</li></ul><h5 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h5><ul><li>编译期常量池<br>类型信息、符号引用、 字节码生成的 Class 对象、字节码生成的字面量</li><li>运行时常量池<br>直接引用，将一部分符号引用转换为直接引用就是多态<br>字符串常量池</li></ul><h5 id="垃圾回收方法区"><a href="#垃圾回收方法区" class="headerlink" title="垃圾回收方法区"></a>垃圾回收方法区</h5><p>如果你有遇到 OOM 异常，可以试着如下思路：<br>字节码生成的 Class 对象选择性卸载，需要再重新加载；<br>字符串常量池的部分回收</p><h4 id="堆-Heap"><a href="#堆-Heap" class="headerlink" title="堆 Heap"></a>堆 Heap</h4><p>堆内存是垃圾回收的主战场，因为个人目前功力尚浅，暂时先略过</p><h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h2><h3 id="分清楚进程和线程"><a href="#分清楚进程和线程" class="headerlink" title="分清楚进程和线程"></a>分清楚<code>进程</code>和<code>线程</code></h3><ul><li>进程</li><li><ul><li>程序就是指令和代码数据，一个程序被运行，会从硬盘加载这个程序的代码数据到内存，指令加载到 CPU，这时就开启了一个进程。</li></ul></li><li><ul><li>在指令运行过程中，还需要用到硬盘，网络等设备。进程就是用来加载指令、管理内存、管理 I&#x2F;O 的。</li></ul></li><li><ul><li>进程是程序的一个实例，有的程序可以运行多个实例进程 <del>记事本，QQ 飞车</del>，有的程序只能运行一个实例进程 <del>穿越火线，具有相同文件名的 Excel</del></li></ul></li><li><ul><li>进程间通信，<code>一台计算机中本地进程通信</code>的唯一标识是 ProcessID,由系统内核分配并统一管理；<code>不同计算机的网络间进程间通信</code>需要借助因特网，通常是实现了 TCP&#x2F;IP 协议簇的<code>socket接口</code>，当进程需要访问网络时,才会有端口号。</li></ul></li><li>线程</li><li><ul><li>一个进程内可以分为一到多个线程</li></ul></li><li><ul><li>一个线程就是一个指令流，将指令流中的一条条指令以一定的顺序交给 CPU 执行</li></ul></li></ul><h3 id="分清楚并发和并行"><a href="#分清楚并发和并行" class="headerlink" title="分清楚并发和并行"></a>分清楚<code>并发</code>和<code>并行</code></h3><p>多进程是操作系统的多任务，多线程是程序的多任务</p><ul><li>并发<br>一般地，我们将这种<code>线程轮流使用CPU核心</code>的做法称为并发。<br>即使是单核处理器也支持多线程执行代码，CPU 通过给每个线程分配 CPU 时间片来实现这个机制。时间片是 CPU 分配给各个线程的时间，因为时间片非常短，所以 CPU 通过不停地切换线程执行，让我们感觉多个线程是同时执行的，时间片一般是几十毫秒（ms）。<br>CPU 通过时间片分配算法来循环执行任务，当前任务执行一个时间片后会切换到下一个任务。但是，在切换前会保存上一个任务的状态，以便下次切换回这个任务时，可以再加载这个任务的状态。所以任务从保存到再加载的过程就是一次上下文切换。</li><li>并行<br><code>在多核处理器中，一段时间内工作线程各自使用不同的CPU核心进行工作，也就是同时运行多个线程的能力叫做并行</code>。</li></ul><p>但是并行和并发是有可能会同时存在的，比如线程数比 CPU 核心数量多的时候<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-08-04-12-59-53.png"><br>比如这里有 2 个 CPU 核心，但是有 4 个线程，要如何读完这些线程的指令进行工作呢<br>方法一：先把线程 3 和线程 4 并行执行结束；再把线程 1 和线程 2 并行执行结束<br>方法二：先把线程 3 和线程 4 并行执行一段时间，再并发切换到线程 1 和线程 2（这样一来并行和并发是同时存在的）</p><h3 id="多线程的应用场景"><a href="#多线程的应用场景" class="headerlink" title="多线程的应用场景"></a>多线程的应用场景</h3><ul><li>人机操作界面交互——并发<br>或许人机操作界面交互也是属于 I&#x2F;O 的一部分？</li><li>I&#x2F;O 密集型——并发——异步调用<br>假设你用一个 main 函数，也就是一个 main 的线程，运行到了一个硬盘&#x2F;网络文件的读写阻塞 I&#x2F;O 指令，那就会因为硬盘或网络 I&#x2F;O 的读写阻塞在这条指令上。后续的指令就无法执行，但在 I&#x2F;O 阻塞指令时 CPU 核心会是空闲的。<br>那么你可以将这个文件读写的指令写在 main 线程以外的 nonMain 新线程里，当 nonMain 线程 I&#x2F;O 阻塞时，CPU 可以先切换到 main 线程先执行后续的指令，不需要等待文件读写阻塞结束才能执行后续的指令。</li><li>计算密集型——并行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 伪代码 */</span></span><br><span class="line"><span class="comment">// 指令计算1花费10ms</span></span><br><span class="line"><span class="comment">// 指令计算2花费13ms</span></span><br><span class="line"><span class="comment">// 指令计算3花费10ms</span></span><br><span class="line"><span class="comment">// 指令汇总4花费10ms</span></span><br></pre></td></tr></table></figure><p>假设你用一个 main 函数，也就是一个 main 的线程，顺序执行 4 个指令，总共花费的时间是 10+13+10+10&#x3D;43ms；<br>但如果你有 4 个 CPU 核心，那你可以新创建 3 个线程，<br>CPU 核心 1 执行计算 1，CPU 核心 2 执行计算 2，CPU 核心 3 执行计算 3，CPU 核心 4 执行汇总 4，花费时间只取决于最长的那个线程花费的时间，即 13ms，最后加上汇总时间就是 23ms。</p><p><code>计算密集型场景下的应用原理是基于 CPU 多个核心的并行计算，如果 CPU 只有单个核心的话，这个场景是不适用的，反倒会变成单个 CPU 核心的并发，这样会增加线程上下文切换的开销。</code></p><h3 id="如何计算和控制-CPU-核心数量"><a href="#如何计算和控制-CPU-核心数量" class="headerlink" title="如何计算和控制 CPU 核心数量"></a>如何计算和控制 CPU 核心数量</h3><h4 id="理解-CPU-数量"><a href="#理解-CPU-数量" class="headerlink" title="理解 CPU 数量"></a>理解 CPU 数量</h4><ul><li>插槽上的 CPU 数量<br>安装在主板插槽（Socket）上的物理芯片，也就是通常组装家用计算机时所说的那一块 CPU</li><li>CPU 内核<br>在主板插槽上的那一块 CPU 物理芯片内部，还可能是有多个 CPU 核心的</li><li>CPU 线程 即逻辑处理器<br>这是一个逻辑层面的，只有操作系统可见，表示 CPU 内核能够支持的线程数量，如果能够支持超线程技术，那 1 颗物理意义上的内核在使用了超线程技术后，逻辑上可以当成 2 颗内核来发挥作用。每个线程都作为独立的 CPU 实例运行。<br><a href="https://www.intel.cn/content/www/cn/zh/gaming/resources/hyper-threading.html">https://www.intel.cn/content/www/cn/zh/gaming/resources/hyper-threading.html</a></li></ul><h4 id="计算-CPU-数量"><a href="#计算-CPU-数量" class="headerlink" title="计算 CPU 数量"></a>计算 CPU 数量</h4><ul><li><p>总 CPU 内核数 &#x3D; 插槽 CPU 数 x 单个插槽上 CPU 的内核数</p></li><li><p>总 CPU 逻辑处理器数 &#x3D; 插槽 CPU 数 x 单个插槽上 CPU 的内核数 x 超线程数</p></li><li><p>让我们来计算 i5-8300H 的 CPU 数量</p></li><li><ul><li>在 Windows 操作系统下<br>好吧，或许这都不需要你自己动手计算，因为在 Windows 操作系统下打开任务管理器就能查看到了<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-08-18-21-32-08.png"><br>总内核数 4 &#x3D; 插槽数 1 x 内核数 4<br>总逻辑内核数 8 &#x3D; 插槽数 1 x 内核数 4 x 超线程数常量 2<br>可以打开 i5-8300H 的官方文档查看一下答案，确实是<br>总内核数 4，<br>总线程数（逻辑处理器数）8<br><a href="https://www.intel.cn/content/www/cn/zh/products/sku/134876/intel-core-i58300h-processor-8m-cache-up-to-4-00-ghz/specifications.html">https://www.intel.cn/content/www/cn/zh/products/sku/134876/intel-core-i58300h-processor-8m-cache-up-to-4-00-ghz/specifications.html</a></li></ul></li><li><ul><li>在 Linux 操作系统下<br>可以用<code>cat /proc/cpuinfo</code>查看<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-08-19-00-43-37.png"><br>当然可以过滤一下，<br>物理插槽都是 0，所以插槽 CPU 数&#x3D;1;<br>cores 都是 4，所以单个插槽上 CPU 的内核数&#x3D;总 CPU 内核数&#x3D;4;<br>processor 有 8 个，所以总逻辑处理器数&#x3D;8;<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-08-19-00-45-56.png"></li></ul></li><li><p>大小核心<br>随着 12th Generation Intel Alder Lake CPUs 的提出，处理器有了新的特点，那就是同时拥有两种内核：性能核（Performance Cores） + 效率核（Efficient Cores），简称为 P 核和 E 核，也就是中文网站所说的大（P）小（E）核。<br>P 核提供超线程，因此每个 P 核会有 2 个 thread，E 核只支持单线程。<br>总内核数&#x3D; 插槽 CPU 数 x ( 单个插槽上 CPU 的 P 核数 + 单个插槽上 CPU 的 E 核数)<br>总逻辑处理器数 &#x3D; 插槽 CPU 数 x ( 单个插槽上 CPU 的 P 核数 x 2 + 单个插槽上 CPU 的 E 核数 x 1)</p></li><li><p>不要沉迷于 CPU 核心数的计算<br>你算出来的核心数是一回事，那些核心工作不工作就是另外一回事了，你又不是造 CPU 的，操这个心。</p></li></ul><h4 id="控制-CPU-数量"><a href="#控制-CPU-数量" class="headerlink" title="控制 CPU 数量"></a>控制 CPU 数量</h4><ul><li>硬件控制<br>买来的时候，单核就单核，多核就多核</li><li>软件控制</li><li><ul><li>使用虚拟机，分配合适的 CPU 核心数量<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-08-18-20-19-37.png"></li></ul></li><li><ul><li>Windows 操作系统下使用 msconfig，分配合适的 CPU 核心数量，需要重启<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-08-18-20-23-27.png"></li></ul></li></ul><h3 id="查看和杀死进程-x2F-线程"><a href="#查看和杀死进程-x2F-线程" class="headerlink" title="查看和杀死进程&#x2F;线程"></a>查看和杀死进程&#x2F;线程</h3><ul><li>windows.杀死进程<br><code>taskkill</code><br>具体用法可以查看 api 手册，taskkill &#x2F;?<br>不过通常要先查看进程，找到要杀死的进程，一般要具体到唯一的进程 id</li><li>windows.查看进程<br><code>tasklist</code>可以查看进程，通常还会加上名称过滤，比如我这里查看 firefox 相关的进程<br>tasklist | findstr firefox<br>又或者我们来看看 Java 相关的进程<br>tasklist | findstr java<br>比如此时我只有 dbeaver 在运行，那只会看到一个唯一 Java.exe 进程，但是如果我再运行一个 intellij-IDEA，或者别的基于 Java 环境的程序<br>然后我会发现有很多个 Java.exe 进程，他们可能是 intellij-IDEA，也可能是 dbeaver 等等<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-08-25-14-34-23.png"></li></ul><p>那么多 Java.exe 进程傻傻分不清楚了吧？</p><ul><li>Java.查看 Java 进程<br>在有 Java 环境的操作系统中可以使用<code>jps</code>命令查看与 Java.exe 相关的 Java 程序进程，一般能更详细地看到 Java 进程的启动类名称</li><li>Linux.杀死进程<br><code>kill yourProcessId</code></li><li>Linux.查看进程<br><code>ps -ef</code> 可以查看进程，通常还会加上名称过滤，比如我这里查看 firefox 相关的进程<br>ps -ef | grep firefox</li><li>Linux.查看线程</li><li><ul><li>Linux.查看线程.ps<br><code>ps -Tf -p yourProcessId</code></li></ul></li><li><ul><li>Linux.查看线程.top<br>在 Linux 下，通常用 top 命令来看进程信息，但是也可以用来看线程信息<br><code>top``[按下大写H切换是否显示线程]</code><br><code>top -H -p yourProcessId</code><br>可以试着写一段多线程无限循环使用 CPU 的 Java 程序，再用该命令查看，<br>你会发现除了能够看到你 Java 程序代码里定义的线程，还能看到另外一些 JVM 线程</li></ul></li><li>Java.查看线程<br><code>jstack yourProcessId</code><br>运行 jstack 的那一刻，进程中所有的线程信息快照，能够看到线程状态</li></ul><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>用 Java 环境计算机的<code>jps</code>命令打印出所有的 Java 进程名称和<code>唯一的进程id</code>，再去跟跟进进程内部的线程</p><h3 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h3><p><img src="/img/Java%E5%85%A5%E9%97%A8/2024-08-29-21-23-58.png"></p><h4 id="线程状态——操作系统层面"><a href="#线程状态——操作系统层面" class="headerlink" title="线程状态——操作系统层面"></a>线程状态——操作系统层面</h4><ul><li>初始状态</li><li>可运行——操作系统<br>失去 CPU 时间片，发生了上下文切换</li><li>运行——操作系统<br>获得 CPU 时间片</li><li>阻塞——操作系统<br>阻塞 API，如 BIO 读写文件，这时该线程不会使用 CPU，发生了上下文切换<br>被唤醒转为可运行后才能被调度</li><li>终止</li></ul><h4 id="线程状态——Java-层面"><a href="#线程状态——Java-层面" class="headerlink" title="线程状态——Java 层面"></a>线程状态——Java 层面</h4><p><img src="/img/Java%E5%85%A5%E9%97%A8/2024-08-29-21-52-10.png"></p><ul><li>NEW</li><li>RUNNABLE</li><li><code>BLOCKED</code><br>synchronized</li><li><code>WAITING</code><br>join</li><li><code>TIIMED_WAITING</code><br>sleep</li><li>TERMINATED</li></ul><h3 id="为什么要学多线程"><a href="#为什么要学多线程" class="headerlink" title="为什么要学多线程"></a>为什么要学多线程</h3><p>学多线程是为了能够制作出高效率的程序，但是大部分初学者没有多线程的应用目的，容易找不到方向。<br>建议跟着习题来学。</p><h4 id="Java-多线程习题一"><a href="#Java-多线程习题一" class="headerlink" title="Java 多线程习题一"></a>Java 多线程习题一</h4><p><img src="/img/Java%E5%85%A5%E9%97%A8/2024-08-30-23-11-44.png"><br>经过一波分析，得到如此的流程图<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-08-30-23-27-25.png"></p><ul><li>线程 1<br>洗水壶 1 分钟，烧开水 15 分钟：花费 16 分钟的逻辑处理器时间<br>这两步是不能拆分的有依赖关系的同步事件，所以是在一个线程里做的</li><li>线程 2<br>洗茶壶，洗茶杯，拿茶叶：花费 4 分钟的逻辑处理器时间<br>因为这里的线程 2 和和线程 1 做的事情之间是非同步的关系，所以我们新建线程 2，作为异步函数</li><li>习题小结<br>当有 2 个逻辑处理器时，线程 1 和线程 2 将会是并行的。<br>也就是说，这样最后触发泡茶事件只需要花费 16 分钟的时间，</li></ul><h3 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h3><p>因为 Java 字节码运行在 JVM 中，JVM 运行在各个操作系统上；所以当 JVM 想要操作线程时必须要调用操作系统的相关接口，也就是 JVM 线程与操作系统线程两者之间存在着某种映射关系，这两种线程的映射关系就是线程模型。<br><strong>内核线程 以 Linux 为例</strong><br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-02-05-20-50-40.png"><br>线程属于进程这个说法不太准确，以 Linux 内核为例，因为 Linux 线程被称为轻量级进程，线程是抽象概念，因为 Linux 没有专门为线程定义数据结构和调度算法，所以 Linux 去实现线程的方式是轻量级进程，本质还是进程。</p><p>那轻量级进程与进程的区别在哪呢？一个 Linux 进程拥有自己独立的地址空间，而一个轻量级进程没有自己独立的地址空间，只能共享同一个轻量级进程组下的地址空间；<br>进程和轻量级进程都是使用了 clone 系统调用，区别仅仅在于向 clone 函数传递的参数不同，不同的参数指定是否共享地址空间等资源。</p><h4 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h4><p>用户线程（User Thread，UT）<br>Linux 操作系统线程接口，轻量级进程（Light Weight Process，LWP）<br>操作系统内核提供的内核线程（Kernel-Level Thread ，KLT）</p><h4 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h4><p><img src="/img/Java%E5%85%A5%E9%97%A8/2024-02-05-21-03-25.png"><br>目前大部分主流的 JVM 上都是采用了这种线程模型。<br>缺点主要有两个：<br>① 用户线程的阻塞和唤醒会直接映射到内核线程，容易引起内核态和用户态的切换，降低性能。<br>但是一些语言引入了 CAS 来避免一部分情况下的状态切换，比如 Java 就引用了 AQS 这种函数级别的锁，减少使用内核级别的锁，就能够有效提升性能。<br>②Linux 内核能够创建的线程数是有限的</p><h4 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h4><p><img src="/img/Java%E5%85%A5%E9%97%A8/2024-02-05-21-04-08.png"><br>多个用户线程映射到了一个内核线程上，用户线程的调度完全由用户空间来完成，这个模式看上去挺好的，能够有效提升并发量上限，而且大部分调度和同步的操作都是在用户空间内完成，就能够有效提升性能。<br>但是它有一个比较致命的缺点：就是当一个用户线程进行了内核调用并且阻塞了的话，那么其他线程在在这段时间内都无法进行内核调用了，Java 的早期版本就是使用了这种线程模型，不过后来是被抛弃了。</p><h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><p><img src="/img/Java%E5%85%A5%E9%97%A8/2024-02-05-21-05-02.png"><br>目前 Go 语言采用的 GMP 线程模型就是基于多对多的方式来实现的，这也是为什么能够利用 goroutine 来实现更高并发的原因，值得一提的是 Java 的 loom 项目也在进行这方面的探索，看得出来这是未来的一种趋势。</p><h3 id="新开一个线程"><a href="#新开一个线程" class="headerlink" title="新开一个线程"></a>新开一个线程</h3><p>实际上，Java 程序在运行的时候，都会有一个主线程，但如果你想新开一个线程，那么你可以使用如下的方法<br>方法一：由于 Runnable 是一个函数式接口，可以用 lambda 表达式建立一个实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> ()-&gt;&#123;</span><br><span class="line">    <span class="comment">//todo taskcode</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(r).start();</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> runTask&#123;</span><br><span class="line">        <span class="comment">//todo taskcode</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">MyThread</span>().start();</span><br></pre></td></tr></table></figure><p>然后，构造一个子类的对象，并调用 start 方法。不过，这种方法已不再推荐。如果有很多任务，要为每个任务创建一个独立的线程所付出的代价太大了。可以使用线程池来解决这个问题。</p><h3 id="线程间的通信方式"><a href="#线程间的通信方式" class="headerlink" title="线程间的通信方式"></a>线程间的通信方式</h3><p>这些指令按照作用域分别分为两类</p><ul><li>主存</li><li>工作内存</li></ul><p><img src="/img/Java%E5%85%A5%E9%97%A8/2024-01-21-22-41-50.png" alt="线程间的通信方式——内存读写指令"></p><h3 id="线程通信是有问题的"><a href="#线程通信是有问题的" class="headerlink" title="线程通信是有问题的"></a>线程通信是有问题的</h3><h4 id="Happens-Before-原则"><a href="#Happens-Before-原则" class="headerlink" title="Happens-Before 原则"></a>Happens-Before 原则</h4><p>主要讲重要的三个，对后续的可见性、有序性、原子性问题理解有帮助。</p><ul><li>程序顺序规则<br>在每一个线程的内部，按照程序代码的书写顺序，书写在前面的代码操作 happens-before(先执行于)书写在后面的代码操作，即使编译后代码指令可能会进行重排，但是 Java 内存模型仍然会保证程序执行结果的正确性。</li><li>锁定规则<br>对一个锁的解锁，总是 happens-before 于随后对这个锁的加锁<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-01-26-22-27-10.png"><br>因为有 sync 块修饰，所以 threadA.setValue()后会释放锁，<br>threadB.getValue()之前会先获取锁，然后再读到最新的值</li><li>volatile 变量规则<br>对一个 volatile 变量的写，总是 happens-before 于后续对这个 volatile 变量的读<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-01-26-22-36-03.png"><br>线程启动规则<br>线程结束规则<br>中断规则<br>终结器规则<br>传递性规则</li></ul><h4 id="可见性-问题"><a href="#可见性-问题" class="headerlink" title="可见性 问题"></a>可见性 问题</h4><ul><li><p>应用场景 001<br>主存发霉<br>线程 A 修改了数据 D，线程 B 需要读到最新修改的数据 D<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-01-21-23-48-59.png"></p></li><li><p>期望结果<br>线程 1 启动，进入死循环<br>一秒钟后线程 2 启动，将 a 修改为 2<br>线程 1 读到最新修改的 a，a!&#x3D;2，线程 1 跳出死循环</p></li><li><p>实际结果<br>没有及时刷新主存<br>线程 2 修改的变量 a 没有被线程 1 读到<br>线程 1 在一秒钟后仍然处于死循环</p></li><li><p>解决方案<br>方法 ①<code>volataile</code>，读&#x2F;写 volataile 变量时，主动读&#x2F;写主存<br>方法 ②<code>synchronized</code>，sync 块内读写变量，隐式调用 lock&#x2F;unlock，主动读&#x2F;写主存</p></li><li><p>应用场景 002<br>早读脏数据<br>线程 B 需要读到修改后的变量 D，并且应该在线程 A 中修改变量 D<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-01-22-23-54-56.png"></p></li><li><p>期望结果<br>线程 1 启动，a&#x3D;1，flag&#x3D;true<br>线程 2 启动，i&#x3D;a&#x3D;1</p></li><li><p>实际结果<br>基于 Java 的内存模型，在 Java 程序的每个线程中，指令可能被重排序。<br>线程 1 的代码 1 和代码 2 互换位置指令重排后和顺序执行的结果是一样的<br>线程 1 -&gt; 代码 1 -&gt; 代码 2 || 线程 1 -&gt; 代码 2 -&gt; 代码 1<br>线程 2 的代码 3 和代码 4 互换位置指令重排后和顺序执行的结果是一样的<br>线程 2 -&gt; 代码 3 -&gt; 代码 4 || 线程 2 -&gt; 代码 4 -&gt; 代码 3</p></li><li><p>解决方案<br>方法 ①<code>volataile</code>，使当前行禁止参与之前语句的指令重排<br>方法 ②<code>synchronized</code>，sync 块重排，但 sync 块内的代码不再被重排，将块内的这组指令原子化。</p></li></ul><h4 id="原子性-问题"><a href="#原子性-问题" class="headerlink" title="原子性 问题"></a>原子性 问题</h4><p>一个操作是不可中断的，要么全部执行成功，要么全部执行失败</p><ul><li>单指令原子操作<br>比如在 Java 内存模型中工作内存和主存之间进行读写有 8 个指令，这 8 个指令都是不可再分的，每个指令都是原子操作<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-01-26-22-55-36.png"></li><li>利用锁的组合指令原子操作<br>lock&#x2F;unlock 的组合指令<br>再或者直接使用 synchronized 关键字</li></ul><h4 id="有序性-问题"><a href="#有序性-问题" class="headerlink" title="有序性 问题"></a>有序性 问题</h4><p>在多线程下，可能因为指令重排导致的乱序，进而引起可见性问题</p><h3 id="Java-锁机制"><a href="#Java-锁机制" class="headerlink" title="Java 锁机制"></a>Java 锁机制</h3><p>在并发环境下，多个线程会对同一个资源进行争抢，那么可能会导致数据不一致的问题，为了解决这个问题，很多编程语言都引入了锁机制，通过一种抽象的锁来对资源进行锁定。</p><h4 id="对象-gt-对象头-gt-锁"><a href="#对象-gt-对象头-gt-锁" class="headerlink" title="对象 -&gt; 对象头 -&gt; 锁"></a>对象 -&gt; 对象头 -&gt; 锁</h4><p>在 Java 中，每个 Object，也就是每个对象都拥有一把锁，这把锁存放在对象头中，锁中记录了当前对象被哪个线程所占用<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-02-06-03-13-37.png"></p><h4 id="对象-amp-对象头"><a href="#对象-amp-对象头" class="headerlink" title="对象 &amp; 对象头"></a>对象 &amp; 对象头</h4><p>Java 对象包含了三个部分：对象头、实例数据、对齐填充字节<br>对齐填充字节是为了 Java 对象的大小必须是 8 比特的倍数而设计的填充的对齐无用字节，<br>实例数据就是在初始化对象时设定的属性和行为，<br>对象头存放了一些对象本身的运行时信息，对象头包含了两部分”Mark Word”和”Class Point”，<br>“Class Point”是一个指针，它指向了当前对象类型所在方法区中的类型数据，<br>“Mark Word”存储了很多和当前对象运行时状态有关的数据，比如说 hashCode，锁状态标志，指向锁记录的指针，偏向锁 ID 等等。<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-02-06-03-17-56.png"></p><h4 id="Mark-Word"><a href="#Mark-Word" class="headerlink" title="Mark Word"></a>Mark Word</h4><p><img src="/img/Java%E5%85%A5%E9%97%A8/2024-04-04-15-23-51.png"></p><h4 id="synchronized-互斥锁"><a href="#synchronized-互斥锁" class="headerlink" title="synchronized 互斥锁"></a>synchronized 互斥锁</h4><p><img src="/img/Java%E5%85%A5%E9%97%A8/2024-02-06-03-38-31.png"><br>synchronized 在使用 javac 编译之后是 monitorexit 和 monitorenter 两个字节码指令，而 monitor 是依赖操作系统的 mutex lock 来实现的</p><h4 id="monitor"><a href="#monitor" class="headerlink" title="monitor"></a>monitor</h4><p>entrySet &#x3D; Waiting Thread<br>The Owner &#x3D; An Active Thread<br>WaitSet &#x3D; Waiting Thread<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-04-04-15-43-26.png"><br>entrySet 聚集了一些想要进入 monitor 的线程，如果某个线程成功进入了 monitor，那么就会变成 Active 状态；<br>假设此时这个 Active 线程执行时经过判断后需要让出执行权限，那么就会进入 waitSet，就会变成 Waiting 状态；<br>此时 entrySet 中的线程就有机会进入 monitor；假设有新的线程从 entrySet 成功进入 monitor 并完成任务，那么可以通过 notify 来唤醒 waitSet 中的线程，让线程再次进入 monitor<br><strong>挂起和唤醒线程的时候，实际上会经过 JVM 线程模型的转换</strong><br>Java runtime &lt;-&gt; OS<br>可以近似看成一对一关系中的 UT &lt;-&gt; KLT<br>UT 切换到 KLT 是有开销的，在一些情况下甚至切换时间本身将会超出线程执行任务的时间，那这个新的线程就得不偿失了。</p><h4 id="四种锁状态的由来"><a href="#四种锁状态的由来" class="headerlink" title="四种锁状态的由来"></a>四种锁状态的由来</h4><p>在 Java6 开始，对 synchronized 互斥锁进行了优化，引入了偏向锁、轻量级锁，形成了四种锁状态的局面。<br>这些锁只能升级，不能降级<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-04-04-15-48-28.png"></p><ul><li>无锁<br>无锁就是没有对资源进行锁定，所有线程都能够访问到同一资源</li><li><ul><li>无锁.无竞争<br>网页爬虫短时间内请求多个不同 URL，返回多个不同的响应结果，这些响应对象都不是同一个，所以是无竞争的。</li></ul></li><li><ul><li>无锁.有竞争，非锁方式同步线程<br>资源会被竞争，但是使用了非锁方式同步线程，同时只能有一个线程修改成功，其他修改失败的线程将会不断尝试直到修改成功，这就是耳熟能详的 CAS(Compare and Swap)，CAS 在操作系统中通过一条指令来实现，所以它就能保证原子性。大部分情况下，诸如 CAS 的非锁同步效率是很高的<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-04-04-16-09-18.png"></li></ul></li><li>偏向锁<br>不通过线程状态切换，也不需要 CAS 来获得锁，因为这样多多少少还是会耗费一些资源。偏向锁的理念是，最好对象能认识这个线程，只要是这个线程过来，那么对象就直接把锁交出去。</li><li><ul><li>偏向锁同步资源<br>后 3bit，1bit 拼接 2bit&#x3D;101，说明这个对象的锁是偏向锁<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-04-04-16-48-57.png"><br>如果是偏向锁，前 23bit 存储了偏爱的线程 id<br>如果这个线程 id &#x3D; 23bit 中存储的线程 id，那么这个线程就获得了锁，可以直接调用对象资源</li></ul></li><li>轻量级锁<br>如果偏向锁中发生了变化，对象发现目前不止有一个线程，而是有多个线程正在竞争锁，那么偏向锁就会升级为轻量级锁</li><li><ul><li>轻量级锁同步资源<br>后 2bit&#x3D;00，说明这个对象的锁是轻量级锁<br>如果是轻量级锁，前 30bit 变为存储线程栈中 Lock Record 的指针<br>当一个线程想要获得轻量级锁时，这时线程会在自己的虚拟机栈中开辟一块被称为 Lock Record 的空间；<br>Lock Record 中存放的是对象头中 Mark Word 的副本以及 owner 指针；<br>线程通过 CAS 去尝试获取锁，一旦获得那么将会复制该对象头中的 Mark Word 到 Lock Record 中，并且将 Lock Record 中的 owner 指针指向该对象，另一方面，对象 mark word 中的前 30bit 将会生成一个指针，指向线程虚拟机栈中的 Lock Record，这样就实现了双向的绑定，互相知道了对方的存在，获得了轻量级锁的线程就可以去执行任务。<br>如果此时其他存在竞争关系的线程没有获得轻量级锁就会自旋等待，自旋区别于操作系统挂起阻塞，如果对象的锁很快得到释放的话，自旋就不需要进行系统中断和现场恢复，所以自旋的效率比操作系统挂起阻塞高，但是因为自旋相当于 CPU 在空转，如果长时间自旋将会浪费 CPU 资源</li></ul></li><li>重量级锁<br>当轻量级锁中自旋等待的线程数超过 1 个，那么轻量级锁将会升级为重量级锁<br>如果对象锁状态被标记为重量级锁，那么就需要通过 monitor 来对线程进行控制<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-04-04-15-43-26.png"></li></ul><h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><p>互斥锁的同步方式是悲观的，如果不严格同步线程调用，那么一定会产生异常，互斥锁会对资源锁定，只供一个线程调用，而阻塞其他线程<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-04-04-18-09-21.png"><br><code>但是有些情况不适合用悲观锁：</code></p><ul><li>大部分调用都是读操作</li><li>同步代码块的耗时远远小于线程切换的耗时</li></ul><h4 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h4><p>如果不适合用悲观锁那用什么呢？<br><code>不锁定资源，也能同步线程————CAS(Compare and Swap)</code><br><code>CAS就是先比较再交换</code><br>compare 比较 old value<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-04-04-17-54-07.png"><br>swap 交换 new value<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-04-04-17-56-06.png"><br>compare 比较 old value 不一致，放弃 swap 或自旋重试 CAS 操作<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-04-04-17-59-55.png"></p><p>CAS &#x3D; compare + swap<br>多线程下还是可能会有一致性的问题，<br>thread_A，比较成功，swap<br>thread_B，比较成功，swap<br>但是可能 thread_B 时间片比较块，先 swap 了<br>怎么 CAS 还有问题，难道我们还要给 CAS 加锁来实现原子操作吗？</p><h5 id="CAS-原子操作"><a href="#CAS-原子操作" class="headerlink" title="CAS 原子操作"></a>CAS 原子操作</h5><p>Java 也支持了 CAS 原子操作，但我们归根到底还是要感谢各种不同架构的 CPU 都提供了指令级别的 CAS 原子操作</p><ul><li>x86 compxchg</li><li>arm LL&#x2F;SC</li></ul><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><p>有了 CPU 指令级对 CAS 原子操作的支持，那我们就有了乐观锁<br><img src="/img/Java%E5%85%A5%E9%97%A8/2024-04-04-18-10-44.png"></p><h4 id="线程非同步，线程同步-悲观锁-乐观锁"><a href="#线程非同步，线程同步-悲观锁-乐观锁" class="headerlink" title="线程非同步，线程同步(悲观锁 || 乐观锁)"></a>线程非同步，线程同步(悲观锁 || 乐观锁)</h4><p>使用 3 条线程，将一个值，从 0 累加到 1000</p><ul><li>线程非同步</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(num &lt; <span class="number">1000</span>)&#123;</span><br><span class="line">                logger.info(<span class="string">&quot;threadName:&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + num++)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    t.start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> threadName:Thread-1:0</span></span><br><span class="line"><span class="comment"> threadName:Thread-2:0</span></span><br><span class="line"><span class="comment"> threadName:Thread-0:0</span></span><br><span class="line"><span class="comment"> 多条线程打印了相同的值，说明线程非同步</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ul><li>线程同步——悲观锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(YourClassName.class)&#123;</span><br><span class="line">                <span class="keyword">while</span>(num &lt; <span class="number">1000</span>)&#123;</span><br><span class="line">                    logger.info(<span class="string">&quot;threadName:&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + num++)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    t.start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> threadName:Thread-1:998</span></span><br><span class="line"><span class="comment"> threadName:Thread-2:999</span></span><br><span class="line"><span class="comment"> threadName:Thread-0:1000</span></span><br><span class="line"><span class="comment"> 多条线程没有打印出相同的num，说明线程同步正常</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ul><li>线程同步——乐观锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AtomicInteger</span> <span class="variable">num</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(num.get() &lt; <span class="number">1000</span>)&#123;</span><br><span class="line">                logger.info(<span class="string">&quot;threadName:&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + num++)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    t.start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> threadName:Thread-1:998</span></span><br><span class="line"><span class="comment"> threadName:Thread-2:999</span></span><br><span class="line"><span class="comment"> threadName:Thread-0:1000</span></span><br><span class="line"><span class="comment"> 多条线程没有打印出相同的num，说明cas原子操作线程同步正常</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 事实上最终会call到一个native函数</span></span><br><span class="line"><span class="comment"> public final native boolean compareAndSwapInt()</span></span><br><span class="line"><span class="comment"> 这些native函数在不同的操作系统平台有不同的底层实现</span></span><br><span class="line"><span class="comment"> 相关的openJdk源码</span></span><br><span class="line"><span class="comment"> hotspot/src/share/vm/prims/unsafe.cpp</span></span><br><span class="line"><span class="comment"> hotspot/src/share/vm/runtime/Automic.cpp</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="CAS-原子操作欲求不满"><a href="#CAS-原子操作欲求不满" class="headerlink" title="CAS 原子操作欲求不满"></a>CAS 原子操作欲求不满</h4><p>ABA 问题；线程自旋存在 CPU 空转性能开销；循环 CAS 只能支持单个共享变量的原子操作<br><code>大师们早就有了解决方案</code><br>A.1 B.1 A.2；线程可以放弃自旋或自适应自旋；把多个变量放在一个对象里来进行 CAS 操作。<br><code>此后更多的并发工具类在Java中如雨后春笋般相继出世，这些工具专门为更复杂的场景所设计</code></p><h3 id="并发编程存在的挑战"><a href="#并发编程存在的挑战" class="headerlink" title="并发编程存在的挑战"></a>并发编程存在的挑战</h3><ul><li>线程创建和上下文切换的开销<br>即使是单核处理器也支持多线程执行代码，CPU 通过给每个线程分配 CPU 时间片来实现这个机制。时间片是 CPU 分配给各个线程的时间，因为时间片非常短，所以 CPU 通过不停地切换线程执行，让我们感觉多个线程是同时执行的，时间片一般是几十毫秒（ms）。<br>CPU 通过时间片分配算法来循环执行任务，当前任务执行一个时间片后会切换到下一个任务。但是，在切换前会保存上一个任务的状态，以便下次切换回这个任务时，可以再加载这个任务的状态。所以任务从保存到再加载的过程就是一次上下文切换。</li><li>死锁<br>在一些更为复杂的场景中，你可能会遇到这样的问题，比如 t1 拿到锁之后，因为一些异常情况没有释放锁（死循环）。又或者是 t1 拿到一个数据库锁，释放锁的时候抛出了异常，没释放掉。</li><li>资源限制——带宽上传&#x2F;下载速度<br>服务器带宽只有 2Mb&#x2F;s，某个资源的下载速度是 1Mb&#x2F;s 每秒，系统启动 10 个线程下载资源，下载速度不会变成 10Mb&#x2F;s</li><li>资源限制——硬盘读写速度</li><li>资源限制——CPU<br>并发编程，就是想办法把串行执行的代码变成并发执行。<br>但是如果逻辑上实现了并发，却因为受到资源限制，实际上仍然在串行执行，这时候程序反而会更慢，因为逻辑上是并发的，又增加了上下文切换和资源调度的时间。</li><li>软件资源限制——数据库连接数&#x2F;socket 连接数</li></ul><h3 id="挑战并发编程"><a href="#挑战并发编程" class="headerlink" title="挑战并发编程"></a>挑战并发编程</h3><ul><li>硬件资源限制<br>CPU 占用率达到 100%？——&gt; 试试单线程<br>多个性能指标接近 100%？——&gt;试试集群<br>使用集群并行执行程序，让程序在多机上运行。比如使用 ODPS、Hadoop 或者自己搭建服务器集群，不同的机器处理不同的数据。</li><li>软件资源限制<br>使用连接池；通信时只建立一个连接数（节约网络连接数）；合理使用内存&#x2F;硬盘友好的数据类型</li></ul><h3 id="我接受并发编程的挑战"><a href="#我接受并发编程的挑战" class="headerlink" title="我接受并发编程的挑战"></a>我接受并发编程的挑战</h3><h3 id="虚拟线程"><a href="#虚拟线程" class="headerlink" title="虚拟线程"></a>虚拟线程</h3><p>虚拟线程，也被称为轻量级线程或纤程，是 JDK 21 中新增的一种线程实现方式。</p><h4 id="为什么新增虚拟线程？解决了什么问题"><a href="#为什么新增虚拟线程？解决了什么问题" class="headerlink" title="为什么新增虚拟线程？解决了什么问题"></a>为什么新增虚拟线程？解决了什么问题</h4><ul><li>线程创建代价昂贵、线程切换成本高</li><li>线程数量上不去<br>传统的 JVM 线程模型仅仅是对操作系统线程的封装，操作系统线程的数量是有限的，这就限制了 Java 同时运行的线程数量，从而限制了应用程序的并发能力。</li></ul><h4 id="虚拟线程的未来"><a href="#虚拟线程的未来" class="headerlink" title="虚拟线程的未来"></a>虚拟线程的未来</h4><p><code>虚拟线程是一种轻量级的线程，它适用于 I/O 密集型的任务</code>。对于 CPU 密集型任务（如大量计算），平台线程可能是更好的选择，因为虚拟线程在这种情况下可能不会带来性能上面的优势。</p><ul><li><p>不替代传统线程：<br>虚拟线程并不旨在完全替代传统的操作系统线程，而是作为一个补充。对于需要密集计算和精细控制线程行为的场景，传统线程仍然是主流。</p></li><li><p>非针对最低延迟：<br>虚拟线程主要针对高并发和高吞吐量，而不是最低延迟。对于需要极低延迟的应用，传统线程可能是更好的选择。</p></li><li><p>不改变基本的线程模型：<br>虚拟线程改进了线程的实现方式，但并未改变 Java 基本的线程模型和同步机制。锁和同步仍然是并发控制的重要工具。</p></li><li><p>虽然虚拟线程在资源的消耗上面比平台线程少，但是我们仍然需要合理管理，不要以为资源少就可以随便创建虚拟线程。创建过多的虚拟线程可能会导致内存消耗的增加，尤其是当每个线程都需要维护自己的栈空间时。</p></li><li><p>虚拟线程可能会使得调试和性能监控更加复杂。确保有适当的工具和策略来监控虚拟线程的行为和性能。</p></li></ul><h2 id="GrallVM"><a href="#GrallVM" class="headerlink" title="GrallVM"></a>GrallVM</h2><p>Java 可以编译出原生的二进制可执行文件了<br><img src="/img/Java%E5%85%A5%E9%97%A8/2023-11-22-23-25-28.png"></p><ul><li><p>debian<br>从 github 安装 graal 社区的 openjdk，并像 jdk 那样配置环境变量 path 和 classpath<br><a href="https://github.com/graalvm/graalvm-ce-builds/releases">https://github.com/graalvm/graalvm-ce-builds/releases</a><br><code>apt install gcc</code><br><code>apt install zlib1g-dev</code><br><code>javac HelloWorld.java</code><br><code>native-image HelloWorld</code><br><img src="/img/Java%E5%85%A5%E9%97%A8/2023-11-22-23-27-57.png"><br>更多帮助请查看<br><a href="https://www.graalvm.org/latest/docs/getting-started/">https://www.graalvm.org/latest/docs/getting-started/</a></p></li><li><p>Windows10<br>安装 Microsoft Visual Studio，勾选 C++桌面开发环境，MSVC，Windows10 SDK<br>尝试 native-image HelloWorld<br>找不到 stdio.h，用 everything 搜了一下锁死 stdio.h 的位置 Windows Kits\10……这不就是 Windows10 SDK 安装路径吗<br>大概是环境变量没配吧</p></li><li><ul><li>PATH<br>D:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.35.32215\bin\Hostx64\x64</li></ul></li><li><ul><li>INCLUDE</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">D:\Windows Kits\10\Include\10.0.22000.0\ucrt;</span><br><span class="line">D:\Windows Kits\10\Include\10.0.22000.0\um;</span><br><span class="line">D:\Windows Kits\10\Include\10.0.22000.0\shared;</span><br><span class="line">D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include;</span><br><span class="line"># 记得参考下面的格式不要换行</span><br><span class="line">D:\Windows Kits\10\Include\10.0.22000.0\ucrt;D:\Windows Kits\10\Include\10.0.22000.0\um;D:\Windows Kits\10\Include\10.0.22000.0\shared;D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include;</span><br></pre></td></tr></table></figure><ul><li><ul><li>LIB</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D:\Windows Kits\10\Lib\10.0.22000.0\um\x64;</span><br><span class="line">D:\Windows Kits\10\Lib\10.0.22000.0\ucrt\x64;</span><br><span class="line">D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\lib\x64;</span><br><span class="line"># 记得参考下面的格式不要换行</span><br><span class="line">D:\Windows Kits\10\Lib\10.0.22000.0\um\x64;D:\Windows Kits\10\Lib\10.0.22000.0\ucrt\x64;D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\lib\x64;</span><br></pre></td></tr></table></figure><h2 id="AOT-云原生就这？"><a href="#AOT-云原生就这？" class="headerlink" title="AOT 云原生就这？"></a>AOT 云原生就这？</h2><p>将 SpringBoot 的 maven 或 gradle 编译成二进制可执行文件，感觉操作还是比较繁琐，不如 goLang<br>下面记录一下 maven 在 idea 的操作<br>在 SpringBoot 的 pom.xml 中添加插件<code>org.graalvm.buildtools</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.graalvm.buildtools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>native-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>clean 清掉 target 目录，compile 编译一遍，貌似可以加快后面编译的速度<br>然后如果是打包 SpringBoot 到二进制可执行文件的话建议按下图指示把 1、2、3 都执行一边<br><code>mvn springboot:process-aot</code>对应图中的 1<br><code>mvn -Pnative native:build</code>对应图中的 2+3<br><code>mvn native:build</code>对应图中的 3<br><img src="/img/Java%E5%85%A5%E9%97%A8/2023-11-28-21-40-27.png"><br>本节参考资料</p><p><a href="https://www.graalvm.org/latest/docs/getting-started/">book.graalvm 官网</a><br><a href="https://www.bilibili.com/video/BV1ce4y1t7x1">video.bilibili.周瑜教你学 JAVA</a><br><a href="https://www.bilibili.com/video/BV1Es4y1q7Bf">video.bilibili.尚硅谷</a></p><h2 id="JShell"><a href="#JShell" class="headerlink" title="JShell"></a>JShell</h2><p>交互式编程，JDK9 新特性<br><code>目前只用来查看表达式的值，tab自动补全</code><br>主要原因是我现在对这玩意导包机制不太熟悉，不晓得能否在控制台终端上写出面向对象，多态之类的操作呢<br><img src="/img/Java%E5%85%A5%E9%97%A8/2023-07-02-14-30-25.png"><br><code>jshell</code>进入交互式编程，然后<code>/help</code>获取文档大纲</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">|  Type a Java language expression, statement, or declaration.</span><br><span class="line">|  Or type one of the following commands:</span><br><span class="line">|  键入Java语言表达式、语句或声明。或者输入以下命令之一:</span><br><span class="line"></span><br><span class="line">|  /list [&lt;name or id&gt;|-all|-start]</span><br><span class="line">|       list the source you have typed</span><br><span class="line">|  /edit &lt;name or id&gt;</span><br><span class="line">|       edit a source entry</span><br><span class="line">|  /drop &lt;name or id&gt;</span><br><span class="line">|       delete a source entry</span><br><span class="line">|  /save [-all|-history|-start] &lt;file&gt;</span><br><span class="line">|       Save snippet source to a file</span><br><span class="line">|  /open &lt;file&gt;</span><br><span class="line">|       open a file as source input</span><br><span class="line">|  /vars [&lt;name or id&gt;|-all|-start]</span><br><span class="line">|       list the declared variables and their values</span><br><span class="line">|  /methods [&lt;name or id&gt;|-all|-start]</span><br><span class="line">|       list the declared methods and their signatures</span><br><span class="line">|  /types [&lt;name or id&gt;|-all|-start]</span><br><span class="line">|       list the type declarations</span><br><span class="line">|  /imports</span><br><span class="line">|       list the imported items</span><br><span class="line">|  /exit [&lt;integer-expression-snippet&gt;]</span><br><span class="line">|       exit the jshell tool</span><br><span class="line">|  /env [-class-path &lt;path&gt;] [-module-path &lt;path&gt;] [-add-modules &lt;modules&gt;] ...</span><br><span class="line">|       view or change the evaluation context</span><br><span class="line">|  /reset [-class-path &lt;path&gt;] [-module-path &lt;path&gt;] [-add-modules &lt;modules&gt;]...</span><br><span class="line">|       reset the jshell tool</span><br><span class="line">|  /reload [-restore] [-quiet] [-class-path &lt;path&gt;] [-module-path &lt;path&gt;]...</span><br><span class="line">|       reset and replay relevant history -- current or previous (-restore)</span><br><span class="line">|  /history [-all]</span><br><span class="line">|       history of what you have typed</span><br><span class="line">|  /help [&lt;command&gt;|&lt;subject&gt;]</span><br><span class="line">|       get information about using the jshell tool</span><br><span class="line">|  /set editor|start|feedback|mode|prompt|truncation|format ...</span><br><span class="line">|       set configuration information</span><br><span class="line">|  /? [&lt;command&gt;|&lt;subject&gt;]</span><br><span class="line">|       get information about using the jshell tool</span><br><span class="line">|  /!</span><br><span class="line">|       rerun last snippet -- see /help rerun</span><br><span class="line">|  /&lt;id&gt;</span><br><span class="line">|       rerun snippets by ID or ID range -- see /help rerun</span><br><span class="line">|  /-&lt;n&gt;</span><br><span class="line">|       rerun n-th previous snippet -- see /help rerun</span><br><span class="line">|</span><br><span class="line">|  For more information type &#x27;/help&#x27; followed by the name of a</span><br><span class="line">|  command or a subject.</span><br><span class="line">|  For example &#x27;/help /list&#x27; or &#x27;/help intro&#x27;.</span><br><span class="line">|</span><br><span class="line">|  Subjects:</span><br><span class="line">|</span><br><span class="line">|  intro</span><br><span class="line">|       an introduction to the jshell tool</span><br><span class="line">|  keys</span><br><span class="line">|       a description of readline-like input editing</span><br><span class="line">|  id</span><br><span class="line">|       a description of snippet IDs and how use them</span><br><span class="line">|  shortcuts</span><br><span class="line">|       a description of keystrokes for snippet and command completion,</span><br><span class="line">|       information access, and automatic code generation</span><br><span class="line">|  context</span><br><span class="line">|       a description of the evaluation context options for /env /reload and /reset</span><br><span class="line">|  rerun</span><br><span class="line">|       a description of ways to re-evaluate previously entered snippets</span><br></pre></td></tr></table></figure><h3 id="瞎子过河，小试牛刀-x2F-list"><a href="#瞎子过河，小试牛刀-x2F-list" class="headerlink" title="瞎子过河，小试牛刀 &#x2F;list"></a>瞎子过河，小试牛刀 &#x2F;list</h3><p>尝试定义属性，行为，类，然后&#x2F;list</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">jshell&gt; String str = &quot;H&quot;;</span><br><span class="line">str ==&gt; &quot;H&quot;</span><br><span class="line"></span><br><span class="line">jshell&gt; String stLast = &quot;enry&quot;;</span><br><span class="line">stLast ==&gt; &quot;enry&quot;</span><br><span class="line"></span><br><span class="line">jshell&gt; /list</span><br><span class="line"></span><br><span class="line">   1 : String str = &quot;H&quot;;</span><br><span class="line">   2 : String stLast = &quot;enry&quot;;</span><br><span class="line"></span><br><span class="line">jshell&gt; public static void main(String [] args)&#123;System.out.println(&quot;666&quot;);&#125;</span><br><span class="line">|  created method main(String [])</span><br><span class="line"></span><br><span class="line">jshell&gt; /list</span><br><span class="line"></span><br><span class="line">   1 : String str = &quot;H&quot;;</span><br><span class="line">   2 : String stLast = &quot;enry&quot;;</span><br><span class="line">   3 : public static void main(String [] args)&#123;System.out.println(&quot;666&quot;);&#125;</span><br><span class="line"></span><br><span class="line">jshell&gt; public class Henry&#123;&#125;</span><br><span class="line">|  created class Henry</span><br><span class="line"></span><br><span class="line">jshell&gt; /list</span><br><span class="line"></span><br><span class="line">   1 : String str = &quot;H&quot;;</span><br><span class="line">   2 : String stLast = &quot;enry&quot;;</span><br><span class="line">   3 : public static void main(String [] args)&#123;System.out.println(&quot;666&quot;);&#125;</span><br><span class="line">   4 : public class Henry&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="x2F-list"><a href="#x2F-list" class="headerlink" title="&#x2F;list"></a>&#x2F;list</h4><p>瞎子过河效率太慢，还是看看官方详细帮助文档<br><code>/help list</code></p><blockquote><p>| &#x2F;list<br>| &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>|<br>| Show the snippets, prefaced with their snippet IDs.<br>| 显示代码片段，并以其代码片段 id 开头。<br>|<br>| &#x2F;list<br>| List the currently active snippets of code that you typed or read with &#x2F;open<br>| 列出您使用 &#x2F;open 键入或读取的当前活动的代码片段<br>|<br>| &#x2F;list -start<br>| List the evaluated startup snippets<br>| 列出评估的启动代码段<br>|<br>| &#x2F;list -all<br>| List all snippets including failed, overwritten, dropped, and startup<br>| 列出所有代码段，包括失败、覆盖、丢弃和启动<br>|<br>| &#x2F;list name<br>| List snippets with the specified name (preference for active snippets)<br>| 列出具有指定名称的代码段(优先选择活动代码段)<br>|<br>| &#x2F;list id<br>| List the snippet with the specified snippet ID.<br>| One or more IDs or ID ranges may used, see ‘&#x2F;help id’<br>| 列出具有指定代码段 ID 的代码段。可以使用一个或多个 ID 或 ID 范围，参考’&#x2F;help id’</p></blockquote><h5 id="x2F-list-id"><a href="#x2F-list-id" class="headerlink" title="&#x2F;list id"></a>&#x2F;list id</h5><p><code>/list id</code>非常灵活，下面我省略了代码片段的输出<br>代码片段 ID <del>: 代码片段</del><br><code>/list 1 3 4</code><br>1<br>3<br>4<br><code>/list 2-3</code><br>2<br>3<br>还可以自己排列组合<br><code>/list 3 1-4</code><br>3<br>1<br>2<br>3<br>4</p><h5 id="x2F-list-name"><a href="#x2F-list-name" class="headerlink" title="&#x2F;list name"></a>&#x2F;list name</h5><p>假设我有如下片段</p><blockquote><p>jshell&gt; &#x2F;list<br>1 : String str &#x3D; “H”;<br>2 : String stLast &#x3D; “enry”;<br>3 : public static void <code>main</code>(String [] args){System.out.println(“666”);}<br>4 : public class Henry{}<br>5 : String <code>main</code> &#x3D; “mainStr”;<br>6 : class <code>main</code>{}</p></blockquote><p>我想通过 name 来选择代码片段，那么可以<code>/list name</code></p><blockquote><p>jshell&gt; &#x2F;list main<br>3 : public static void <code>main</code>(String [] args){System.out.println(“666”);}<br>5 : String <code>main</code> &#x3D; “mainStr”;<br>7 : class <code>main</code>{}</p></blockquote><p>name 可以匹配的是类，属性，方法的名称。<br>这里只为缩减例子的长度，实际编程时记得 main 类名首字母要大写 Main。</p><h5 id="x2F-list-all"><a href="#x2F-list-all" class="headerlink" title="&#x2F;list -all"></a>&#x2F;list -all</h5><p><code>/list -all</code><br>本来以为只是简单的列出全部状态的代码段，没想到发现了大花园，似乎 jshell 默认就帮我们导入了 s1-s10 的包，或者说这些 import 本身就是 Java 中的静态类，静态包？</p><blockquote><p>jshell&gt; &#x2F;list -all<br>s1 : import java.io.<em>;<br>s2 : import java.math.</em>;<br>s3 : import java.net.<em>;<br>s4 : import java.nio.file.</em>;<br>s5 : import java.util.<em>;<br>s6 : import java.util.concurrent.</em>;<br>s7 : import java.util.function.<em>;<br>s8 : import java.util.prefs.</em>;<br>s9 : import java.util.regex.<em>;<br>s10 : import java.util.stream.</em>;<br>e1 : clear<br>1 : String str &#x3D; “H”;<br>2 : String stLast &#x3D; “enry”;</p></blockquote><h5 id="x2F-list-start"><a href="#x2F-list-start" class="headerlink" title="&#x2F;list -start"></a>&#x2F;list -start</h5><p><code>/list -start</code></p><blockquote><blockquote><p>jshell&gt; &#x2F;list -start<br>s1 : import java.io.<em>;<br>s2 : import java.math.</em>;<br>s3 : import java.net.<em>;<br>s4 : import java.nio.file.</em>;<br>s5 : import java.util.<em>;<br>s6 : import java.util.concurrent.</em>;<br>s7 : import java.util.function.<em>;<br>s8 : import java.util.prefs.</em>;<br>s9 : import java.util.regex.<em>;<br>s10 : import java.util.stream.</em>;</p></blockquote></blockquote><h4 id="x2F-vars"><a href="#x2F-vars" class="headerlink" title="&#x2F;vars"></a>&#x2F;vars</h4><p><code>vars</code><br><code>vars name</code><br>传统 Java 编程中，作用域内变量名是唯一的，但是 jshell 作用域还不明确，优先显示 active 的，所以还可以显示 not-active 的，也就是可能返回多个变量;<br><code>vars id</code><br>我想应该可以通过 id 选择列出多个变量<br><code>vars -start</code><br>启动状态的变量<br><code>vars -all</code><br>所有状态的变量</p><h4 id="x2F-methods"><a href="#x2F-methods" class="headerlink" title="&#x2F;methods"></a>&#x2F;methods</h4><p>这一章命令列出的方法里居然没有访问权限修饰符<br><code>methods</code><br><code>methods name</code><br>众所周知，方法是可以重载的，方法名相同，参数列表不同，优先显示 active 的<br><code>methods id</code><br>我想应该可以通过 id 选择列出多个方法<br><code>methods -start</code><br><code>methods -all</code></p><h4 id="x2F-drop"><a href="#x2F-drop" class="headerlink" title="&#x2F;drop"></a>&#x2F;drop</h4><p><code>drop id</code><br><code>drop name</code></p><h4 id="x2F-save"><a href="#x2F-save" class="headerlink" title="&#x2F;save"></a>&#x2F;save</h4><p><code>/save &lt;file&gt;</code><br>活动代码段保存到文档中<br><code>/save -history &lt;file&gt;</code><br>保存自 jshell 工具启动以来输入的所有命令和代码片段的顺序历史记录。<br><code>/save -all &lt;file&gt;</code><br><code>/save -start &lt;file&gt;</code><br><code>/save &lt;id&gt; &lt;file&gt;</code></p><h4 id="x2F-edit"><a href="#x2F-edit" class="headerlink" title="&#x2F;edit"></a>&#x2F;edit</h4><p>如果之前没用<code>/set editor</code>设置编辑器，则会启动 Java 自带的简陋编辑器。<br><code>/edit</code><br>这会在图形化桌面中唤醒编辑器。编辑使用 &#x2F;open 键入或读取的当前活动代码段。<br><code>/edit name</code><br><code>/edit id</code><br><code>/edit -start</code><br><code>/edit -all</code></p><h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4><p>前面在 list 已经用过 id 了的，这里补一下官方详细帮助文档<br><code>/help id</code><br>看完文档后下面记录一下吧。<br>您输入的每个代码片段都有自己唯一的代码片段 ID。即使再次输入相同的代码片段，它也会有一个新的 ID。对于普通代码段，代码段 ID 是一个递增的数字。<br>错误失败的代码段具有以“e”开头的代码段 ID，启动中的代码片段有一个以’s’开头的代码段 ID。代码段 ID 是在命令中引用代码段的一种方式。<br>引用代码片段将采用 ID、ID 范围和代码片段名称的列表作为参数。这些命令是：&#x2F;list、&#x2F;edit、&#x2F;drop、&#x2F;save、&#x2F;vars、&#x2F;methods、<br>| &#x2F;types, and id. Some examples:<br>|<br>| &#x2F;edit 7-23<br>|<br>| &#x2F;save s1-s4 3-8 foo 12 myfile<br>|<br>| &#x2F;9-12 33<br>|<br>| See ‘&#x2F;help &#x2F;edit’, ‘&#x2F;help &#x2F;save’, and ‘&#x2F;help rerun’ respectively.</p><p>所以 id 是为了引用代码片段，id 文档还介绍了另外一种不使用代码片段 ID，而是通过代码片段名称的引用方式。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome插件开发</title>
      <link href="/2022/05/31/Chrome%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
      <url>/2022/05/31/Chrome%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="Chrome-插件开发"><a href="#Chrome-插件开发" class="headerlink" title="Chrome 插件开发"></a>Chrome 插件开发</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><ul><li><code>_locales</code></li><li><ul><li><code>messages.json</code> <strong>语言配置，可以有多个 message.json</strong></li></ul></li><li><code>icons</code> <strong>存放图标的文件夹</strong></li><li><code>manifest.json</code><strong>插件的权限配置，个性化配置</strong></li></ul><h2 id="无页面的-JS-插件"><a href="#无页面的-JS-插件" class="headerlink" title="无页面的 JS 插件"></a>无页面的 JS 插件</h2><p>只需要<code>manifest.json</code>和一个 js 文件即可，我的叫<code>main.js</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;manifest_version&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;随身行uapp&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;这个开发者已摆烂，什么都没有留下&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yelowShine&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;content_scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;matches&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;http://*/*&quot;</span><span class="punctuation">,</span> <span class="string">&quot;https://*/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">//匹配任意网站可用</span></span><br><span class="line">      <span class="attr">&quot;js&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;main.js&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="获取当前标签页-dom-节点"><a href="#获取当前标签页-dom-节点" class="headerlink" title="获取当前标签页 dom 节点"></a>获取当前标签页 dom 节点</h2><h2 id="自动填写当前标签页表单"><a href="#自动填写当前标签页表单" class="headerlink" title="自动填写当前标签页表单"></a>自动填写当前标签页表单</h2><h2 id="打开一个气泡窗口"><a href="#打开一个气泡窗口" class="headerlink" title="打开一个气泡窗口"></a>打开一个气泡窗口</h2><p>在<code>manifest.json</code>中添加配置，并新增一个<code>popup.html</code>文件，可以不用 icon 图片。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;browser_action&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;default_popup&quot;</span><span class="punctuation">:</span> <span class="string">&quot;popup.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;default_icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;popup.png&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h2 id="background-后台"><a href="#background-后台" class="headerlink" title="background 后台"></a>background 后台</h2><p>background 的生命周期是插件中所有类型页面中最长的；它随着浏览器的打开而打开，随着浏览器的关闭而关闭，所以通常把需要一直运行的、启动就运行的、全局的代码放在 background 里面。</p><p>background 也是需要在<code>manifest.json</code>中进行配置，可以通过<code>page</code>指定一张网页，或者通过<code>scripts</code>直接指定一个 js 数组，Chrome 会自动为 js 生成默认网页：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// &quot;page&quot;: &quot;background.html&quot;,</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;background.js&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;persistent&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>设置一个 background.js，添加监听事件，插件安装完成后输出信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// background.js</span></span><br><span class="line">chrome.<span class="property">runtime</span>.<span class="property">onInstalled</span>.<span class="title function_">addListener</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello Word 插件已被安装&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在插件列表里找到已安装的该插件，点击<code>背景页</code>，即可看到<code>background.js</code>输出的信息。</p><p>需要注意的是，page 属性和 scripts 属性只需要配置一个即可，如果两个同时配置，则会报以下错误信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Only one of &#x27;background.page&#x27;, &#x27;background.scripts&#x27;, and &#x27;background.service_worker&#x27; can be specified.</span><br></pre></td></tr></table></figure><h2 id="使用-storage-存储"><a href="#使用-storage-存储" class="headerlink" title="使用 storage 存储"></a>使用 storage 存储</h2><p>在 storage 中设置一个值，这将允许多个插件组件访问该值并进行更新操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">chrome.<span class="property">runtime</span>.<span class="property">onInstalled</span>.<span class="title function_">addListener</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello Word 插件已被安装&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//set存储到storage</span></span><br><span class="line">  chrome.<span class="property">storage</span>.<span class="property">sync</span>.<span class="title function_">set</span>(&#123; <span class="attr">studentName</span>: <span class="string">&quot;HenryWong&quot;</span> &#125;, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;storage init studentName HenryWong&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get获取storage的值</span></span><br><span class="line">    chrome.<span class="property">storage</span>.<span class="property">sync</span>.<span class="title function_">get</span>(<span class="string">&quot;studentName&quot;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;storage的get方法获取到的值&quot;</span>, data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>由于使用到了<code>chrome.storage</code>，因此我们需要在 manifest.json 中给插件注册使用的权限。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;storage&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h2 id="添加第三方-js-依赖"><a href="#添加第三方-js-依赖" class="headerlink" title="添加第三方 js 依赖"></a>添加第三方 js 依赖</h2><p>第三方依赖和脚本的使用受到内容安全策略 CSP 的限制，这将缓解跨站脚本问题，但这是插件开发的绊脚石，Eval 和相关函数已禁用，内联 JavaScript 不运行，仅加载本地脚本和对象资源。详情<br><a href="https://docs.microsoft.com/zh-cn/microsoft-edge/extensions-chromium/store-policies/csp">https://docs.microsoft.com/zh-cn/microsoft-edge/extensions-chromium/store-policies/csp</a></p><p>CSP 除了可以在 HTTP 标头<code>meta</code>标签定义，也可以在扩展插件开发时在<code>manifest.json</code>定义<code>关闭CSP</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;content_security_policy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;script-src &#x27;self&#x27; &#x27;unsafe-eval&#x27;; object-src &#x27;self&#x27;&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue框架_BV1Zy4y1K7SH 观后感</title>
      <link href="/2022/05/27/vue%E6%A1%86%E6%9E%B6-BV1Zy4y1K7SH-%E8%A7%82%E5%90%8E%E6%84%9F/"/>
      <url>/2022/05/27/vue%E6%A1%86%E6%9E%B6-BV1Zy4y1K7SH-%E8%A7%82%E5%90%8E%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>这是一篇 vue 框架关于 BV1Zy4y1K7SH 的观后感，建议有一定 web 开发基础，微信小程序开发经验的可以学习。</p><h2 id="Vue-安装初始环境"><a href="#Vue-安装初始环境" class="headerlink" title="Vue 安装初始环境"></a>Vue 安装初始环境</h2><p>（1） 使用<code>&lt;script&gt;</code>标签引用</p><p>（2）NPM 包管理器安装</p><p>ps：使用 Vue.config.productionTip&#x3D;false 关闭生产提示，安装 Vuetool</p><h2 id="模板语法数据绑定"><a href="#模板语法数据绑定" class="headerlink" title="模板语法数据绑定"></a>模板语法数据绑定</h2><p>2.1 大胡子语法、插值语法 <code>&#123;&#123; &#125;&#125;</code> 绑定标签体内容</p><p>2.2 指令语法<code>:属性名</code>绑定属性内容，如:href&#x3D;”url”</p><p>ps:表单输入类元素，使用<code>v-model=&quot;xxx&quot;</code>实现双向数据绑定，<br><code>&#123;&#123;  &#125;&#125;</code>中可以放置表达式和有返回值的函数<code>&#123;&#123;fun()&#125;&#125;</code></p><h2 id="el-与-data-的两种写法"><a href="#el-与-data-的两种写法" class="headerlink" title="el 与 data 的两种写法"></a>el 与 data 的两种写法</h2><p><strong>el</strong>： 1.在 new Vue 时绑定选择容器元素<code>el:&#39;#root&#39;</code> 2.在 new Vue 时不绑定容器元素，使用<code>$mount(&#39;#root&#39;)</code>将 Vue 挂载到某个容器(灵活性高)</p><p><strong>data</strong>: 1.以对象形式声明<code>data:&#123;……&#125;</code> 2.以函数形式声明</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    ……</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Object-defineProperty-方法"><a href="#Object-defineProperty-方法" class="headerlink" title="Object.defineProperty 方法"></a>Object.defineProperty 方法</h2><p>Object.definePropertys 是数据代理实现双向绑定的基础</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">  <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">definePropertys</span>(person,<span class="string">&#x27;age&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="comment">//为key &#x27;age&#x27;设置值</span></span><br><span class="line">  <span class="attr">enumerable</span>:<span class="literal">true</span> <span class="comment">//是否可枚举</span></span><br><span class="line">  <span class="attr">writable</span>:<span class="literal">true</span>, <span class="comment">//是否可修改</span></span><br><span class="line">  <span class="attr">configurable</span>:<span class="literal">true</span>, <span class="comment">//是否可被删除</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;age属性被读取时调用&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> number;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;age属性被修改时调用&#x27;</span>,value);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>使用 v-on:xxx 或@xxx 如<code>@click</code>绑定事件<br>不要用箭头函数，否则 this 就不是 vm 了<br>this 一般指向的是 vm 或组件实例对象<br>传参时用<code>@click=&#39;fun($event,index,data-xxx)&#39;</code>可携带更多参数, 其中 fun 为方法名</p><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><p><code>@click.stop=&quot;fun&quot;</code><br>prevent：阻止默认事件<br>stop：阻止事件冒泡<br>once：事件只触发一次<br>capture：事件的捕获<br>self：只有 event.target 是当前操作元素才触发事件<br>passive：默认事件立即执行，无需等待事件自定义回调执行完毕</p><p>ps:在嵌套关系中的执行顺序，事件的捕获是从外到内，事件的冒泡是从内到外。<br>修饰符是可以连着写的<code>@click.prevent.stop=&quot;fun&quot;</code></p><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><p>键盘事件不得不提<code>e.key</code>键名，键码<code>e.keyCode</code></p><p>（1）通过键名、键别名捕获：如 esc 键被弹起<code>@keyup.esc</code><br>常用按键别名：<br>enter<br>delete<br>esc<br>space<br>tab<br>up、down、left、right</p><p>（2）通过键码捕获<code>@keyup.13</code><br>不建议使用，因为相同的按键在不同键盘键码可能不一样，不适合多用户程序使用。</p><p>ps：系统修饰键 ctrl、alt、shift、meta（win、option 键）建议搭配 keydown 使用</p><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>虽然<code>&#123;&#123; &#125;&#125;</code>大胡子语法内可放置表达式和有返回值的 method，但表达式在 h5 中可能拼接过长不太雅观；后者效率堪忧，每用到 method 都会调用一次。所以有必要使用计算属性了。<br>一般地，属性会放置在实例的<code>data:&#123;……&#125;</code>中，计算属性则是位于<code>computed:&#123;……&#125;</code>中<br>例如此处设置计算属性 fullName，通过 data 属性中的 firstName 和 lastName 计算 fullName。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">  <span class="attr">fullName</span>:&#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">      <span class="comment">//todo setNewValue</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算属性中的get何时执行?</span></span><br><span class="line"><span class="comment">//（1）初始化时会执行一次将计算结果存入缓存，</span></span><br><span class="line"><span class="comment">//（2）或者参与计算的变量被修改后，计算结果被刷新存入缓存</span></span><br><span class="line"><span class="comment">// 计算属性如何双向绑定？</span></span><br><span class="line"><span class="comment">// 在set方法中设法修改参与计算的变量们的值，达到重新计算的效果</span></span><br></pre></td></tr></table></figure><p>ps：计算属性好处在于，可以通过缓存减少 method 调用</p><h2 id="侦听属性"><a href="#侦听属性" class="headerlink" title="侦听属性"></a>侦听属性</h2><p>侦听属性用<code>watch:&#123;……&#125;</code>表示，<br>用来侦听<code>data</code>中的属性和<code>computed</code>中的计算属性<br>当侦听属性发生变化时，回调函数<code>handler</code>发生调用。</p><p>（1）可以在初始化实例时配置侦听属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">  <span class="attr">isHot</span>:&#123;</span><br><span class="line">  <span class="attr">immediate</span>:<span class="literal">true</span>, <span class="comment">//初始化时调用一次handler</span></span><br><span class="line">  <span class="attr">deep</span>:<span class="literal">true</span>, <span class="comment">// 当isHot属性的值为对象或嵌套多层对象时是否深入侦听</span></span><br><span class="line">  <span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot has changed&#x27;</span>,newValue,oldValue)</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）也可以手动调用<code>$watch</code>实现侦听属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vm.$watch(&#x27;isHot&#x27;,&#123;</span><br><span class="line">    immediate:true, //初始化时调用一次handler</span><br><span class="line">    deep:true, // 当isHot属性的值为对象或嵌套多层对象时是否深入侦听</span><br><span class="line">    handler(newValue,oldValue)&#123;</span><br><span class="line">    console.log(&#x27;isHot has changed&#x27;,newValue,oldValue)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="绑定动态样式"><a href="#绑定动态样式" class="headerlink" title="绑定动态样式"></a>绑定动态样式</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//css部分</span><br><span class="line"><span class="selector-class">.qwer</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>=<span class="number">666px</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="selector-class">.s1</span>&#123;……&#125;, <span class="selector-class">.s2</span>&#123;……&#125;, <span class="selector-class">.s3</span>&#123;……&#125;</span><br><span class="line">//<span class="selector-tag">h5</span>部分</span><br><span class="line">:style=<span class="string">&quot;t&quot;</span></span><br><span class="line">:class=<span class="string">&quot;cc&quot;</span></span><br><span class="line">:class=<span class="string">&quot;sofArr&quot;</span></span><br><span class="line">:class=<span class="string">&quot;sofObj&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue属性</span></span><br><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line">  <span class="attr">t</span>:<span class="string">&#x27;font-size=666&#x27;</span>;</span><br><span class="line">  <span class="attr">cc</span>:<span class="string">&#x27;qwer&#x27;</span> <span class="comment">//可以替换指定为已定义的任意类样式</span></span><br><span class="line">  <span class="attr">sofArr</span>:[<span class="string">&#x27;s1&#x27;</span>,<span class="string">&#x27;s2&#x27;</span>,<span class="string">&#x27;s3&#x27;</span>] <span class="comment">//可以增减为多个已定义的任意类样式</span></span><br><span class="line">  <span class="attr">sofObj</span>:&#123;</span><br><span class="line">    <span class="attr">s1</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">s1</span>:<span class="literal">true</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><p>条件渲染，符合布尔 boolean 表达式值为 true 的才会渲染，如<code>v-if = true</code><br><code>v-show</code>、<code>v-if</code>、<code>v-else-if</code>、<code>v-else</code><br>v-if 后有 else 判断时，要求结构不能被打断<br>v-if 效率不如 v-show<br>如果条件渲染的部分需要用一个盒子包裹，则使用 v-if 与<code>template</code>标签的组合。</p><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><p>（1）遍历数组，数组内多个对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index)&quot;</span> <span class="attr">of</span> <span class="attr">persons</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123;p.index&#125;&#125; &#123;&#123;p.name&#125;&#125; &#123;&#123;p.age&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js部分 在data中定义</span></span><br><span class="line"><span class="attr">persons</span>: [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&quot;001&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">15</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&quot;002&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>, <span class="attr">age</span>: <span class="number">16</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&quot;003&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;王五&quot;</span>, <span class="attr">age</span>: <span class="number">17</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>（2）遍历对象<br>这将会输出该对象的所有的键值对</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,k)&quot;</span> <span class="attr">of</span> <span class="attr">persons</span>&gt;</span>&#123;&#123;k&#125;&#125; &#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js部分设置vue属性</span></span><br><span class="line"><span class="attr">person</span>:&#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;赵六&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span><br></pre></td></tr></table></figure><p>（3）遍历字符串</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(char,index)&quot;</span> <span class="attr">of</span> <span class="attr">str</span>&gt;</span>&#123;&#123;char&#125;&#125; &#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js部分设置vue属性</span></span><br><span class="line"><span class="attr">str</span>: <span class="string">&quot;helloWorld&quot;</span>;</span><br></pre></td></tr></table></figure><p>（4）遍历指定次数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(num,index)&quot;</span> <span class="attr">of</span> <span class="attr">5</span>&gt;</span>&#123;&#123;num&#125;&#125; &#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ps：<code>:key</code>的值建议使用对象属性的 id，而不是使用 index</p><h3 id="key-的作用和原理"><a href="#key-的作用和原理" class="headerlink" title=":key 的作用和原理"></a>:key 的作用和原理</h3><p>遍历列表时先遍历:key 作比较，<br>:key 参与了，虚拟 dom 转真实 dom 的过程，<br>有新:key 的用新:key 转真实 dom，无新:key 则比较新旧:key 的文本和元素决定是否服用原真实 dom，不再转换。</p><p>ps:<code>如何正确使用:key ？</code> （1）使用数据的唯一标识 id 作为:key（2）以栈的形式顺序无插队增删列表时，仅用于显示时使用默认的 index 作为 key 没有问题。</p><h3 id="列表过滤"><a href="#列表过滤" class="headerlink" title="列表过滤"></a>列表过滤</h3><p>列表过滤，模糊查询，使用 js 原生 filter，结合计算属性或者侦听属性的双向绑定实现。</p><h3 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h3><p>数组排序使用<code>sort</code>方法</p><h2 id="表单数据"><a href="#表单数据" class="headerlink" title="表单数据"></a>表单数据</h2><p>表单数据双向绑定依赖于<code>v-model</code>属性的值，和 h5 标签的 value 属性。<br>使用<code>v-model</code>绑定的变量接收 h5 标签中<code>value</code>属性的值。</p><p>特例：</p><p>（1）单选框没有设置 value 时，获取的是 checked 的布尔值，是否选择</p><p>（2）多选框<code>v-model</code>绑定数组时，获取的是多选 value 值组成的数组；<br>多选框绑定非数组时，获取的是 checked 布尔值。</p><p><code>v-model</code>三个修饰符：lazy 失去焦点再获取，number 获取内容转数字，trim 去掉首尾空格</p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>（1）局部过滤器<br><code>new Vue(filters:&#123;&#125;)</code></p><p>（2）全局过滤器<br><code>Vue.filter(name,callback)</code></p><p>使用过滤器：</p><p>（1）<code>&#123;&#123;xxx | 过滤器&#125;&#125;</code>、（2）<code>:type=&quot;xxx | 过滤器&quot;</code></p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p><code>v-text</code>，变量将以纯字符串方式渲染。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-html</code>，变量可以携带 html 的标签和属性进行渲染。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-clock</code>，常用于解决网速慢展示出源代码的问题。原理是 vue 接管容器后会移除标签的 v-clock 属性，配合 css 属性选择器即可实现。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 为选择的dom节点设置样式，初始化时携带v-clock的标签都设置为不可见 */</span></span><br><span class="line"><span class="selector-attr">[v-clock]</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 标签的v-clock属性在vue接管容器后被移除，选择器失效使得元素可见 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-clock</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-once</code>，只渲染一次，不论后续变量如何改变，只显示第一次的渲染结果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-pre</code>，添加在不需要 vue 编译解析的地方，加快 vue 编译速度</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-pre</span>&gt;</span>你好，世界<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><h3 id="自定义指令命名规范"><a href="#自定义指令命名规范" class="headerlink" title="自定义指令命名规范"></a>自定义指令命名规范</h3><p><code>user-name</code></p><p><del>userName</del></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-user-name</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义指令局部（当前容器-vue-实例）"><a href="#自定义指令局部（当前容器-vue-实例）" class="headerlink" title="自定义指令局部（当前容器 vue 实例）"></a>自定义指令局部（当前容器 vue 实例）</h3><p>通过自定义指令操作 dom 指令，例如自定义一个 v-big 指令,功能是将属性放大 10 倍。<br>已知自定义指令两种方式，方式二实现的自定义指令通过<code>bind</code>、<code>inserted</code>、<code>update</code>可以进行更细致的操作，如果指令只需要在<code>bind</code>、<code>update</code>时执行则直接使用方式一更简洁。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一</span></span><br><span class="line"><span class="attr">directives</span>:&#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">big</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;v-big被调用了&quot;</span>);</span><br><span class="line">    element.<span class="property">innerText</span> = binding.<span class="property">value</span> * <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="attr">directives</span>:&#123;</span><br><span class="line">  <span class="attr">big</span>:&#123;</span><br><span class="line">    <span class="comment">// 页面首次加载指令与元素成功绑定时</span></span><br><span class="line">    <span class="title function_">bind</span>(element,binding):&#123;</span><br><span class="line">      element.<span class="property">innerText</span> = binding.<span class="property">value</span> * <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 指令所在元素被插入页面时</span></span><br><span class="line">    <span class="title function_">inserted</span>(element,binding):&#123;</span><br><span class="line">      element.<span class="property">innerText</span> = binding.<span class="property">value</span> * <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//指令所在模板容器被重新解析时</span></span><br><span class="line">    <span class="title function_">update</span>(element,binding):&#123;</span><br><span class="line">      element.<span class="property">innerText</span> = binding.<span class="property">value</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在h5中使用v-big，在data中定义n的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-big</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义指令全局配置"><a href="#自定义指令全局配置" class="headerlink" title="自定义指令全局配置"></a>自定义指令全局配置</h3><p>上面的自定义指令配置于单个 vue 实例中，下面我们来配置全局自定义指令。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;big&#x27;</span>,&#123;</span><br><span class="line">      <span class="comment">// 页面首次加载指令与元素成功绑定时</span></span><br><span class="line">    <span class="title function_">bind</span>(element,binding):&#123;</span><br><span class="line">      element.<span class="property">innerText</span> = binding.<span class="property">value</span> * <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 指令所在元素被插入页面时</span></span><br><span class="line">    <span class="title function_">inserted</span>(element,binding):&#123;</span><br><span class="line">      element.<span class="property">innerText</span> = binding.<span class="property">value</span> * <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//指令所在模板容器被重新解析时</span></span><br><span class="line">    <span class="title function_">update</span>(element,binding):&#123;</span><br><span class="line">      element.<span class="property">innerText</span> = binding.<span class="property">value</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h2><p>大多数情况下，编程时只需要使用<code>mounted</code>、<code>beforeDestroy</code>函数就行了。<br>通俗点，<code>mounted</code>写进入页面后要干的，<code>beforeDestroy</code>写离开页面前要干的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="comment">/* 初始化 生命周期、事件 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//vm的data和methods在当前周期函数不起作用</span></span><br><span class="line">  <span class="title function_">beforeCreate</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 初始化 数据侦听、数据代理 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// vm的data和methods在当前周期函数可以使用了</span></span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 判断容器挂载方式el、$mount和模板渲染方式template并执行 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//未经vue编译的dom结构显示在页面上，现在不要操作dom，最终不生效。</span></span><br><span class="line">  <span class="title function_">beforeMount</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 将虚拟dom转为真实dom显示在页面，可以操作dom */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 挂载完毕，vue完成首次模板解析，并把真实dom放入页面后</span></span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 当data中的属性发生改变时 S */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 数据得到了更新，但页面渲染未更新</span></span><br><span class="line">  <span class="title function_">beforeUpdate</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 新的虚拟dom和旧的虚拟dom进行比较，返回更新结果，页面渲染得到更新 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 数据得到了更新，页面页得到了更新</span></span><br><span class="line">  <span class="title function_">updated</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 当data中的属性发生改变时 E */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 当vm.$destroy被调用 S */</span></span><br><span class="line">  <span class="title function_">beforeDestroy</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁vm，清理vm与组件的连接，解绑指令和自定义事件</span></span><br><span class="line">  <span class="title function_">destroyed</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">  <span class="comment">/* 当vm.$destroy被调用 E */</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>对静态资源文件的复用已不能满足模块化复用的需求，所以组件诞生了。<br>创建组件时，组件内的 data 要写成有返回值的函数形式。</p><p>vue 组件开发的三部曲：创建、注册、使用</p><h3 id="非单文件组件"><a href="#非单文件组件" class="headerlink" title="非单文件组件"></a>非单文件组件</h3><p>这里创建了学校和学生两个组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1）创建组件 */</span></span><br><span class="line"><span class="keyword">const</span> school = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click=&quot;showName&quot;&gt;&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;北京大学&quot;</span>,</span><br><span class="line">      <span class="attr">address</span>: <span class="string">&quot;北京&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">showName</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// 北京大学</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> student = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click=&quot;showName&quot;&gt;&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;李大明&quot;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="string">&quot;18&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span><br><span class="line">  <span class="comment">/* 2)注册组件（局部注册）仅限当前实例绑定的容器内使用 */</span></span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="attr">xuexiao</span>: school,</span><br><span class="line">    <span class="attr">xuesheng</span>: student,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 3）使用组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xuexiao</span>&gt;</span><span class="tag">&lt;/<span class="name">xuexiao</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xuesheng</span>&gt;</span><span class="tag">&lt;/<span class="name">xuesheng</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="组件的全局注册"><a href="#组件的全局注册" class="headerlink" title="组件的全局注册"></a>组件的全局注册</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> teacher = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;孔子&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>:<span class="string">&#x27;24&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局注册组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">cmponent</span>(<span class="string">&#x27;laoshi&#x27;</span>,teacher);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#root2&#x27;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 全局注册的组件可以在任意实例使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">laoshi</span>&gt;</span><span class="tag">&lt;/<span class="name">laoshi</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">laoshi</span>&gt;</span><span class="tag">&lt;/<span class="name">laoshi</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="组件创建的简化"><a href="#组件创建的简化" class="headerlink" title="组件创建的简化"></a>组件创建的简化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;北京大学&quot;</span>,</span><br><span class="line">      <span class="attr">address</span>: <span class="string">&quot;北京&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="组件的嵌套"><a href="#组件的嵌套" class="headerlink" title="组件的嵌套"></a>组件的嵌套</h3><p>again，组件三部曲：创建、注册、使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> student = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;h2&gt;&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;李大明&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>:<span class="string">&#x27;18&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> school = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;&#123;&#123;student&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;北京大学&#x27;</span>,</span><br><span class="line">      <span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">components</span>:&#123;</span><br><span class="line">    <span class="attr">student</span>:student</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;school&gt;&lt;/school&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">components</span>:&#123;</span><br><span class="line">    <span class="attr">school</span>:school</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>;</span><br><span class="line">  <span class="attr">components</span>:&#123;</span><br><span class="line">    <span class="attr">app</span>:app</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>开发过程中，由一个 vue 实例管理一个名为 app 的组件，app 组件内嵌套有多个组件，用树形结构来看的话 app 组件就是作为了组件树的根节点，包含了众多的子节点组件，子节点组件还可以嵌套分叉更多组件。</p><h3 id="VueComponent-构造函数"><a href="#VueComponent-构造函数" class="headerlink" title="VueComponent 构造函数"></a>VueComponent 构造函数</h3><ul><li>vue 组件的本质是<code>VueComponent</code>构造函数，是通过 Vue.extend 生成的。</li><li>使用组件如<code>&lt;school&gt;&lt;/&lt;school&gt;</code>时 vue 会通过 new VueComponent(options)帮我们创建组件的实例对象。</li><li>在 VueComponent 组件配置的函数中，this 指向的是当前组件的实例对象。</li><li>在 new Vue(option)内的函数中，this 指向当前 vue 实例。</li></ul><h3 id="JavaScript-构造函数"><a href="#JavaScript-构造函数" class="headerlink" title="JavaScript 构造函数"></a>JavaScript 构造函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">b</span> = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Demo</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">//函数才有prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d.<span class="property">__proto__</span>); <span class="comment">//实例对象有__proto__</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Demo</span>.<span class="property"><span class="keyword">prototype</span></span> === d.<span class="property">__proto__</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">VueComponent.prototype.__proto__ === Vue.prototype </span></span><br><span class="line"><span class="comment">所以vc可以访问vm的属性和方法</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h3><p>单文件组件的好处在于可以为组件定义 css 样式，单文件组件文件名是以<code>.vue</code>结尾的文件。<br>主要由<code>template</code>、<code>script</code>、<code>style</code>三对标签组成，分别对应着<code>组件的标签结构</code>、<code>组件的js脚本</code>、<code>组件的样式</code>。单文件组件创建完毕后需要使用<code>export</code>将组件暴露出去才能使用。</p><p><code>.vue组件</code>的创建如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;school&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// export school 分别暴露</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">const</span> school = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;school&#x27;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;北京大学&#x27;</span>,</span><br><span class="line">      <span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">showName</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// 北京大学</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/* export暴露方式任选其一 */</span></span><br><span class="line"><span class="keyword">export</span> &#123;school&#125; <span class="comment">// 统一暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> school <span class="comment">// 默认暴露</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-class">.school</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>单文件组件的思想就是以<code>main.js</code>为入口创建 vue 实例调用<code>App.vue</code>根组件，通过根组件 App.vue，调用其他子组件</p><ul><li><code>main.js</code></li><li><code>App.vue</code></li><li><ul><li><code>xx1.vue</code></li></ul></li><li><ul><li><code>xx2.vue</code></li></ul></li><li><ul><li><code>xx…….vue</code></li></ul></li></ul><h2 id="vue-cli-脚手架"><a href="#vue-cli-脚手架" class="headerlink" title="vue-cli 脚手架"></a>vue-cli 脚手架</h2><p>略……</p><h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><p>vue-router 是 vue 的一个插件库需要额外安装，常用于实现单页面应用<code>SPA</code>(single page app)，就是根据不同的路由地址展示不同的组件，或者请求不同的接口并且处理响应回调。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat服务器</title>
      <link href="/2022/05/27/Tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2022/05/27/Tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat-服务器"><a href="#Tomcat-服务器" class="headerlink" title="Tomcat 服务器"></a>Tomcat 服务器</h1><h2 id="运行-tomcat"><a href="#运行-tomcat" class="headerlink" title="运行 tomcat"></a>运行 tomcat</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">方法一：运行tomcat的bin目录下startup文件，win是bat，linux和mac是sh</span><br><span class="line"></span><br><span class="line">方法二：命令行到tomcat的bin目录，输入目录catalina run回车（该方法运行失败时会反馈失败原因）</span><br></pre></td></tr></table></figure><h2 id="测试-tomcat-是否启动成功"><a href="#测试-tomcat-是否启动成功" class="headerlink" title="测试 tomcat 是否启动成功"></a>测试 tomcat 是否启动成功</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">浏览器进入，任选一个地址</span><br><span class="line"></span><br><span class="line">http://localhost:8080</span><br><span class="line"></span><br><span class="line">http://127.0.0.1:8080</span><br><span class="line"></span><br><span class="line">http://真实ip:8080</span><br><span class="line"></span><br><span class="line">当进入汤姆猫界面，说明tomca服务器启动成功</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="常见-tomcat-启动失败情况"><a href="#常见-tomcat-启动失败情况" class="headerlink" title="常见 tomcat 启动失败情况"></a>常见 tomcat 启动失败情况</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Java环境变量没有配置JAVA_HOME，要不然汤姆猫去不到JAVA的家</span><br></pre></td></tr></table></figure><h2 id="停止-tomcat"><a href="#停止-tomcat" class="headerlink" title="停止 tomcat"></a>停止 tomcat</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">方法一：点击tomcat窗口的x关闭</span><br><span class="line"></span><br><span class="line">方法二：运行tomcat的bin目录下shutdown文件win是bat，linux和mac是sh</span><br><span class="line"></span><br><span class="line">方法三：在tomcat窗口下使用键盘CTRL+C</span><br></pre></td></tr></table></figure><h2 id="修改-tomcat-端口"><a href="#修改-tomcat-端口" class="headerlink" title="修改 tomcat 端口"></a>修改 tomcat 端口</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修改tomcat目录下conf文件夹内server.xml的connector标签的port属性的值并保存</span><br><span class="line"></span><br><span class="line">然后重启tomcat服务器才能生效</span><br></pre></td></tr></table></figure><h2 id="如何部署项目到-tomcat-服务器"><a href="#如何部署项目到-tomcat-服务器" class="headerlink" title="如何部署项目到 tomcat 服务器"></a>如何部署项目到 tomcat 服务器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">方法一：把项目拷贝到tomcat的webapps目录下即可</span><br><span class="line"></span><br><span class="line">方法二：在tomcat目录下conf\Catalina\localhost中新建xml文件，一个xml对应一个项目</span><br><span class="line"></span><br><span class="line">如新建一个abc.xml，项目Test路径为E:\Test</span><br><span class="line"></span><br><span class="line">对应的xml配置为&lt;Context path=”/abc” docBase=”E:\Test” /&gt;</span><br></pre></td></tr></table></figure><h2 id="如何访问-tomcat-里的项目"><a href="#如何访问-tomcat-里的项目" class="headerlink" title="如何访问 tomcat 里的项目"></a>如何访问 tomcat 里的项目</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">方法一：浏览器进入，任选一个地址，假意为进到webapps目录，后再加/项目名/文件名…</span><br><span class="line"></span><br><span class="line">http://localhost:8080</span><br><span class="line"></span><br><span class="line">http://127.0.0.1:8080</span><br><span class="line"></span><br><span class="line">http://真实ip:8080</span><br><span class="line"></span><br><span class="line">如访问webapps目录下的Test项目中a文件夹的b.html</span><br><span class="line"></span><br><span class="line">http://真实ip:8080/Test/a/b.html</span><br><span class="line"></span><br><span class="line">方法二：配置xml部署tomcat，项目Test路径为E:\Test，Test项目中a文件夹的b.html http://真实ip:8080/abc/a/b.html</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安卓终端Termux</title>
      <link href="/2022/05/23/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/"/>
      <url>/2022/05/23/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/</url>
      
        <content type="html"><![CDATA[<h1 id="安卓终端-Termux"><a href="#安卓终端-Termux" class="headerlink" title="安卓终端 Termux"></a>安卓终端 Termux</h1><p>这是一份尽可能避免 root 权限，适合目前大众潮流的 termux 方法论文档</p><h2 id="官方支持"><a href="#官方支持" class="headerlink" title="官方支持"></a>官方支持</h2><p>termux-boot 开机自启动<br>如果只是像安卓电视盒子开关机的话可以用，但是关闭再打开 app 就不行了</p><h2 id="postgresql"><a href="#postgresql" class="headerlink" title="postgresql"></a>postgresql</h2><p><code>pkg install postgresql</code>安装<br><code>mkdir -p $PREFIX/var/lib/postgresql</code>创建目录<br><code>initdb $PREFIX/var/lib/postgresql</code>初始化</p><p><code>postgres -D $PREFIX/var/lib/postgresql/</code>运行</p><p>列出数据库<br><code>psql -l</code><br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2024-04-20-00-04-38.png"><br><strong>连接数据库</strong><br><code>psql -U u0_a36 -d postgres</code><br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2024-04-20-00-06-49.png"></p><p>列出数据库_v2<br><code>\l</code><br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2024-04-20-00-11-10.png"></p><p>查看用户<br><code>\du</code><br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2024-04-20-00-13-33.png"></p><p>没错，正常情况下你会发现\l 和\du 看到的数据库访问权限和用户列表都跟我的不一样。那是因为我还做了如下操作：<br><code>create user root with password &#39;yourPassword&#39;;</code></p><p><code>grant all privileges on database postgres to root;</code><br><code>grant all privileges on database template0 to root;</code><br><code>grant all privileges on database template1 to root;</code></p><p><code>ALTER ROLE root SUPERUSER;</code><br><code>ALTER ROLE root CREATEROLE;</code><br><code>ALTER ROLE root CREATEDB;</code><br><code>ALTER ROLE root REPLICATION;</code><br><code>ALTER ROLE root BYPASSRLS;</code></p><p>本地连接<br><code>psql -U root -d postgres -h 127.0.0.1</code></p><p>设置外网连接<br><code>vim pg_hba.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># pg_hba.conf</span><br><span class="line">host all all 0.0.0.0/0 trust</span><br><span class="line">host all all ::/0 trust</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2024-04-20-01-18-39.png"></p><p><code>vim postgresql.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># postgresql.conf</span><br><span class="line">listen_addresses = &#x27;*&#x27;</span><br></pre></td></tr></table></figure><p><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2024-04-20-01-21-18.png"></p><p>好了可以试试远程连接了<br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2024-04-20-01-24-48.png"></p><h2 id="Mariadb"><a href="#Mariadb" class="headerlink" title="Mariadb"></a>Mariadb</h2><p><code>pkg install mariadb</code><br><code>mysqld</code>启动<br><code>mysql -hlocalhost -uroot</code>localhost 的域名被认为是安全的，所以能使用 mysql 这个 database<br><code>use mysql;</code><br><code>set password for &#39;root&#39;@&#39;localhost&#39; = password(&#39;this is your password&#39;);</code><br><code>grant all on *.* to root@&#39;%&#39; identified by &#39;this is your password&#39; with grant option;</code><br><code>flush privileges;</code><br><code>quit;</code></p><p><code>vim ~/../usr/etc/my.cnf</code> 加入下面的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># ~/../usr/etc/my.cnf</span><br><span class="line">[mariadb]</span><br><span class="line"></span><br><span class="line">#datadir=/data/data/com.termux/files/usr/var/lib/mysql</span><br><span class="line">#kill mysqld</span><br><span class="line">#cp /data/data/com.termux/files/usr/var/lib/mysql /diyYourDataDir/data/mariadb</span><br><span class="line">datadir=/diyYourDataDir/data/mariadb/mysql</span><br><span class="line"></span><br><span class="line">#innodb_force_recovery=6</span><br><span class="line">#innodb_purge_threads=0</span><br><span class="line"></span><br><span class="line">innodb_flush_log_at_trx_commit = 1</span><br><span class="line">log_bin = mariadb-bin</span><br><span class="line">sync_binlog = 1</span><br><span class="line">expire_logs_days = 90</span><br><span class="line"></span><br><span class="line">character-set-server = utf8mb4</span><br><span class="line">collation-server = utf8mb4_general_ci</span><br><span class="line"></span><br><span class="line">slow_query_log = on</span><br><span class="line">#slow_query_log_file = /data/mysql_data/slow_query_log.log</span><br><span class="line">long_query_time = 2</span><br><span class="line">#log_queries_not_using_indexes=1</span><br></pre></td></tr></table></figure><h2 id="qemu"><a href="#qemu" class="headerlink" title="qemu"></a>qemu</h2><p>因为安卓手机没有 root 权限，无法使用 KVM 进行完整的 CPU 虚拟化，所以 CPU 始终是 1.00 Ghz<br>存在很大的性能问题，CPU 的运算速度慢，经常未响应……<br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2023-07-16-01-18-55.png"><br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2024-08-20-00-18-49.png"><br><code>pkg install qemu-system-x86-64-headless qemu-utils</code><br>有的时候因为没有连接网络不能使用 curl、wget、webDav 来互传文件<br>那可以先使用 UltraISO 把要传输的文件封装到一个 iso 文件，启动 qemu 时使用<code>-cdrom</code>挂载 iso 文件，例如在 Windows XP 上可以在资源管理器双击进入挂载的 CD-ROM，就像打开了文件夹里面就是你封装的文件</p><h3 id="alpineOS"><a href="#alpineOS" class="headerlink" title="alpineOS"></a>alpineOS</h3><p>qemu -&gt; alpineOS<br>qemu 中的 OS 拥有更开放的功能权限（这是我们没 root 的安卓手机所没有的），所以能实现后面 docker 的安装。选用 alpineOS 是因为效率……<br><code>wget http://dl-cdn.alpinelinux.org/alpine/v3.10/releases/x86_64/alpine-virt-3.10.1-x86_64.iso</code><br>镜像版本要和文档的一致，除非你有时间处理其他未知问题<br>先创建虚拟硬盘空间<br><code>qemu-img create -f qcow2 alpine.img 5g</code><br>启动 img 格式的空间，同时载入 CD-ROM，使用 512m 运行内存，vnc 监听来自所有 ip 的请求并开放 5901 端口（n&#x3D;1，port&#x3D;5900+n），usbdevice 解决双鼠标问题<br><code>qemu-system-x86_64 -hda alpine.img -cdrom alpine-virt-3.10.1-x86_64.iso -boot d -m 512 -nographic -vnc 0.0.0.0:1 -usbdevice tablet</code><br>安装过程中网络先配置 dhcp<br><code>vim /etc/network/interfaces</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line">auto eth0</span><br><span class="line">iface eth0 inet dhcp</span><br></pre></td></tr></table></figure><p>跟着下面的文档安装配置即可，注意，选择 sda 磁盘，软件源使用社区仓库<br>网络连接也是按里面的配<br><a href="https://github.com/diogok/termux-qemu-alpine-docker/blob/master/README.md">https://github.com/diogok/termux-qemu-alpine-docker/blob/master/README.md</a><br><code>Be sure to choose to install on disk &quot;sda&quot; when prompted.</code><br><code>On alpine, edit /etc/apk/repositories and uncomment comunity repository</code><br>原文的&#x2F;etc&#x2F;pkg&#x2F;repositories 应该是错误的 pkg 改成 apk 即可</p><h4 id="使用命令进入安装"><a href="#使用命令进入安装" class="headerlink" title="使用命令进入安装"></a>使用命令进入安装</h4><p><a href="https://fear0818.github.io/2019/08/19/Android%E8%BF%90%E8%A1%8CDocker%EF%BC%81(Termux%20+%20QEMU%20+%20linux_alpine,%20qemu%E7%BD%91%E7%BB%9C%E6%98%A0%E5%B0%84)/">qemu 配置网络端口映射请点我</a><br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2023-07-19-22-28-35.png" alt="alpineOS安装过程"></p><h4 id="重启开始使用"><a href="#重启开始使用" class="headerlink" title="重启开始使用"></a>重启开始使用</h4><p>qemu 启动时映射多个端口<br><code>qemu-system-x86_64 -hda virt-alpine.img -boot c -m 1024 -netdev user,id=nde1,hostfwd=tcp::2222-:22,hostfwd=tcp::1200-:1200 -device e1000,netdev=nde1,id=d-net1 -nographic</code></p><p>安装和使用过程可能多次遇到网络问题，需要按原文档多次设置网络<br><code>/etc/network/interfaces</code><br><code>/etc/init.d/networking restart</code><br><code>/etc/resolv.conf</code><br>特别是<code>/etc/resolv.conf</code>的 nameserver（DNS 服务器）每次都重置为 10.0.2.3<br>建议<code>/etc/network/interfaces</code>安装好后配置成静态的 ip，才能配置固定的 DNS<br>安装前用 dhcp，安装完成重启后才能改静态 ip !!!<br><code>vim /etc/network/interfaces</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line">auto eth0</span><br><span class="line">iface eth0 inet static</span><br><span class="line">  address 192.168.190.140</span><br><span class="line">  netmask 255.255.255.0</span><br><span class="line">  gateway 192.168.190.2</span><br><span class="line"><span class="comment"># gateway 的数值可以先在dhcp环境中使用route命令查看</span></span><br><span class="line"><span class="comment"># 其他数值可以从ifconfig查看</span></span><br></pre></td></tr></table></figure><p>dns 设置<br>懒人可以简单粗暴<code>echo &quot;nameserver 8.8.8.8&quot; &gt; /etc/resolv.conf</code></p><h5 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h5><p>qemu -&gt; alpineOS -&gt; docker<br>安装 docker 使 docker 自启动<br><code>apk add docker</code><br><code>rc-update add docker</code><br>切换 docker 的 mirror 设置成国内可访问的<br>去 dockerHub 上面 pull 个镜像跑起来试试<br><code>docker pull dbeaver/cloudbeaver</code><br>跑镜像的命令，–rm 停止后删除容器，-ti 终端交互控制，还可以使用-d 后台运行<br><code>docker run --name cloudbeaver-ce --rm -ti -p 8978:8978 -v /var/cloudbeaver/workspace:/opt/cloudbeaver/workspace dbeaver/cloudbeaver</code><br>更多关于这个镜像的解释在这个文档<br><a href="https://github.com/dbeaver/cloudbeaver/wiki/Run-Docker-Container">https://github.com/dbeaver/cloudbeaver/wiki/Run-Docker-Container</a><br>容器自启动<br><code>docker update cloudbeaver --restart=always</code></p><h3 id="Windows-XP"><a href="#Windows-XP" class="headerlink" title="Windows XP"></a>Windows XP</h3><p>qemu -&gt; Windows XP OS<br>因为安卓手机没有 root 权限，无法使用 KVM 进行完整的 CPU 虚拟化，所以 CPU 始终是 1.00 Ghz<br>存在很大的性能问题，CPU 的运算速度慢，经常未响应……<br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2023-07-16-01-18-55.png"><br>使用<a href="ed2k://|file|zh-hans_windows_xp_professional_with_service_pack_3_x86_cd_vl_x14-74070.iso|630237184|EC51916C9D9B8B931195EE0D6EE9B40E|/">msdn 的 ISO 镜像</a>即可，安装可以参考上面的 alpineOS，配合远在天堂的奶奶给予的神秘代码，即可激活进入系统<br>启动 img 格式的空间，同时载入 CD-ROM，使用 2048m 运行内存，<code>模拟网卡rtl8139</code>，vnc 监听来自所有 ip 的请求并开放 5901 端口（n&#x3D;1，port&#x3D;5900+n），usbdevice 解决双鼠标问题<br><code>qemu-system-x86_64 -hda winXP.img -cdrom 传文件.iso -boot c -m 2048 -netdev user,id=nde1,hostfwd=tcp::2222-:22,hostfwd=tcp::1200-:1200 -device rtl8139,netdev=nde1,id=d-net1 -nographic -vnc 0.0.0.0:1 -usbdevice tablet</code></p><h2 id="git-x2F-gitea"><a href="#git-x2F-gitea" class="headerlink" title="git &#x2F; gitea"></a>git &#x2F; gitea</h2><p><code>pkg install git</code><br>需要之前先装数据库，没装的话随便选一个 mysql&#x2F;mariadb&#x2F;pgsql&#x2F;sqllite<br><code>pkg install gitea</code><br>gitea 有数据库，可以在 app.ini 全部改成 127.0.0.1 然后<br>需要做反向代理，比如我会用 caddy 做反向代理转发到 gitea 的 3000 端口</p><h3 id="迁移仓库"><a href="#迁移仓库" class="headerlink" title="迁移仓库"></a>迁移仓库</h3><h4 id="迁移-git-版本管理"><a href="#迁移-git-版本管理" class="headerlink" title="迁移 git 版本管理"></a>迁移 git 版本管理</h4><p>在新的服务配置 app.ini 中添加如下配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[migrations]</span></span><br><span class="line"><span class="attr">ALLOW_LOCALNETWORKS</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment"># ALLOWED_DOMAINS = 127.0.0.1,192.168.31.100</span></span><br></pre></td></tr></table></figure><p>输入用户名密码即可<br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2023-11-05-11-36-03.png"></p><h4 id="迁移-gitea-工单"><a href="#迁移-gitea-工单" class="headerlink" title="迁移 gitea 工单"></a>迁移 gitea 工单</h4><p>要在原先的 gitea 服务用户设置里启用 Access Token<br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2023-11-05-11-59-31.png"><br>然后就可以迁移 gitea 的工单了，<code>遗憾的是这样并不能迁移git的仓库内容和branch内容</code>，所以这种方式是用一个空的仓库来作为工单系统，<code>只做gitea工单的迁移，工单里的附件图片保留的话还需要数据库备份</code><br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2023-11-05-12-01-58.png"></p><h3 id="mysql-x2F-mariadb-默认配置存在问题"><a href="#mysql-x2F-mariadb-默认配置存在问题" class="headerlink" title="mysql &#x2F; mariadb 默认配置存在问题"></a>mysql &#x2F; mariadb 默认配置存在问题</h3><p>存储引擎事务部分的配置问题，innodb_flush_log_at_trx_commit 默认是 1<br>似乎是 gitea 在操作 mysql 时存在事务控制的问题，总之在 kill 掉 termux（服务器宕机）之后，无法启动数据库，只能删掉<code>/var/lib/mysql/ib_logfile0</code><br>ib_logfile 开头的都删掉，再重新启动，<code>但是我删了ib_logfile0之后也丢掉了一部分待存储到数据库的数据</code></p><h4 id="方法一：调整数据库配置"><a href="#方法一：调整数据库配置" class="headerlink" title="方法一：调整数据库配置"></a>方法一：调整数据库配置</h4><p>查询已存在的全局默认配置</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> &quot;innodb_flush_log_at_trx_commit&quot;; <span class="comment">--1</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> &quot;sync_binlog&quot;; <span class="comment">--0</span></span><br></pre></td></tr></table></figure><p>能尝试调整数据库配置的方案有哪些？<br><a href="https://support.huaweicloud.com/intl/zh-cn/bestpractice-rds/rds_02_0010.html">https://support.huaweicloud.com/intl/zh-cn/bestpractice-rds/rds_02_0010.html</a><br>当 sync_binlog 和 innodb_flush_log_at_trx_commit 都为 1 时是最安全的，在 mysqld 服务崩溃或者服务器主机宕机的情况下，已提交的事务是不会丢失数据的。<br>但是这种双 1 的配置会导致频繁的 io 操作，因此该模式也是最慢的一种方式。</p><p><a href="https://mariadb.com/docs/server/ref/mdb/system-variables/innodb_flush_log_at_trx_commit/">官方建议的组合配置</a>，完全符合 ACID 标准</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 我改的是mariadb.cnf，修改后配置是生效的</span><br><span class="line">[mariadb]</span><br><span class="line">innodb_flush_log_at_trx_commit=1</span><br><span class="line"></span><br><span class="line"># 二进制日志配置，重启后发现在工作路径内新增mariadb-bin.000001，mariadb-bin.index</span><br><span class="line">log_bin=mariadb-bin</span><br><span class="line"></span><br><span class="line"># 在每次 #th 事件后将二进制日志同步刷新到磁盘。默认是0禁用，现在我们启用</span><br><span class="line">sync_binlog=1</span><br></pre></td></tr></table></figure><p>然而我用了方法一出现宕机后还是会出现无法启动的问题，可能要用这些日志来恢复数据，懒得学了，还是换 sqlite3 试试吧。</p><h5 id="学习-binLog-配置数据库恢复"><a href="#学习-binLog-配置数据库恢复" class="headerlink" title="学习 binLog 配置数据库恢复"></a>学习 binLog 配置数据库恢复</h5><ul><li>binLog 能干什么<br>数据丢失 -&gt; 基于 binLog 恢复数据<br>集群部署时，基于 binLog 进行主从同步</li><li>查询配置<br><code>show variables like &#39;log_%&#39;;</code><br><code>show variables like &#39;binlog%&#39;;</code><br><code>show variables like &#39;binlog_format&#39;;</code></li></ul><p>可以查到一条记录是<code>binlog_format</code><br>binLog 日志的格式<br>row, statement, mixed</p><p>statement 基于 SQL 语句的复制，节省空间，但如果遇到类似 now()等会变化的函数，恢复时就对不上了<br>row 基于行的复制，消耗空间，特别是 ALTER TABLE 的时候修改所有的 row……<br>mixed 混合模式复制</p><p>推荐配置<br><code>binlog_format=mixed</code></p><ul><li>开始恢复数据<br>基于 Pos 恢复<br>查询日志 Post<br><code>show binlog events in &#39;mysql-bin.000001&#39;;</code><br><code>show binlog events in &#39;mariadb-bin.000001&#39;;</code></li></ul><p><code>mysqlbinlog --start-position=startPosNum --stop-position=endPosNum --database=databaseName mysql-bin.000013 | mysql -uroot -p123456 -v databaseName</code></p><p><code>mysqlbinlog --start-position=startPosNum --stop-position=endPosNum --database=gitea mariadb-bin.000001 | mysql -uUserName -pYourPassword -v gitea</code></p><p>基于时间恢复<br>查询日志时间<br><code>mysqlbinlog -vv --base64-output=decode-rows mysql-bin.000013</code><br><code>mysqlbinlog -vv --base64-output=decode-rows mariadb-bin.000001</code></p><p><code>mysqlbinlog --start-datetime=&#39;2021-10-14 12:47:12&#39; --stop-datetime=&#39;2021-10-14 12:52:40&#39; --database=databaseName mysql-bin.000013 | mysql -uUserName -pYourPassword -v databaseName</code></p><p><code>mysqlbinlog --start-datetime=&#39;2021-10-14 12:47:12&#39; --stop-datetime=&#39;2021-10-14 12:52:40&#39; --database=gitea mariadb-bin.000001 | mysql -uUserName -pYourPassword -v gitea</code></p><h4 id="方法二：基于方法一的数据库配置来重新搭建-gitea"><a href="#方法二：基于方法一的数据库配置来重新搭建-gitea" class="headerlink" title="方法二：基于方法一的数据库配置来重新搭建 gitea"></a>方法二：基于方法一的数据库配置来重新搭建 gitea</h4><p>试试了还是会受宕机数据库挂掉影响，即使尝试把数据库装在 termux 侧也是一样的会在宕机后挂掉无法启动 mariadb</p><p>日志不熟悉</p><h4 id="方法二：换成用-sqlite3-数据库"><a href="#方法二：换成用-sqlite3-数据库" class="headerlink" title="方法二：换成用 sqlite3 数据库"></a>方法二：换成用 sqlite3 数据库</h4><p>你懂的后面还是要用 sqlite3 数据库了。</p><h3 id="迁移仓库和工单"><a href="#迁移仓库和工单" class="headerlink" title="迁移仓库和工单"></a>迁移仓库和工单</h3><p>这个有待学习</p><h2 id="goLang"><a href="#goLang" class="headerlink" title="goLang"></a>goLang</h2><p><code>wget https://dl.google.com/go/go1.20.5.windows-amd64.zip</code></p><h2 id="openjdk"><a href="#openjdk" class="headerlink" title="openjdk"></a>openjdk</h2><p>openjdk-17<br><a href="https://adoptium.net/zh-CN/temurin/releases/">https://adoptium.net/zh-CN/temurin/releases/</a><br><a href="https://learn.microsoft.com/zh-cn/java/openjdk/download">https://learn.microsoft.com/zh-cn/java/openjdk/download</a></p><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><p><code>apt install redis</code></p><h2 id="activeMQ"><a href="#activeMQ" class="headerlink" title="activeMQ"></a>activeMQ</h2><p>去官网下压缩包，例如 apache-activemq-5.9.0-bin.tar.gz<br>解压后运行即可<br><code>apache-activemq-5.9.0/bin/activemq start</code><br>如有需要可以自定义配置<br>apache-activemq-5.9.0&#x2F;conf&#x2F;jetty.xml</p><p><a href="http://192.168.137.240:8161/">http://192.168.137.240:8161/</a><br>admin &#x2F; admin<br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2022-11-19-19-05-06.png"></p><h2 id="svn"><a href="#svn" class="headerlink" title="svn"></a>svn</h2><a href="/2022/11/01/svn%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/" title="svn版本管理">svn版本管理</a><h2 id="安装并使用-Linux-系统"><a href="#安装并使用-Linux-系统" class="headerlink" title="安装并使用 Linux 系统"></a>安装并使用 Linux 系统</h2><p>使用 <code>AnLinux.apk</code>，这里我安装的是 debian</p><h3 id="挂载目录到-proot-中的-linux"><a href="#挂载目录到-proot-中的-linux" class="headerlink" title="挂载目录到 proot 中的 linux"></a>挂载目录到 proot 中的 linux</h3><p><code>termux-steup-storage</code>获取 sdcard 读写权限<br><code>vim start-debian.sh</code>找到<code>-b /sdcard</code>的那行，解除注释就是挂载 sdcard</p><h3 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h3><p>关于中国用户，需要换源<br><code>vim /etc/apt/sources.list</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#deb http://deb.debian.org/debian bullseye main contrib non-free</span><br><span class="line">deb http://mirrors.ustc.edu.cn/debian stable main contrib non-free</span><br><span class="line">#deb-src http://deb.debian.org/debian bullseye main contrib non-free</span><br><span class="line">deb http://mirrors.ustc.edu.cn/debian stable-updates main contrib non-free</span><br></pre></td></tr></table></figure><h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h3><p><code>apt-get install openssh</code><br><code>apt-get install openssh-server</code><br>一般地，安卓没有 root 权限，22 端口是不能用的<br><code>vim /etc/ssh/sshd_config</code><br>将端口改为 9022，允许所有 v4 &amp; v6 通过 root 用户登录<br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2022-11-19-19-47-03.png"><br><code>passwd root</code>为 root 用户配置密码<br>重启 ssh<br><code>service ssh restart</code>或<br><code>/etc/init.d/ssh restart</code></p><h3 id="homer-导航站"><a href="#homer-导航站" class="headerlink" title="homer 导航站"></a>homer 导航站</h3><p>可以把常用的 Web 地址聚合到 homer 里<br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2023-10-21-14-19-57.png"><br>将 homer 部署在静态 web 服务器，通过配置 config.yml 能够自定义私人的聚合导航网站，如果你会 vue 的话自定义其他功能更是小菜一碟，而且 homer 还是一个 PWA 应用，可以从浏览器安装到手机桌面，从手机桌面直接打开<br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2023-10-23-20-30-42.png" alt="PC端浏览器访问homer"><br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2023-10-23-20-41-31.png" alt="PWA-安卓端访问homer"><br>嗯，不错，有私人小程序那味了~<br>基于各种浏览器的 HTTP 服务，加上导航站后，从此 termux 便携式个人开发环境已经初步完成，往后要更注重其他跨平台模块的开发了，伴随着谷歌对安卓权限的缩紧，和 termux 自身的限制，仅仅局限于 termux 是走不远的。<br><a href="https://github.com/bastienwirtz/homer">https://github.com/bastienwirtz/homer</a></p><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><a href="/2022/07/25/Hexo%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/" title="Hexo使用心得">Hexo使用心得</a><h3 id="caddy"><a href="#caddy" class="headerlink" title="caddy"></a>caddy</h3><p>用 caddy 做反向代理<br>转发到 gitea 的 3000 端口<br><code>caddy reverse-proxy --from :13000 --to 127.0.0.1:3000</code><br>用 caddy 做静态 Web 服务器，index.html<br><code>caddy file-server --listen :4000 --root C:\Users\Administrator\webApp</code><br>用 caddy 做 Web 文件列表服务器，用来下载 caddy 服务器的文件<br><code>caddy file-server --browse --listen :4000 --root C:\Users\Administrator\Downloads</code></p><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p>nginx 部署 hexo 生成的静态文件</p><h3 id="code-server"><a href="#code-server" class="headerlink" title="code-server"></a>code-server</h3><p><a href="https://github.com/coder/code-server/releases/download/v4.9.0-rc.1/code-server-4.9.0-rc.1-macos-amd64.tar.gz">https://github.com/coder/code-server/releases/download/v4.9.0-rc.1/code-server-4.9.0-rc.1-macos-amd64.tar.gz</a><br>这是编译好的直接下载解压运行即可<br><code>code-server-4.9.0-rc.1-linux-arm64/bin/code-server</code><br>配置允许外网访问和免密码登录<br>可以通过添加启动项<code>code-server --bind-addr [::]:8080</code>来达到目的，但是会有东西输出屏幕无法去掉，还是 yaml 配置靠谱<br><code>vim ~/.config/code-server/config.yaml</code><br>这种类似 yml 的配置遇到了冒号，所以要用引号包起来</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#bind-addr: 0.0.0.0:8080</span></span><br><span class="line"><span class="comment">#bind-addr: 127.0.0.1:8080</span></span><br><span class="line"><span class="comment">#同时支持ipv4 &amp; ipv6</span></span><br><span class="line"><span class="attr">bind-addr:</span> <span class="string">&quot;[::]:8080&quot;</span></span><br><span class="line"><span class="comment">#bind-addr建议参考下面在运行时添加参数</span></span><br><span class="line"><span class="comment">#auth: password</span></span><br><span class="line"><span class="attr">auth:</span> <span class="string">none</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">p</span></span><br><span class="line"><span class="attr">cert:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><a href="http://192.168.137.241:8080/">http://192.168.137.241:8080/</a><br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2022-11-19-19-37-16.png" alt="code-server ipv4"><br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2023-06-18-01-19-03.png" alt="code-server ipv6"></p><p>如果是在 termux 侧安装<br><code>pkg install tur-repo</code><br><code>pkg install code-server</code></p><h3 id="xtermjs"><a href="#xtermjs" class="headerlink" title="xtermjs"></a>xtermjs</h3><p>现在 VS Code, code-server 都集成有控制台终端 Terminal<br>如果你的 Web 应用需要加入 Terminal 的话，xtermjs 是一个不错的选择<br><a href="https://xtermjs.org/">https://xtermjs.org/</a><br><a href="https://github.com/xtermjs/xterm.js">https://github.com/xtermjs/xterm.js</a></p><h3 id="ttyd"><a href="#ttyd" class="headerlink" title="ttyd"></a>ttyd</h3><p>ttyd 是 xtermjs 更具体的实现，如果你不想用 xtermjs 造轮子的话可以用用这个</p><h3 id="cloudbeaver"><a href="#cloudbeaver" class="headerlink" title="cloudbeaver"></a>cloudbeaver</h3><p><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2023-12-16-23-59-23.png"><br>建议先登录 cbadmin 的管理员用户，点击左上角＋的图标，选择 New Connection 或者 Find Local Database 填写数据库连接表单，然后点击 TEST 测试连接，看到左下角提示连接成功，此时可选 Project 设置成 Shared(无用户验证的游客也可以访问这个连接实例)，最后点击 CREATE 将会提交表单完成连接实例的创建</p><p>主要依赖<br><a href="https://github.com/dbeaver/dbeaver">https://github.com/dbeaver/dbeaver</a><br>主程序<br><a href="https://github.com/dbeaver/cloudbeaver">https://github.com/dbeaver/cloudbeaver</a><br>编译环境和参考编译文档<br><a href="https://github.com/dbeaver/cloudbeaver/wiki/Build-and-deploy">https://github.com/dbeaver/cloudbeaver/wiki/Build-and-deploy</a></p><h3 id="vnc"><a href="#vnc" class="headerlink" title="vnc"></a>vnc</h3><p>使用 <code>AnLinux.apk</code>安装 xfce4 tightvnc 桌面即可<br><code>vncserver-start</code>启动桌面<br><code>vncserver-stop</code>终止桌面</p><ul><li>在带屏幕的 Windows 中使用 VNC Viewer 连接<br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2022-11-19-19-56-22.png"></li><li>在带屏幕的安卓中使用 VNC Viewer 连接<br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2022-11-19-20-26-09.png"></li></ul><h4 id="桌面的分辨率调节"><a href="#桌面的分辨率调节" class="headerlink" title="桌面的分辨率调节"></a>桌面的分辨率调节</h4><p><code>vim /usr/local/bin/vncserver-start</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里的1024x768即为xfce4桌面的分辨率，按照自己的需求设置即可。</span></span><br><span class="line">vncserver -geometry 1024x768 -depth 24 -name remote-desktop :1</span><br></pre></td></tr></table></figure><p><a href="https://community.aidlux.com/postDetail/314">https://community.aidlux.com/postDetail/314</a></p><h3 id="noVnc"><a href="#noVnc" class="headerlink" title="noVnc"></a>noVnc</h3><p>通过浏览器就能访问 vnc（VNC server），不再需要依赖 VNC Viewer（VNC client）</p><h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h4><h5 id="运行-vnc-server"><a href="#运行-vnc-server" class="headerlink" title="运行 vnc server"></a>运行 vnc server</h5><p>下载安装 tightvnc 或者别的 vnc server……<br>确保该服务使用 vnc viewer 能够连接</p><h5 id="下载-node-启用-websocket-to-tcp-服务"><a href="#下载-node-启用-websocket-to-tcp-服务" class="headerlink" title="下载 node 启用 websocket-to-tcp 服务"></a>下载 node 启用 websocket-to-tcp 服务</h5><p>安装 node 后安装 websocket-to-tcp 包<br>websocket-to-tcp 包安装方式： <code>npm i @maximegris/node-websockify</code></p><ul><li>举个例子：<br>比如在 C 盘下创建一个文件夹，叫做 novncPrx,进入这个文件目录下，通过 npm 命令安装这个包。</li><li>配置并启用 websocket-to-tcp 服务：<br>在 C:&#x2F;novncPrx 下创建 config.js 文件内容为：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> websockify = <span class="built_in">require</span>(<span class="string">&quot;@maximegris/node-websockify&quot;</span>);</span><br><span class="line"><span class="comment">//设置监听websockify的8080端口转发到VNC服务的5900端口</span></span><br><span class="line"><span class="title function_">websockify</span>(&#123;</span><br><span class="line">  <span class="attr">source</span>: <span class="string">&quot;0.0.0.0:8080&quot;</span>, <span class="comment">//websocket Server 的服务地址和端口，端口号为8080</span></span><br><span class="line">  <span class="attr">target</span>: <span class="string">&quot;0.0.0.0:5900&quot;</span>, <span class="comment">//VNC Server 的服务地址和端口，端口号为 5900，可能有些是5901</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>启用命令： <code>node config.js -6</code> 启用 websocket-to-tcp 服务，添加-6 启动项是为了支持 ipv6</li></ul><h5 id="下载-noVNC-服务，通过-nginx-启用该服务"><a href="#下载-noVNC-服务，通过-nginx-启用该服务" class="headerlink" title="下载 noVNC 服务，通过 nginx 启用该服务"></a>下载 noVNC 服务，通过 nginx 启用该服务</h5><ul><li>下载 noVNC<br><a href="https://github.com/novnc/noVNC">https://github.com/novnc/noVNC</a></li><li>把 noVNC 服务部署到 Nginx 上<br>方法一：把 noVnc 项目内的全部文件 copy 到 <code>nginx-1.22.1\html</code><br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2022-11-19-23-15-39.png"><br>方法二：指定 noVnc 项目目录作为网站根目录<br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2022-11-19-23-18-49.png"><br>建议在 server 多加一项<code>listen [::] 80&#125;</code>以支持 ipv6</li><li>启动 nginx<br>在 nginx 目录下 <code>nginx.exe start</code></li><li>使用 noVNC 访问 VNC 服务器<br>访问 nginx 的 vnc.html<br>配置 WebSocket，输入 config.js 中配置的 websocket Server 的服务地址和端口，连接，输入 vnc 的密码连接即可享用<br><a href="http://192.168.137.241/vnc.html">http://192.168.137.241:80/vnc.html</a><br>当然，我们还可以使用更短的地址访问，只需要这样<code>copy ./vnc.html ./index.html</code><br><a href="http://192.168.137.241/">http://192.168.137.241:80</a><br>因为 nginx 对访问 80 服务的请求，根据上面的 server 配置，会先去找 index.html 用来响应<br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2022-11-19-22-19-59.png" alt="noVnc ipv4"><br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2023-06-18-12-43-52.png" alt="noVnc ipv6"><br>这图为了展示 ipv6 的效果，原本 1025 应该继续是 80 端口，只是懒得搭环境重新截图了</li></ul><h4 id="网络代理关系详解"><a href="#网络代理关系详解" class="headerlink" title="网络代理关系详解"></a>网络代理关系详解</h4><p><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2022-11-19-21-49-52.png"><br>代理关系：<br>1，被访问机器安装 tightVNC 成为 VNC server,暴漏 5900 端口<br>2，浏览器访问 VNC server 需要 Tcp 到 websocket 的转化，因此 使用 websockify 把 5900 端口代理到 8080<br>3，通过 nginx 把 noVNC 的 web 服务代理到 80 端口，供外界访问。<br>4，在其他机器上，通过输入 url:80&#x2F;vnc.html 访问到 noVNC 页面后，设置 websocket 访问端口，访问被访问机器。</p><h3 id="pulseaudio-音频服务-x2F-客户端"><a href="#pulseaudio-音频服务-x2F-客户端" class="headerlink" title="pulseaudio 音频服务&#x2F;客户端"></a>pulseaudio 音频服务&#x2F;客户端</h3><p>使用 pulseaudio 服务端播放来自客户端的音频</p><ul><li>pulseaudio 服务端<br>默认监听端口 4713<br>load-module module-native-protocol-tcp auth-ip-acl&#x3D;127.0.0.1 auth-anonymous&#x3D;1</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># vim default.pa</span><br><span class="line">load-module module-native-protocol-tcp auth-anonymous=1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># vim daemon.conf</span><br><span class="line">exit-idle-time = -1</span><br></pre></td></tr></table></figure><ul><li>pulseaudio 客户端<br>默认连接 4713 端口<br><code>export PULSE_SERVER = yourPulseaudioServerIP</code></li></ul><p>termux.pulseaudio 服务端播放 termux.proot.debian 客户端中的音频</p><p>windows.pulseaudio 服务端播放 termux.proot.debian 客户端中的音频</p><h3 id="Chromium-浏览器"><a href="#Chromium-浏览器" class="headerlink" title="Chromium 浏览器"></a>Chromium 浏览器</h3><p>安装<br><code>apt install -y chromium fonts-wqy-* ; chromium --no-sandbox</code><br>启动<br><code>chromium --no-sandbox</code><br>每次都要用命令输入参数启动，不能通过桌面图标启动，很不爽吧，看看下面如何配置</p><p>修改可执行程序，添加启动参数并保存，以后不再需要添加参数启动<br><code>vim /usr/bin/chromium</code><br>其中<code>exec行</code>就是打开命令，在后面行尾追加空格<code>--no-sandbox</code>参数即可<br>尽管有另外一种做法是在&#x2F;usr&#x2F;share&#x2F;applications 下或者~&#x2F;.local&#x2F;share&#x2F;applications 下找到或创建快捷方式(.desktop 文件)修改 exec，显然第一种做法更全面</p><h3 id="Firefox-浏览器"><a href="#Firefox-浏览器" class="headerlink" title="Firefox 浏览器"></a>Firefox 浏览器</h3><p><code>apt install firefox-esr</code><br>崩溃的问题没解决</p><h3 id="alist"><a href="#alist" class="headerlink" title="alist"></a>alist</h3><p>一款支持多种存储的目录文件列表程序，支持 web 浏览与 webdav 协议，后端基于 gin，前端使用 react<br><code>alist server</code>启动服务<br><code>alist admin</code>查看 admin 的密码<br>这里我只挂载 proot 中的 Debian 的斜杠<code>/</code>根目录，由于我在 Debian 内又挂载了 sdcard，所以等价于我可以访问 Debian 和手机 sdcard 的内容<br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2023-04-23-23-25-24.png"><br>根文件夹，在挂载路径内的相对路径，也就是直接访问服务端口时展现在页面上打勾 ✔ 的路径<br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2023-04-24-00-02-43.png"></p><h3 id="tesseract-ocr"><a href="#tesseract-ocr" class="headerlink" title="tesseract-ocr"></a>tesseract-ocr</h3><p><code>apt install tesseract-ocr</code><br>你需要一个 chi_sim.traineddata 中文训练数据<br><code>cp chi_sim.traineddata /usr/share/tesseract-ocr/4.00/tessdata/</code></p><h3 id="Barrier"><a href="#Barrier" class="headerlink" title="Barrier"></a>Barrier</h3><p>如果你还想压榨一下安卓设备的屏幕，可以尝试一下<br>想象一下电脑的鼠标和键盘可以同时控制 <code>电脑和安卓设备里的Linux</code><br><code>apt install barrier</code><br><code>barrier</code><br>客户端和服务端的 barrier 都要设置关闭 SSL<br>可以配合日志信息解决连接问题<br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2022-11-20-00-50-33.png"><br>可惜在使用 VNC 显示的情况下 barrier 的 client 中无法移动鼠标位置</p><h3 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h3><p>ALT + Insert 这个快捷键居然不能用，建议改键</p><h3 id="Mariadb-1"><a href="#Mariadb-1" class="headerlink" title="Mariadb"></a>Mariadb</h3><p>数据的重要性!!!，处理问题的时候最好也是先备份再删除，之前数据库出了问题，网上说删除&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;ib_logfile0 才可以运行数据库，但是导致之前的数据也不见了，虽然不是什么重要机密但不知道还能不能找回来</p><p>安装<code>apt-get update &amp;&amp; apt-get install mariadb-server</code></p><p>运行时需要检测这个路径存在 sock 文件<br><code>mkdir -p /run/mysqld</code><br><code>touch /run/mysqld/mysqld.sock</code></p><h4 id="跳过权限启动数据库服务"><a href="#跳过权限启动数据库服务" class="headerlink" title="跳过权限启动数据库服务"></a>跳过权限启动数据库服务</h4><p>先使用参数启动数据库服务，这样方便后面修改密码、设置远程登录<br><code>mysqld --skip-grant-tables</code></p><p>直接登录，用户名就是当前主机的用户名<code>whoami-&gt;root</code>，所以暂时不需要密码<br><code>mysql</code> &#x2F; <code>mysql -u root</code></p><h4 id="修改密码-记得换成你的密码"><a href="#修改密码-记得换成你的密码" class="headerlink" title="修改密码(记得换成你的密码)"></a>修改密码(记得换成你的密码)</h4><p><code>use mysql;</code><br><code>set password for &#39;root&#39;@&#39;localhost&#39; = password(&#39;this is your password&#39;);</code></p><h4 id="允许远程访问-记得换成你的密码"><a href="#允许远程访问-记得换成你的密码" class="headerlink" title="允许远程访问(记得换成你的密码)"></a>允许远程访问(记得换成你的密码)</h4><p><code>grant all on *.* to root@&#39;%&#39; identified by &#39;this is your password&#39; with grant option;</code></p><p><code>flush privileges;</code><br><code>quit;</code></p><p><code>vim /etc/mysql/mariadb.conf.d/50-server.cnf</code><br>将<code>bind-address</code>选项修改成下面的值<code>bind-address =::</code></p><p>重启，然后无参数启动<code>mysqld</code></p><h4 id="重新初始化"><a href="#重新初始化" class="headerlink" title="重新初始化"></a>重新初始化</h4><p>使用<code>mysql_secure_installation</code>进行初始化设置，注意先选<code>unix_sock :no</code>，还有禁止 root 远程登录也是 no</p><p>试试远程可以连接了吗，有问题先检查上面的配置，或者重启主机</p><h3 id="smartgit"><a href="#smartgit" class="headerlink" title="smartgit"></a>smartgit</h3><h3 id="WPS-office"><a href="#WPS-office" class="headerlink" title="WPS office"></a>WPS office</h3><p>居然只有.cn 的域名才能找到 arm 的下载地址<br><a href="https://www.wps.cn/product/wpslinux">https://www.wps.cn/product/wpslinux</a><br><code>wget https://wps-linux-personal.wpscdn.cn/wps/download/ep/Linux2019/11698/wps-office_11.1.0.11698_arm64.deb</code><br>为了避免每次运行出现 some formula symbols might be not display<br>因字体缺失导致的异常提示，安装完后再<a href="https://github.com/IamDH4/ttf-wps-fonts/archive/master.zip">下载安装一个字体包，README 有安装说明</a><br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2023-07-04-23-09-31.png" alt="zh_CN"><br>you can choose en or zh_CN language, default language is en<br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2023-07-04-23-15-50.png" alt="en"></p><h3 id="fonts"><a href="#fonts" class="headerlink" title="fonts"></a>fonts</h3><p>字体 fonts 设置，一些中文软件乱码可能是系统没有中文字体</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /usr/share/fonts/msyh</span><br><span class="line"> sudo cp 存放字体的目录/msyh.ttf /usr/share/fonts/msyh</span><br><span class="line"> sudo chmod 644 /usr/share/fonts/msyh/*</span><br><span class="line"> cd /usr/share/fonts/msyh</span><br><span class="line"> sudo mkfontscale</span><br><span class="line"> sudo mkfontdir</span><br><span class="line"> sudo fc-cache -fv</span><br></pre></td></tr></table></figure><h3 id="中文输入法"><a href="#中文输入法" class="headerlink" title="中文输入法"></a>中文输入法</h3><ul><li>谷歌拼音<br><code>apt install fcitx</code><br><code>apt install fcitx-googlepinyin</code><br>命令行输入 im-config 选中 fcitx<br>在 fcitx 里面找到配置，然后设置输入法<br>最好先添加配置，不然 wps 中无法切换输入法，wps 中无法显示候选框</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /root/.bashrc 添加如下配置</span></span><br><span class="line">fcitx &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> XMODIFIERS=”@im=fcitx”</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>存在问题</strong><br>光标前置，候选框只在左下角出现<br>文字太少，有些字只能输入繁体中文，甚至直接拼不出</p><ul><li><p>搜狗拼音</p></li><li><p>讯飞输入法<br>怎么只有 amd 的，没有 arm 的</p></li><li><p>chewing 输入法<br>繁体中文，有机会用到再安装吧</p></li></ul><h2 id="使用自签名证书升级-HTTP-到-HTTPS-x2F-TLS"><a href="#使用自签名证书升级-HTTP-到-HTTPS-x2F-TLS" class="headerlink" title="使用自签名证书升级 HTTP 到 HTTPS &#x2F; TLS"></a>使用自签名证书升级 HTTP 到 HTTPS &#x2F; TLS</h2><p>先使用 openssl 创建两份文件 ca.key &#x2F; ca.crt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -x509 -newkey rsa:2048 -sha256 -days 3650 -nodes -keyout ca.key -out ca.crt -subj <span class="string">&quot;/C=CN/CN=localhost&quot;</span> -addext <span class="string">&quot;subjectAltName=DNS:localhost,IP:127.0.0.1,IP:::1&quot;</span></span><br></pre></td></tr></table></figure><ul><li>alist<br><code>vim /opt/alist/data/config.json</code></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scheme&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;https&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cert_file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/……/ca.crt&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;key_file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/……/ca.key&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  # 如果你没有自定义路径，要像下面那样配置，同时记得两份ca文件也要在对应的data目录中</span><br><span class="line">  <span class="attr">&quot;cert_file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;data/ca.crt&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;key_file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;data/ca.key&quot;</span></span><br></pre></td></tr></table></figure><ul><li>code-server<br>[code-server 如何配置 https，点击查看](/2023/11/04/vscode%E5%92%8Ccode-server/## code-server 额外配置 https)</li><li>caddy<br>使用 caddy 的文件服务，加上 TLS，实现静态 web 服务的安全<br>需要编写 Caddyfile 配置文件，用 Caddyfile 启动时最好先重写 http&#x2F;https 端口，避免权限问题。<br>第一个大括号的内容是全局配置，声明了 caddy 要在哪个端口监听外部的 HTTP &#x2F; HTTPS 请求，这个端口 1180&#x2F;1443 也是做 DDNS 的路由器需要转发到外部的端口。主要是不这样 caddy 在无 root 权限的手机上会启动失败。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 重写覆盖启动时会访问的http/https端口</span><br><span class="line"># 因为手机无root访问1024以下端口会导致启动失败，80-&gt;1180，443-&gt;1443</span><br><span class="line">&#123;</span><br><span class="line">  http_port 1180</span><br><span class="line">  https_port 1443</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>caddy + HTTPS&#x2F;TLS 的静态 web 服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:1026 &#123;</span><br><span class="line">tls /opt/caddy/cert/ca.crt /opt/caddy/cert/ca.key</span><br><span class="line">file_server</span><br><span class="line">root * /opt/noVNC-1.4.0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>gitea<br>使用 caddy 加上 TLS 的反向代理映射到原端口</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:13001 &#123;</span><br><span class="line">tls /opt/caddy/cert/ca.crt /opt/caddy/cert/ca.key</span><br><span class="line">reverse_proxy :3000</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>websockify<br>require 是单实例的，导入的 node-websockify 没办法在同一个 js 文件里创建多个实例，那只能新建一个 configSSL.js 来做 HTTPS&#x2F;SSL 的，和之前的 config.js 区别开<br>websockify 的依赖在前面章节已经安装有了，那我们直接编写这个 HTTPS&#x2F;SSL 版的<code>vim configSSL.js</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> websockifySSL = <span class="built_in">require</span>(<span class="string">&quot;@maximegris/node-websockify&quot;</span>);</span><br><span class="line"><span class="title function_">websockifySSL</span>(&#123;</span><br><span class="line">  <span class="attr">source</span>: <span class="string">&quot;0.0.0.0:1096&quot;</span>,</span><br><span class="line">  <span class="attr">target</span>: <span class="string">&quot;0.0.0.0:5901&quot;</span>, <span class="comment">//VNC Server 的服务地址和端口，端口号为 5900，可能有些是5901</span></span><br><span class="line">  <span class="attr">cert</span>: <span class="string">&quot;/opt/caddy/cert/ca.crt&quot;</span>,</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&quot;/opt/caddy/cert/ca.key&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>node /opt/websocketToVnc/configSSL.js -6</code></p><h2 id="samba"><a href="#samba" class="headerlink" title="samba"></a>samba</h2><p>可以用来搭建 SMB 协议的文件共享服务</p><p>本节适用条件：手机卡槽有外接 microSD 卡（不是 USB OTG）、或已经 root 后的手机外置存储、<code>特殊的智能电视盒子外接硬盘</code><br>如果不符合条件请跳过本节</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>pkg install samba</code><br>官方参考配置<br><code>cp /data/data/com.termux/files/usr/share/doc/samba/smb.conf.example /data/data/com.termux/files/usr/etc/samba/smb.conf</code><br>快速配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">workgroup = WORKGROUP</span><br><span class="line">security = user</span><br><span class="line"></span><br><span class="line">[shared_folder]</span><br><span class="line">path = /storage/ext_sd</span><br><span class="line">writeable = yes</span><br><span class="line">guest ok = yes</span><br></pre></td></tr></table></figure><p>其中，<code>workgroup</code>指定了工作组名称，<code>security</code>指定了安全模式，<code>shared_folder</code>指定了共享文件夹的名称，<code>path</code>指定了该共享文件夹所在的路径，<code>writeable</code>指定了是否允许写入，<code>guest ok</code>指定了是否允许访客访问。</p><p><code>smbd</code>启动</p><h3 id="一般用-Windows-访问"><a href="#一般用-Windows-访问" class="headerlink" title="一般用 Windows 访问"></a>一般用 Windows 访问</h3><p>如果前面 samba 服务配置不了方便 Windows 使用的 445 默认 SMB 端口，则要准备做端口转发<br>先去设备管理器添加一个环回网卡<br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2024-02-19-03-05-01.png"><br>配置环回网卡 ip<br><img src="/img/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFTermux/2024-02-19-03-09-17.png"><br>确保 Windows 服务里面的 IP Helper 是启动的，并且以后也要一直运行中。<br>管理员命令行输入，监听 4.4.4.4:445，连接到 192.168.137.123:4445<br><code>netsh interface portproxy add v4tov4 listenaddress=4.4.4.4 listenport=445 connectaddress=192.168.137.123 connectport=4445</code><br>重启 Windows 电脑，然后在资源管理器输入路径<code>\\4.4.4.4</code>即可享用</p><p>如果映射错了，可以先查看转发了哪些端口<br><code>netsh interface portproxy show all</code><br>删除转发规则，只需要删除监听方即可<br><code>netsh interface portproxy delete v4tov4 listenaddress=4.4.4.4 listenport=445</code></p><h3 id="个人网络改造需求"><a href="#个人网络改造需求" class="headerlink" title="个人网络改造需求"></a>个人网络改造需求</h3><p>在目前没打算升级公网和机器的情况下，为了实现一块硬盘多处访问（目前硬盘运行在 CM311-5s 设备）<br>网线————内网硬盘<br>WiFi————外网</p><ul><li>去网络适配器设置无线网卡为默认路由网关<br>将访问外网的网关的跃点数设置为“1”，是最高优先级，如果有线连接，无线连接同时存在的话，所有的数据都是经由无线网卡处理的。</li><li>删除对所有 IP 的默认路由设置<br><code>route delete 0.0.0.0</code></li><li>将对所有 IP 的路由，指向外网网关 IP<br><code>route add 0.0.0.0 mask 0.0.0.0 192.168.1.1</code></li><li>对内网某个网段的访问，指向内网网关地址<br><code>route add 201.201.201.0 mask 255.255.255.0 200.101.5.2</code><br>对于内网网段 201.201.201 开头的地址的访问，从内网网关 200.101.5.2 走</li><li>查路由表<br><code>route print</code><br>应该没问题了，可以重启试试</li><li>如果网络搞出问题了，可以初始化网络<br><code>route delete 0.0.0.0</code></li></ul><h2 id="rsync"><a href="#rsync" class="headerlink" title="rsync"></a>rsync</h2><a href="/2024/08/04/rsync%E5%85%A5%E9%97%A8/" title="rsync入门">rsync入门</a><h2 id="开机自启脚本–长期更新维护"><a href="#开机自启脚本–长期更新维护" class="headerlink" title="开机自启脚本–长期更新维护"></a>开机自启脚本–长期更新维护</h2><p>没想到本来是说 termux 的，后来发展为 termux + debian 文档了……</p><ul><li>termux 配置<br><code>apt install nmap</code><br>并开启 ssh 服务端口作为接口，在 Debian 启动 vnc 之前访问 termux 的 ssh(以便提权使用)中的 nmap<br><code>vim ~/.bashrc</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">termux-wake-lock</span><br><span class="line">sshd</span><br><span class="line">mysqld &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">gitea &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><ul><li>Debian 这边<br>因为 ssh 不支持编写提前指定密码的脚本，所以我们还需要<code>apt install sshpass</code>，如果你不喜欢的话可以尝试换成密钥登陆。<br><code>vim ~/.bashrc</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#alist</span></span><br><span class="line">/opt/alist/alist server --data /opt/alist/data --force-bin-dir /opt/alist/data &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="comment">#caddy</span></span><br><span class="line">/opt/caddy/caddy_linux_arm64 run --config /opt/caddy/Caddyfile &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="comment">## homer</span></span><br><span class="line"><span class="comment">#/opt/caddy/caddy_linux_arm64 file-server --listen :3333 --root /opt/homer &gt; /dev/null 2&gt;&amp;1 &amp;</span></span><br><span class="line"><span class="comment">## gitea</span></span><br><span class="line"><span class="comment">#/opt/caddy/caddy_linux_arm64 reverse-proxy --from :13000 --to 127.0.0.1:3000 &gt; /dev/null 2&gt;&amp;1 &amp;</span></span><br><span class="line"><span class="comment">#mariadb</span></span><br><span class="line"><span class="comment">#mysqld &gt; /dev/null 2&gt;&amp;1 &amp;</span></span><br><span class="line"><span class="comment">#node env</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:/opt/node-v18.16.0-linux-arm64/bin&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:/opt/node-v18.16.0-linux-arm64/node_global&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:/opt/node-v18.16.0-linux-arm64/node_cache&quot;</span></span><br><span class="line"><span class="comment">#java env</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:/opt/graalvm-community-openjdk-17.0.9+9.1/bin&quot;</span></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=<span class="string">&quot;<span class="variable">$CLASSPATH</span>:/opt/graalvm-community-openjdk-17.0.9+9.1/lib&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#fcitx start</span></span><br><span class="line">fcitx &gt; /dev/null 2&gt;&amp;1</span><br><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> XMODIFIERS=”@im=fcitx”</span><br><span class="line"><span class="comment">#fcitx end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#code-server</span></span><br><span class="line">/opt/code-server-4.12.0-linux-arm64/bin/code-server &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#cloudbeaver</span></span><br><span class="line"><span class="comment">#export CLOUDBEAVER_HOME=&quot;/opt/cloudbeaver&quot;</span></span><br><span class="line">(<span class="built_in">cd</span> /opt/cloudbeaver &amp;&amp; /opt/cloudbeaver/run-server.sh &gt; /dev/null 2&gt;&amp;1 &amp;)</span><br><span class="line"><span class="comment">#/opt/cloudbeaver/run-server.sh &gt; /dev/null 2&gt;&amp;1 &amp;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#nginx start</span></span><br><span class="line"><span class="comment">#if !(service nginx status | grep &quot;nginx is running.&quot; &gt; /dev/null)</span></span><br><span class="line"><span class="comment">#then</span></span><br><span class="line"><span class="comment">#       /etc/init.d/nginx start &gt; /dev/null</span></span><br><span class="line"><span class="comment">#fi</span></span><br><span class="line"><span class="comment">#nginx end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ssh start</span></span><br><span class="line"><span class="keyword">if</span> !(service ssh status | grep <span class="string">&quot;sshd is running.&quot;</span> &gt; /dev/null)</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        /etc/init.d/ssh start &gt; /dev/null</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#ssh end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#jmeter</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:/opt/apache-jmeter-5.6.2/bin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#websocketToVnc</span></span><br><span class="line">node /opt/websocketToVnc/config.js -6  &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">node /opt/websocketToVnc/configSSL.js -6  &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#vncstart</span></span><br><span class="line"><span class="keyword">if</span> sshpass -p qfra555 ssh u0_a347@localhost -p 8022 &gt; /dev/null 2&gt;&amp;1 &lt;&lt; <span class="string">eeooff</span></span><br><span class="line"><span class="string">nmap localhost | grep 5901/tcp | grep vnc-1</span></span><br><span class="line"><span class="string">exit</span></span><br><span class="line"><span class="string">eeooff</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="comment">#        echo &quot;5901 vnc is alreday on&quot;</span></span><br><span class="line"><span class="built_in">return</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        vncserver-stop &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">        vncserver-start &gt; /dev/null 2&gt;&amp;1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#vncend</span></span><br></pre></td></tr></table></figure><ul><li>出问题了看这里<br>如果是安卓 10 之前可以直接使用 netstat，不需要 nmap，并且 Debian 的脚本也要改了<br><code>&gt; /dev/null</code>重定向到 null，就不会在屏幕显示运行时的日志<br><code>&gt; /dev/null 2&gt;&amp;1</code>不显示日志，并且后台运行</li></ul><h2 id="termux-备份与恢复"><a href="#termux-备份与恢复" class="headerlink" title="termux 备份与恢复"></a>termux 备份与恢复</h2><p>基于官方的教程<a href="https://wiki.termux.com/wiki/Backing_up_Termux">https://wiki.termux.com/wiki/Backing_up_Termux</a><br>经过本人实践后得出这一章的内容</p><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><h4 id="preprocess-解决打包可能触发的权限问题"><a href="#preprocess-解决打包可能触发的权限问题" class="headerlink" title="preprocess 解决打包可能触发的权限问题"></a>preprocess 解决打包可能触发的权限问题</h4><p><code>termux-setup-storage</code>获取权限</p><p><code>vim ~/start-debian.sh</code>找到-b &#x2F;sdcard 的行添加注释符号#，取消挂载 sdcard</p><p>删除 debian 中挂载的&#x2F;sdcard 文件夹<br><code>rm -rf ~/debian-binds/sdcard</code></p><h4 id="process-打包"><a href="#process-打包" class="headerlink" title="process 打包"></a>process 打包</h4><p><code>cd /data/data/com.termux/files</code></p><p>打包到&#x2F;sdcard&#x2F;Download 文件夹<br><code>tar -zcvf ~/storage/Download/termux_backup_phoneA.tar.gz home usr</code></p><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><p><code>termux-setup-storage</code>获取权限</p><p>提取 home 和 usr 并覆盖所有内容。传递–recursive-unlink 以删除任何垃圾文件和孤立文件。传递–preserve-permissions 以像在存档中一样设置文件权限，忽略 umask 值。通过组合这些额外的选项，您将获得与存档中完全相同的安装状态<br><code>tar -zxvf /sdcard/Download/termux_backup_phoneA.tar.gz -C /data/data/com.termux/files --recursive-unlink --preserve-permissions</code></p><h3 id="目前存在问题"><a href="#目前存在问题" class="headerlink" title="目前存在问题"></a>目前存在问题</h3><p>恢复后在 termux 端的 whoami 与 ssh 登陆时使用的用户名不一致<br>termux -&gt; <code>whoami</code> -&gt; <code>u0_a447</code><br>ssh_remoteTermux -&gt; <code>u0_a347@localhost -p 8022</code> -&gt; 登陆成功</p><h2 id="apt"><a href="#apt" class="headerlink" title="apt"></a>apt</h2><p>大部分时候只会 apt install ？ 是时候普及一下 apt 的其他命令了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">apt install program_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已安装</span></span><br><span class="line">apt list --installed | grep program_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">apt --purge remove openjdk-11-jdk</span><br><span class="line"></span><br><span class="line">apt --purge remove openjdk-11-jdk-headless</span><br><span class="line"></span><br><span class="line">apt --purge remove openjdk-11-jre</span><br><span class="line"></span><br><span class="line">apt --purge remove openjdk-11-jre-headless</span><br></pre></td></tr></table></figure><h2 id="安卓-5-or-6"><a href="#安卓-5-or-6" class="headerlink" title="安卓 5 or 6"></a>安卓 5 or 6</h2><p>Termux-on-android-5-or-6</p><p>替换源地址</p><p>gpg key</p><p>缺少可以执行 gpg 的包</p><p>安装包，包不可用，使用替代包</p><p>gpg key</p><h2 id="安卓高版本进程限制"><a href="#安卓高版本进程限制" class="headerlink" title="安卓高版本进程限制"></a>安卓高版本进程限制</h2><p>运行占用高 CPU 的程序，进程数量过多，便有可能被 Android 系统杀死<br>并抛出<code>Process completed (signal 9) - press Enter</code><br>可以在开发者模式下，使用以下 adb 命令解决<br>以下命令可能会对设备造成损坏，或导致后台程序失控</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Android 12L和Android 13</span></span><br><span class="line">./adb shell &quot;settings put global settings_enable_monitor_phantom_procs false&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Android 12，无GMS</span></span><br><span class="line">./adb shell &quot;/system/bin/device_config put activity_manager max_phantom_processes 2147483647&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Android 12，有GMS</span></span><br><span class="line">./adb shell &quot;/system/bin/device_config set_sync_disabled_for_tests persistent; /system/bin/device_config put activity_manager max_phantom_processes 2147483647&quot; 作者：Ivon_Huang https://www.bilibili.com/read/cv20060713/ 出处：bilibili</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Termux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aidlux</title>
      <link href="/2022/05/22/Aidlux/"/>
      <url>/2022/05/22/Aidlux/</url>
      
        <content type="html"><![CDATA[<h1 id="Aidlux"><a href="#Aidlux" class="headerlink" title="Aidlux"></a>Aidlux</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Aidlux 是基于 ARM 架构的跨生态（Android&#x2F;鸿蒙+Linux）一站式人工智能物联网（AIoT）应用开发和部署平台。<br>总结来说就是手机里的 Linux 系统。</p><p>好处：（1）联想一下 Linux 都能干些什么。（2）局域网内的便携式主机。（3）支持 http 使用网址+端口号直连</p><p>坏处：开发者个人乞丐版，无真实 root 权限支持，没有 Linux 外设驱动支持，没有商业技术支持。</p><h2 id="安装环境要求"><a href="#安装环境要求" class="headerlink" title="安装环境要求"></a>安装环境要求</h2><p>安卓手机需要 Android 6.0</p><h2 id="可玩性研究分析"><a href="#可玩性研究分析" class="headerlink" title="可玩性研究分析"></a>可玩性研究分析</h2><p>内置了应用中心，点击即可下载海量应用。如果想要的应用是 arm 版本的，自行安装配置后基本上也是可以运行的。</p><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>vscode、nodejs</p><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>java、maven，idea 需要图形化界面，而 VNC 拉跨的速度，实在是忍不下去了，姑且当个部署机用吧。</p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>Mariadb、monggodb</p><h3 id="人脸与姿态识别"><a href="#人脸与姿态识别" class="headerlink" title="人脸与姿态识别"></a>人脸与姿态识别</h3><p>tensflow</p><h3 id="很多我没用过的"><a href="#很多我没用过的" class="headerlink" title="很多我没用过的"></a>很多我没用过的</h3><p>kafka、redis、python、gcc…………</p><p>内置的应用太多了，可以自行下载体验，或者后期补上一个图&#x2F;&#x2F;todo，内置的不好玩就自行安装官方的 arm 版软件即可。后面将对本人涉猎过的可玩性进行详细分析。</p><h2 id="可玩性详细分析"><a href="#可玩性详细分析" class="headerlink" title="可玩性详细分析"></a>可玩性详细分析</h2><h3 id="SSH-连接"><a href="#SSH-连接" class="headerlink" title="SSH 连接"></a>SSH 连接</h3><p>默认密码<code>aidlux</code>，使用<code>passwd</code>修改密码，然后就可以使用<code>ssh</code>连接 aidlux 了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@host:9022</span><br></pre></td></tr></table></figure><h3 id="Aidlux-远程访问桌面"><a href="#Aidlux-远程访问桌面" class="headerlink" title="Aidlux 远程访问桌面"></a>Aidlux 远程访问桌面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8000</span><br></pre></td></tr></table></figure><h3 id="xfce4-与-VNC"><a href="#xfce4-与-VNC" class="headerlink" title="xfce4 与 VNC"></a>xfce4 与 VNC</h3><p>xfce4 与 VNC 共同实现了 Linux 的图形化桌面，由于这肉眼可见的延迟，我就不太喜欢用了，既然踩过坑了还是讲一下吧。<br>之前是因为 idea 需要图形界面才能启动才踩的这个坑，Aidlux 的老版本，那时候叫 Aidlearning，老版本是内置有 xfce4 和 VNC 的，新版本好像要自己安装了。具体要去官网的开发者社区搜索<a href="https://community.aidlux.com/postDetail/313">AidLux 平台 XFCE4 桌面安装指南&amp;配置无密码启动</a></p><h4 id="VNC-远程访问地址"><a href="#VNC-远程访问地址" class="headerlink" title="VNC 远程访问地址"></a>VNC 远程访问地址</h4><p>vnc 默认密码<code>aidlux</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhsot:6080/vnc.html</span><br></pre></td></tr></table></figure><h4 id="设置-xfce4-分辨率"><a href="#设置-xfce4-分辨率" class="headerlink" title="设置 xfce4 分辨率"></a>设置 xfce4 分辨率</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/vncserver-start</span><br></pre></td></tr></table></figure><h4 id="设置-VNC-免输密码登录"><a href="#设置-VNC-免输密码登录" class="headerlink" title="设置 VNC 免输密码登录"></a>设置 VNC 免输密码登录</h4><p>&#x2F;home&#x2F;applications&#x2F;xfce4&#x2F;index.html</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*将该文件script中的代码替换为如下内容，注意password的内容为你安装xfce4时设置的密码：*/</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> =</span><br><span class="line">  <span class="string">&quot;http://&quot;</span> +</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hostname</span> +</span><br><span class="line">  <span class="string">&quot;:6080/vnc.html?host=&quot;</span> +</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hostname</span> +</span><br><span class="line">  <span class="string">&quot;&amp;port=6080&amp;password=aidlux&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h3><h4 id="VSCode-远程"><a href="#VSCode-远程" class="headerlink" title="VSCode 远程"></a>VSCode 远程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）code-server    http://localhst:8008</span><br><span class="line"></span><br><span class="line">（2）vscode         http://localhst:8009</span><br></pre></td></tr></table></figure><h4 id="历史遗留问题及解决方案"><a href="#历史遗留问题及解决方案" class="headerlink" title="历史遗留问题及解决方案"></a>历史遗留问题及解决方案</h4><p>应用中心和 aid 中为大家提供了两个版本的 vscode ide。两者都是 vscode 的 ide，区别在于二者集成的版本不同，另外集成环境也有所差异。vscode 较为稳定，但不支持较老的设备，code-server 能兼容较老的一些设备，但稳定性比 vscode 稍差。</p><p>vscode 是使用官网最新的 v1.61.0 编译的 arm 版本，稳定性较好，也支持更多的新特性。但对于浏览器有一定要求，低版本 webview 的手机打开 vscode 会存在白屏，无法使用的情况，但使用 web 桌面或者桌面浏览器访问是可以打开并且使用的。</p><p>经测试，Android 系统 webview 版本大于等于 83 是可以正常打开并使用的。</p><p>为了能有更愉快的使用体验，建议使用 vscode，因 webview 版本较低的情况无法使用，可考虑升级 webview 解决该问题。我</p><h3 id="Mariadb"><a href="#Mariadb" class="headerlink" title="Mariadb"></a>Mariadb</h3><p>MariaDB 的部分先偷个懒，可以参考国光 Termux 的 Mariadb 部分，<a href="https://www.sqlsec.com/2018/05/termux.html">Termux 高级终端安装使用配置教程</a></p><p>（1）安装</p><p>（2）设置远程连接</p><h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3><p>应用中心点击即可安装 nodejs</p><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><p>（1）安装</p><p>一般地，在安装了 nodejs 后会带有 npm 包管理器，可以使用 npm 安装 hexo 了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装 hexo，我菜鸡不想搞局部安装，所以我全局安装了</span></span><br><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>（2）新建项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将新建一个名为 projectName的 hexo工程</span></span><br><span class="line">hexo init [projectName]</span><br><span class="line"><span class="comment"># 将当前文件夹初始化为hexo工程</span></span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>（3）安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> projectName</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>（4）新建文章</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一个 fileName.md，这将在 source/_posts，生成一个对应的markdown文件</span></span><br><span class="line">hexo new <span class="string">&quot;fileName&quot;</span></span><br></pre></td></tr></table></figure><p>（5）启动 hexo 服务并访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>hexo 默认访问地址：<a href="http://localhost4000/">http://localhost4000</a></p><p>（6）清除缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清除 db.json和 public内的 web资源文件，删除 markdown文章后，出现 markdown文章和 web资源文章数量不一致时使用</span></span><br><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>（7）导出为 Web 资源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line"><span class="comment"># 全称是 hexo generate，这将会在hexo项目根目录生成一个`public`文件夹存放hexo转换后的web静态资源，部署为web项目时只需要将public/index.html设置为首页即可</span></span><br></pre></td></tr></table></figure><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p>疑似因为乞丐版 Aidlux 的限制，监视数量超过限制，偶尔出现无法启动 hexo 服务的情况，所以选择将 hexo 导出为 web 资源，通过 nginx 部署 web 项目。</p><p>（1）安装</p><p><strong>应用中心点击即可下载</strong></p><p>（2）配置</p><p><code>sites-available</code>存放每个项目的配置 ，<code>sites-enabled</code>存放的是每个配置的软连接。</p><p>我们只需要在<code>sites-available</code>新建自己的配置，再在<code>sites-enabled</code>生成该配置的软链接即可，nginx 启动时依赖的是配置的软链接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复制 default默认配置文件，修改配置文件为 hexo项目专用</span></span><br><span class="line"><span class="built_in">cp</span> /etc/nginx/sites-available/default /etc/nginx/sites-available/hexo</span><br><span class="line">vim /etc/nginx/sites-available/hexo</span><br><span class="line"><span class="comment"># 配置hexo项目端口，web静态资源根目录，首页资源文件</span></span><br><span class="line">server &#123;</span><br><span class="line">        listen 4000 default_server;</span><br><span class="line">        listen [::]:4000 default_server;</span><br><span class="line">        root /usr/local/workspace/blog/public;</span><br><span class="line">        index index.html index.htm index.nginx-debian.html;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#为hexo项目配置生成软链接，ln -s 源文件 软链接快捷方式</span></span><br><span class="line"><span class="built_in">ln</span> -s /etc/nginx/sites-available/hexo /etc/nginx/sites-enabled/hexo</span><br><span class="line"><span class="comment">#可以删除不必要的软链接，只留下hexo项目的软链接，提高效率</span></span><br></pre></td></tr></table></figure><p>（3）启动与停止</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">nginx</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure><h3 id="SVN"><a href="#SVN" class="headerlink" title="SVN"></a>SVN</h3><p>（1）安装</p><p>（2）配置</p><p>（3）设置 SVN 自启动，详情见<code>环境变量和自启动autoSvn</code></p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><h3 id="环境变量和自启动"><a href="#环境变量和自启动" class="headerlink" title="环境变量和自启动"></a>环境变量和自启动</h3><p>Aidlux 1.2 版本之前在<code>/root/.bashrc</code>设置环境变量和自启动。但自启动设置过多时，终端启动效率低。</p><p>Alidux 1.2 版本开始，新增自启动配置<code>/root/.rc.local</code>优化终端启动速度，环境变量仍可在<code>/root/.bashrc</code>配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">vim /root/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment">#jdk evn</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/jdk1.8.0_311</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib</span><br><span class="line"><span class="comment">#autoSvn</span></span><br><span class="line">svnserve -d -r /usr/local/svn</span><br><span class="line"><span class="comment"># set maven environment</span></span><br><span class="line"><span class="built_in">export</span> MAVEN_HOME=/usr/local/apache-maven-3.8.2</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:<span class="variable">$&#123;MAVEN_HOME&#125;</span>/bin</span><br><span class="line"><span class="comment"># autoHexo //todo</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root;</span><br><span class="line"><span class="comment"># su demo;</span></span><br><span class="line"><span class="built_in">source</span> ./.f.sh</span><br><span class="line">./.e.sh</span><br><span class="line"><span class="built_in">cd</span> /home;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
